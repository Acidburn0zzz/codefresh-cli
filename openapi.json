{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "name": "Codefresh",
      "url": "https://www.codefresh.io"
    },
    "description": "Codefresh API openAPI 3.0 specification",
    "termsOfService": "https://codefresh.io/docs/docs/terms-and-privacy-policy/terms-of-service/",
    "title": "Codefresh API",
    "version": "0.0.2",
    "x-logo": {
      "url": "https://i.ibb.co/X7kg7jb/image.png",
      "backgroundColor": "#FFFFFF",
      "altText": "Codefresh"
    }
  },
  "x-service-name": "api-public",
  "x-base-path": "/api",
  "x-internal-services": [
    "pipeline-manager",
    "api"
  ],
  "x-endpoint-conditions": [
    {
      "weight": 0,
      "condition": "global.has-general-service-role",
      "handlerRegex": "(.*)"
    }
  ],
  "servers": [
    {
      "url": "https://g.codefresh.io/api"
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ],
  "x-filters": [
    {
      "pathRegex": "/builds/{serviceId}/",
      "methods": [
        "post"
      ]
    },
    {
      "pathRegex": "/builds/{buildId}/update",
      "methods": [
        "post"
      ]
    },
    {
      "tags": [
        "users",
        "firebase",
        "version",
        "payments"
      ]
    }
  ],
  "x-tagGroups": [
    {
      "name": "Pipelines / Builds",
      "tags": [
        "builds",
        "images",
        "pipelines",
        "step-types",
        "progress",
        "triggers",
        "triggers.events",
        "triggers.types",
        "annotations",
        "version",
        "firebase"
      ]
    },
    {
      "name": "Kubernetes / Helm",
      "tags": [
        "kubernetes",
        "helm.boards",
        "helm.charts",
        "helm.releases",
        "helm.sections"
      ]
    },
    {
      "name": "Swarm",
      "tags": [
        "compositions",
        "environments"
      ]
    },
    {
      "name": "Integrations / Contexts",
      "tags": [
        "clusters",
        "contexts",
        "helm.repos",
        "registries",
        "repos"
      ]
    },
    {
      "name": "Account Management",
      "tags": [
        "abac",
        "accounts",
        "payments",
        "runtimeEnvs",
        "teams",
        "tokens",
        "users",
        "views"
      ]
    },
    {
      "name": "User Properties",
      "tags": [
        "favorites"
      ]
    },
    {
      "name": "On-Premise",
      "tags": [
        "features",
        "onPrem.runtimeEnvs",
        "onPrem.runtimeEnvs.account",
        "onPrem.runtimeEnvs.plan",
        "onPrem.runtimeEnvs.system"
      ]
    }
  ],
  "tags": [
    {
      "name": "Pipelines",
      "description": "pipelines",
      "x-id": "pipelines"
    },
    {
      "name": "Views",
      "description": "views",
      "x-id": "views"
    },
    {
      "name": "Step-types",
      "description": "step-types",
      "x-id": "step-types"
    },
    {
      "name": "Builds",
      "description": "builds",
      "x-id": "builds"
    },
    {
      "name": "Contexts",
      "description": "contexts",
      "x-id": "contexts"
    },
    {
      "name": "Images",
      "description": "images",
      "x-id": "images"
    },
    {
      "name": "Triggers",
      "description": "triggers",
      "x-id": "triggers"
    },
    {
      "name": "Triggers Types",
      "description": "triggers.types",
      "x-id": "triggers.types"
    },
    {
      "name": "Triggers Events",
      "description": "triggers.events",
      "x-id": "triggers.events"
    },
    {
      "name": "Annotations",
      "description": "annotations",
      "x-id": "annotations"
    },
    {
      "name": "Environments",
      "description": "environments",
      "x-id": "environments"
    },
    {
      "name": "Compositions",
      "description": "compositions",
      "x-id": "compositions"
    },
    {
      "name": "Helm Charts",
      "description": "helm.charts",
      "x-id": "helm.charts"
    },
    {
      "name": "Helm Releases",
      "description": "helm.releases",
      "x-id": "helm.releases"
    },
    {
      "name": "Helm Repos",
      "description": "helm.repos",
      "x-id": "helm.repos"
    },
    {
      "name": "Helm Boards",
      "description": "helm.boards",
      "x-id": "helm.boards"
    },
    {
      "name": "Helm Sections",
      "description": "helm.sections",
      "x-id": "helm.sections"
    },
    {
      "name": "Repos",
      "description": "repos",
      "x-id": "repos"
    },
    {
      "name": "Teams",
      "description": "teams",
      "x-id": "teams"
    },
    {
      "name": "Kubernetes",
      "description": "kubernetes",
      "x-id": "kubernetes"
    },
    {
      "name": "Version",
      "description": "version",
      "x-id": "version"
    },
    {
      "name": "Firebase",
      "description": "firebase",
      "x-id": "firebase"
    },
    {
      "name": "Users",
      "description": "users",
      "x-id": "users"
    },
    {
      "name": "Runtime Environments",
      "description": "runtimeEnvs",
      "x-id": "runtimeEnvs"
    },
    {
      "name": "Registries",
      "description": "registries",
      "x-id": "registries"
    },
    {
      "name": "Progress",
      "description": "progress",
      "x-id": "progress"
    },
    {
      "name": "Payments",
      "description": "payments",
      "x-id": "payments"
    },
    {
      "name": "Providers",
      "description": "providers",
      "x-id": "providers"
    },
    {
      "name": "Features",
      "description": "features",
      "x-id": "features"
    },
    {
      "name": "Clusters",
      "description": "clusters",
      "x-id": "clusters"
    },
    {
      "name": "Tokens",
      "description": "tokens",
      "x-id": "tokens"
    },
    {
      "name": "Runtime Environments.",
      "description": "onPrem.runtimeEnvs",
      "x-id": "onPrem.runtimeEnvs"
    },
    {
      "name": "Runtime Environments (Plan)",
      "description": "onPrem.runtimeEnvs.plan",
      "x-id": "onPrem.runtimeEnvs.plan"
    },
    {
      "name": "Runtime Environments (System)",
      "description": "onPrem.runtimeEnvs.system",
      "x-id": "onPrem.runtimeEnvs.system"
    },
    {
      "name": "Runtime Environments (Account)",
      "description": "onPrem.runtimeEnvs.account",
      "x-id": "onPrem.runtimeEnvs.account"
    },
    {
      "name": "Accounts",
      "description": "accounts",
      "x-id": "accounts"
    },
    {
      "name": "Abac",
      "description": "abac",
      "x-id": "abac"
    },
    {
      "name": "Approval",
      "description": "Approval",
      "x-id": "approval"
    }
  ],
  "paths": {
    "/abac": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-list",
        "summary": "List rules",
        "parameters": [],
        "x-sdk-interface": "abac.rules.list"
      },
      "post": {
        "x-action": "createGrantRule",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "action": {
                    "type": "string"
                  },
                  "resource": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create rule",
        "parameters": [],
        "x-sdk-interface": "abac.rules.create"
      }
    },
    "/abac/batch": {
      "post": {
        "x-action": "updateRules",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-create-or-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "create": {
                    "items": {
                      "$ref": "#/components/schemas/abac"
                    },
                    "type": "array"
                  },
                  "delete": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create or delete rules",
        "parameters": [],
        "x-sdk-interface": "abac.rules.createOrDelete"
      }
    },
    "/abac/resource/{resource}": {
      "get": {
        "parameters": [
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-list-by-resource",
        "summary": "Get rules by resource",
        "x-sdk-interface": "abac.rules.listByResource"
      }
    },
    "/abac/tags/rule/{rule}": {
      "post": {
        "x-action": "updateRule",
        "x-entityId": {
          "pathId": "params.rule",
          "pathName": "body.tags[0]"
        },
        "parameters": [
          {
            "description": "The id of the rule",
            "in": "path",
            "name": "rule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-tags-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update rule tags",
        "x-sdk-interface": "abac.rules.tags.update"
      }
    },
    "/abac/tags/rules": {
      "post": {
        "x-action": "updateTagsForRules",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-tags-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "rules": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create rules tags",
        "parameters": [],
        "x-sdk-interface": "abac.rules.tags.create"
      }
    },
    "/abac/team/{teamId}": {
      "get": {
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-list-by-team",
        "summary": "Get rules by team id",
        "x-sdk-interface": "abac.rules.listByTeam"
      }
    },
    "/abac/teamRules": {
      "post": {
        "x-action": "createRulesForTeam",
        "x-entityId": {
          "pathName": "body.teams[0]"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-create-in-batch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/abac"
              }
            }
          },
          "required": true
        },
        "summary": "Create rules in batch",
        "parameters": [],
        "x-sdk-interface": "abac.rules.createInBatch"
      }
    },
    "/abac/{rule}": {
      "delete": {
        "x-action": "deleteRuleForTeam",
        "x-entityId": {
          "pathName": "params.rule"
        },
        "parameters": [
          {
            "description": "The id of the rule",
            "in": "path",
            "name": "rule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-delete",
        "summary": "Delete rule",
        "x-sdk-interface": "abac.rules.delete"
      },
      "get": {
        "parameters": [
          {
            "description": "The id of the rule",
            "in": "path",
            "name": "rule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "abac"
        ],
        "operationId": "abac-rules-get",
        "summary": "Get rule",
        "x-sdk-interface": "abac.rules.get"
      }
    },
    "/accounts/{accountId}/{userId}": {
      "delete": {
        "x-action": "removeUserFromAccount",
        "x-entityId": "params.accountId",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet",
        "operationId": "accounts-delete-user-from-account",
        "summary": "Delete user from account",
        "x-sdk-interface": "accounts.deleteUserFromAccount"
      }
    },
    "/accounts/{accountId}/{userId}/resendInvite": {
      "post": {
        "x-action": "resendInviteToUser",
        "x-entityId": "params.accountId",
        "operationId": "accounts-resend-invite",
        "tags": [
          "accounts"
        ],
        "summary": "Resend invite",
        "x-sdk-interface": "accounts.resendInvite",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/accounts/{accountId}/{userId}/adduser": {
      "post": {
        "x-action": "addExistingUserToAccount",
        "x-entityId": "params.accountId",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-add-existing-user-to-account",
        "summary": "Add existing user to account",
        "x-sdk-interface": "accounts.addExistingUserToAccount"
      }
    },
    "/accounts/{accountId}/{userId}/admin": {
      "delete": {
        "x-entityId": "params.accountId",
        "x-action": "removeUserFromAdmins",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-delete-admin",
        "summary": "Delete admin",
        "x-sdk-interface": "accounts.deleteAdmin"
      },
      "post": {
        "x-entityId": "params.accountId",
        "x-action": "makeUserAdmin",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-set-as-admin",
        "summary": "Set as admin",
        "x-sdk-interface": "accounts.setAsAdmin"
      }
    },
    "/accounts/{accountId}/adduser": {
      "post": {
        "x-action": "addUserToAccount",
        "x-entityId": "body.accountId",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Adds a not existing user to an account. the provider field is optional and if not provided it will be taken from the account model",
        "operationId": "accounts-add-user-to-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userDetails": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Add user to account",
        "x-sdk-interface": "accounts.addUserToAccount"
      }
    },
    "/accounts/{accountId}/update": {
      "post": {
        "x-action": "updateAccount",
        "x-entityId": {
          "pathId": "params.accountId",
          "pathName": "body.name"
        },
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet: update the user defined account fields. Receives a settings object (will be defined later)",
        "operationId": "accounts-update-account-public-settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "integrations": {
                    "type": "object",
                    "x-secure": true
                  },
                  "notifications": {
                    "items": {
                      "properties": {
                        "events": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "slack": {
                          "properties": {
                            "uri": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "enum": [
                            "webhook",
                            "slack"
                          ],
                          "type": "string"
                        },
                        "webhook": {
                          "properties": {
                            "method": {
                              "type": "string"
                            },
                            "uri": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update account public settings",
        "x-sdk-interface": "accounts.updateAccountPublicSettings"
      }
    },
    "/accounts/{accountId}/{userId}/updateuser": {
      "post": {
        "x-action": "updateUserByAdmin",
        "x-entityId": "params.accountId",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of an object",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet",
        "operationId": "accounts-update-user-details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "logins": {
                    "type": "object",
                    "x-secure": true
                  },
                  "key": {
                    "type": "object",
                    "x-secure": true
                  },
                  "settings": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update user details",
        "x-sdk-interface": "accounts.updateUserDetails"
      }
    },
    "/accounts/{accountId}/users": {
      "get": {
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "List users of an account",
        "operationId": "accounts-get-users-for-account",
        "summary": "Get users for account",
        "x-sdk-interface": "accounts.getUsersForAccount"
      }
    },
    "/admin/accounts": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "get all the accounts in the system",
        "operationId": "accounts-list-accounts",
        "summary": "List accounts",
        "parameters": [],
        "x-sdk-interface": "accounts.listAccounts"
      },
      "post": {
        "x-action": "createAccount",
        "x-audit": {
          "name": {
            "path": "name",
            "source": "res"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Add new account. Receives an account object ",
        "operationId": "accounts-add-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add account",
        "parameters": [],
        "x-sdk-interface": "accounts.addAccount"
      }
    },
    "/admin/accounts/addpendinguser": {
      "post": {
        "x-action": "addPendingUser",
        "x-audit": {
          "name": {
            "path": "body.email",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-add-pending-user-without-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "account": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "provider": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "userName": {
                    "type": "string"
                  }
                },
                "required": [
                  "userName",
                  "provider"
                ],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add pending user without account",
        "parameters": [],
        "x-sdk-interface": "accounts.addPendingUserWithoutAccount"
      }
    },
    "/admin/accounts/{accountId}": {
      "delete": {
        "x-action": "deleteAccount",
        "x-entityId": "params.accountId",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet",
        "operationId": "accounts-delete-account",
        "summary": "Delete account",
        "x-sdk-interface": "accounts.deleteAccount"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Get an account by id",
        "operationId": "accounts-get-by-id",
        "summary": "Get by id",
        "x-sdk-interface": "accounts.getById"
      }
    },
    "/admin/accounts/{id}/update": {
      "post": {
        "x-action": "updateAccount",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.accountDetails.name"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "description": "Not implemented yet: Update the account info that only codefresh admins (codefresh employees, not account admin) can access",
        "operationId": "accounts-update-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountDetails": {
                    "type": "object",
                    "properties": {
                      "integrations": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update account",
        "x-sdk-interface": "accounts.updateAccount"
      }
    },
    "/admin/accounts/{id}/rename": {
      "post": {
        "x-action": "renameAccount",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "accounts"
        ],
        "operationId": "accounts-update-account-by-admin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "integrations": {
                    "type": "object",
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "summary": "Rename account",
        "x-sdk-interface": "accounts.renameAccountByAdmin"
      }
    },
    "/admin/runtime-environments": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs"
        ],
        "operationId": "onPrem-runtimeEnvs-list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "accountIds",
            "schema": {
              "type": "string"
            },
            "description": "Account ids"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "onPrem.runtimeEnvs.list"
      }
    },
    "/admin/runtime-environments/account/default/{account}/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "setDefaultRuntimeEnvByAdminToAccount",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.account"
        ],
        "operationId": "onPrem-runtimeEnvs-account-set-default",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Account"
          },
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          }
        ],
        "summary": "Set default for account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.setDefault"
      }
    },
    "/admin/runtime-environments/account/modify/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "addRuntimeEnvToAccountByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.account"
        ],
        "operationId": "onPrem-runtimeEnvs-account-modify",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          }
        ],
        "summary": "Add to account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.modify"
      },
      "delete": {
        "x-action": "removeRuntimeEnvFromAccountByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.account"
        ],
        "operationId": "onPrem-runtimeEnvs-account-delete",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          }
        ],
        "summary": "Delete for account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.delete"
      }
    },
    "/admin/runtime-environments/account/{account}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.account"
        ],
        "operationId": "onPrem-runtimeEnvs-account-list",
        "parameters": [
          {
            "in": "path",
            "name": "account",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Account"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "accountIds",
            "schema": {
              "type": "string"
            },
            "description": "Account ids"
          }
        ],
        "summary": "Get by account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.list"
      }
    },
    "/admin/runtime-environments/default/{plan}/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "setDefaultRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.plan"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-set-default",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Plan"
          },
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          }
        ],
        "summary": "Set default",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.setDefault"
      }
    },
    "/admin/runtime-environments/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "upsertRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.system"
        ],
        "operationId": "onPrem-runtimeEnvs-system-update",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "description": "Runtime environment name",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "extend",
            "description": "Extend or not",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "description": "Description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.update"
      },
      "delete": {
        "x-action": "deleteRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.system"
        ],
        "operationId": "onPrem-runtimeEnvs-system-delete",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "string"
            },
            "description": "Force"
          }
        ],
        "summary": "Delete sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.delete"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.system"
        ],
        "operationId": "onPrem-runtimeEnvs-system-get",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Version"
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            },
            "description": "Extend"
          },
          {
            "in": "query",
            "name": "history",
            "schema": {
              "type": "string"
            },
            "description": "History"
          },
          {
            "in": "query",
            "name": "successors",
            "schema": {
              "type": "string"
            },
            "description": "Successors"
          }
        ],
        "summary": "Get sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.get"
      }
    },
    "/admin/runtime-environments/{plan}/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "upsertRuntimeEnvByAdmin",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.plan"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-update",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Plan"
          },
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            },
            "description": "Extend"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Description"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.update"
      },
      "delete": {
        "x-action": "deleteRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs.plan"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-delete",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Plan"
          },
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "string"
            },
            "description": "Force"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.delete"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "onPrem.runtimeEnvs"
        ],
        "operationId": "onPrem-runtimeEnvs-plan-get",
        "parameters": [
          {
            "in": "path",
            "name": "plan",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Plan"
          },
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Version"
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            },
            "description": "Extend"
          },
          {
            "in": "query",
            "name": "history",
            "schema": {
              "type": "string"
            },
            "description": "History"
          },
          {
            "in": "query",
            "name": "successors",
            "schema": {
              "type": "string"
            },
            "description": "Successors"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.get"
      }
    },
    "/admin/user/{userName}": {
      "delete": {
        "x-action": "deleteUser",
        "x-entityId": {
          "pathName": "params.userName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-delete",
        "parameters": [
          {
            "in": "path",
            "name": "userName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User name"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "user.delete"
      }
    },
    "/admin/user/adminRole": {
      "post": {
        "x-action": "changeAdminRole",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.userName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-change-admin-role",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Change role",
        "x-sdk-interface": "user.changeRole"
      }
    },
    "/admin/user/account": {
      "post": {
        "x-action": "changeUserAccount",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.userName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-change-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Json"
                    },
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "summary": "Change account",
        "x-sdk-interface": "user.changeAccount"
      }
    },
    "/admin/user/localProvider": {
      "delete": {
        "x-action": "deleteLocalProvider",
        "x-entityId": {
          "pathName": "query.userName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-delete-local-provider",
        "summary": "Delete local provider",
        "x-sdk-interface": "user.deleteLocalProvider"
      },
      "post": {
        "x-action": "updateLocalProviderPassword",
        "x-entityId": {
          "pathName": "request.body.userName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-update-local-provider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "summary": "Update local provider",
        "x-sdk-interface": "user.updateLocalProvider"
      }
    },
    "/admin/user/{userId}/activate": {
      "post": {
        "x-action": "activateUser",
        "x-entityId": "params.userId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "user"
        ],
        "operationId": "user-activate-user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User ID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Activate user",
        "x-sdk-interface": "user.activate.user"
      }
    },
    "/admin/idp": {
      "post": {
        "x-action": "createIDP",
        "x-audit": {
          "name": {
            "path": "body.clientName",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "idp"
        ],
        "operationId": "idp-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": [
                    "clientName",
                    "clientType"
                  ]
                }
              }
            }
          }
        },
        "summary": "Create IDP",
        "x-sdk-interface": "idp.create"
      },
      "put": {
        "x-action": "updateIDP",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.clientName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "idp"
        ],
        "operationId": "idp-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": [
                    "clientName",
                    "clientType"
                  ]
                }
              }
            }
          }
        },
        "summary": "Update IDP",
        "x-sdk-interface": "idp.update"
      }
    },
    "/admin/idp/addAccount": {
      "post": {
        "x-action": "addAccountToIDP",
        "x-entityId": "body.IDPConfigId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "idp"
        ],
        "operationId": "idp-add-account",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add to account",
        "x-sdk-interface": "idp.add-account"
      }
    },
    "/admin/idp/{id}": {
      "delete": {
        "x-action": "deleteIDP",
        "x-entityId": "params.id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "idp"
        ],
        "operationId": "idp-delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "idp id"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "idp.delete"
      }
    },
    "/admin/analytic/addAccount": {
      "put": {
        "x-action": "addAccountToAnalytic",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "analytic"
        ],
        "operationId": "analytic-add-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": [
                    "name"
                  ]
                }
              }
            }
          }
        },
        "summary": "Add account",
        "x-sdk-interface": "analytic.add.account"
      }
    },
    "/admin/customers": {
      "post": {
        "x-action": "createCustomer",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "x-sdk-interface": "customers.create"
      }
    },
    "/admin/customers/{customerId}/{accountId}/assignAccountToCustomer": {
      "post": {
        "x-action": "assignAccountToCustomer",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-assign-account",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Assign account",
        "x-sdk-interface": "customers.assignAccount"
      }
    },
    "/admin/customers/{customerId}/updateCustomerLimits": {
      "put": {
        "x-action": "updateCustomerLimits",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-update-limits",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update limits",
        "x-sdk-interface": "customers.updateLimits"
      }
    },
    "/admin/customers/{customerId}/{accountId}/detachAccountFromCustomer": {
      "post": {
        "x-action": "detachAccountFromCustomer",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-detach-account",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Detach account",
        "x-sdk-interface": "customers.detachAccount"
      }
    },
    "/admin/customers/{customerId}/{userId}/addCustomerAdmin": {
      "post": {
        "x-action": "addCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-add-admin",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add admit",
        "x-sdk-interface": "customers.addAdmin"
      }
    },
    "/admin/customers/{customerId}/{userId}/removeCustomerAdmin": {
      "post": {
        "x-action": "removeCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-remove-admin",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Remove admin",
        "x-sdk-interface": "customers.removeAdmin"
      }
    },
    "/admin/payments/{account_id}/REGroup/{REGroup}": {
      "post": {
        "x-action": "changeREGroup",
        "x-entityId": "params.account_id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-change-reg-group",
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "required": true
          },
          {
            "in": "path",
            "name": "REGroup",
            "schema": {
              "type": "string"
            },
            "description": "REGroup",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": []
                }
              }
            }
          }
        },
        "summary": "Change REG group",
        "x-sdk-interface": "payments.changeREGGroup"
      }
    },
    "/admin/payments/{account_id}/REGroup": {
      "delete": {
        "x-action": "deleteREGroup",
        "x-entityId": "params.account_id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-delete-reg-group",
        "parameters": [
          {
            "in": "path",
            "name": "account_id",
            "schema": {
              "type": "string"
            },
            "description": "Account name",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": []
                }
              }
            }
          }
        },
        "summary": "Delete REG group",
        "x-sdk-interface": "payments.deleteREGGroup"
      }
    },
    "/admin/approval/approve": {
      "post": {
        "x-action": "submitApproval",
        "x-entityId": "body._id",
        "x-overrides": ["addResponseBody"],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "approval"
        ],
        "operationId": "approval-submit-aproval",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Submit approval",
        "x-sdk-interface": "approval.submitApproval"
      }
    },
    "/favorites": {
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "favorites"
        ],
        "operationId": "favorites-delete",
        "summary": "Delete favorite entities",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/create_favoriteOptions"
        },
        "x-sdk-interface": "favorites.delete"
      },
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "favorites"
        ],
        "operationId": "favorites-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_favoriteOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "favorites.create"
      }
    },
    "/favorites/{type}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "repo",
                          "pipeline-branch",
                          "step-type"
                        ],
                        "type": "string"
                      },
                      "data": {
                        "type": "object"
                      },
                      "entities": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Favorites objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "favorites"
        ],
        "operationId": "favorites-list",
        "summary": "List",
        "parameters": [
          {
            "description": "Entity type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "repo",
                "pipeline-branch",
                "step-type"
              ],
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "favorites.list"
      }
    },
    "/favorites/type/{type}/entity/{entityId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "type": {
                        "enum": [
                          "repo",
                          "pipeline-branch",
                          "step-type"
                        ],
                        "type": "string"
                      },
                      "data": {
                        "type": "object"
                      },
                      "entities": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Favorites objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "favorites"
        ],
        "operationId": "favorites-getById",
        "summary": "getById",
        "parameters": [
          {
            "description": "Entity type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "repo",
                "pipeline-branch",
                "step-type"
              ],
              "type": "string"
            }
          },
          {
            "description": "Entity id",
            "in": "path",
            "name": "entityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "favorites.getById"
      }
    },
    "/annotations": {
      "delete": {
        "x-action": "deleteAnnotations",
        "x-entityId": {
          "pathId": "query.entityId",
          "handlerName": "getAnnotationKey",
          "pathName": "query"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-delete",
        "summary": "Delete annotations",
        "parameters": [
          {
            "description": "id of annotation",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity id",
            "in": "query",
            "name": "entityId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity type",
            "in": "query",
            "name": "entityType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "key of annotation",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "annotations.delete"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "entityId": {
                        "type": "string"
                      },
                      "entityType": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Annotations objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-list",
        "summary": "List",
        "parameters": [
          {
            "description": "id of annotation",
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity id",
            "in": "query",
            "name": "entityId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Entity type",
            "in": "query",
            "name": "entityType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "key of annotation",
            "in": "query",
            "name": "key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-sdk-interface": "annotations.list"
      },
      "post": {
        "x-action": "createAnnotations",
        "x-entityId": {
          "pathId": "body.entityId",
          "handlerName": "getAnnotationKey",
          "pathName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "entityId": {
                      "type": "string"
                    },
                    "entityType": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Annotation object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_annotationOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "annotations.create"
      }
    },
    "/annotations/metadata": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "set": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "unset": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Annotation object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "annotations"
        ],
        "operationId": "annotations-create-metadata",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_annotation_manyOptions"
        },
        "summary": "Create many",
        "parameters": [],
        "x-sdk-interface": "annotations.createMany"
      }
    },


    "/auth/key": {
      "post": {
        "x-action": "createApiKey",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-generate",
        "parameters": [
          {
            "in": "query",
            "name": "subjectType",
            "schema": {
              "type": "string"
            },
            "description": "Subject type"
          },
          {
            "in": "query",
            "name": "subjectReference",
            "schema": {
              "type": "string"
            },
            "description": "Subject reference"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Generate",
        "x-sdk-interface": "tokens.generate"
      }
    },
    "/auth/key/{id}": {
      "delete": {
        "x-action": "deleteApiKey",
        "x-entityId": "params.id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-delete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "tokens.delete"
      },
      "patch": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-patch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "build id",
            "required": true
          }
        ],
        "summary": "Patch",
        "x-sdk-interface": "tokens.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/auth/keys": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "tokens"
        ],
        "operationId": "tokens-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "tokens.list"
      }
    },


    "/workflow": {
      "get": {
        "operationId": "workflows-list",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Limit"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Page"
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Status"
          },
          {
            "name": "trigger",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Trigger"
          },
          {
            "name": "pipeline",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pipeline"
          },
          {
            "name": "revision",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "revision sha"
          },
          {
            "name": "branchName",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "branch name"
          },
          {
            "name": "pipelineTriggerId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Pipeline trigger id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "List",
        "x-sdk-interface": "workflows.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "handler": "workflow.getAllExistingWorkflowProcesses"
        }
      }
    },
    "/workflow/totalDelayTime": {
      "get": {
        "operationId": "workflows-get-total-delay-time",
        "parameters": [
          {
            "name": "account",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "account id"
          },
          {
            "name": "lte",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "end date"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "x-hide": true,
        "summary": "Get total delay time",
        "x-sdk-interface": "workflows.getTotalDelayTime",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "handler": "workflow.getTotalDelayTime"
        }
      }
    },
    "/workflow/buildsCount": {
      "get": {
        "operationId": "workflows-get-builds-count",
        "parameters": [
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Get builds count",
        "x-hide": true,
        "x-sdk-interface": "workflows.getBuildsCount",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "handler": "workflow.getBuildsCount"
        }
      }
    },
    "/workflow/reservedEnvList": {
      "get": {
        "operationId": "workflows-get-reserved-env-list",
        "parameters": [
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Get reserved env list",
        "x-hide": true,
        "x-sdk-interface": "workflows.getReservedEnvList",
        "x-endpoint": {
          "auth": {
            "acl": {
              "resource": "build"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.getReservedEnvList"
        }
      }
    },
    "/workflow/{requestId}/status": {
      "get": {
        "operationId": "workflows-status",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "build request id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Get status",
        "x-sdk-interface": "workflows.status",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build",
              "scope": "read:status",
              "description": "Read access to build status"
            }
          },
          "handler": "workflow.getWorkflowStatusByRequestId"
        }
      }
    },
    "/workflow/{requestId}/logs": {
      "get": {
        "operationId": "workflows-redirect-to-logs",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "request id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Redirect to logs",
        "x-sdk-interface": "workflows.redirectToLogs",
        "x-hide": true,
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "handler": "workflow.redirectToLogs"
        }
      }
    },
    "/workflow/{workflowId}/context-revision": {
      "get": {
        "operationId": "get-context-revision",
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          },
          {
            "name": "final",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "final"
          },
          {
            "name": "restartable",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "restartable"
          },
          {
            "name": "step",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "step"
          },
          {
            "name": "event",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "event"
          },
          {
            "name": "revision",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "revision"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "x-hide": true,
        "summary": "Get context revision",
        "x-sdk-interface": "workflows.getWorkflowContextRevision",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.getWorkflowContextRevision"
        }
      }
    },
    "/workflow/{workflowId}/event": {
      "post": {
        "operationId": "workflows-workflow-event",
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "summary": "Send workflow event",
        "x-hide": true,
        "x-sdk-interface": "workflows.sendWorkflowEvent",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "auth.isAuthenticatedAsEngine"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.handleWorkflowEvent"
        }
      }
    },
    "/workflow/{processId}/process": {
      "get": {
        "operationId": "get-workflow-by-id",
        "parameters": [
          {
            "name": "processId",
            "in": "path",
            "description": "workflow process id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "x-hide": true,
        "summary": "Get",
        "x-sdk-interface": "workflows.getProcessById",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "preMiddleware": [],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "workflow.getProcessById"
        }
      }
    },
    "/workflow/{workflowId}/pending-approval/approve": {
      "get": {
        "x-action": "approveBuild",
        "x-entityId": "params.workflowId",
        "x-allowed": {
          "body": [
            "buildStrategy"
          ]
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-approve",
        "summary": "Approve",
        "x-sdk-interface": "workflows.approve",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "audit.allow",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true,
              "abacSource": "workflow",
              "action": "approve",
              "description": "Approve or deny a build that is pending-approval"
            }
          },
          "preMiddleware": [
            "workflow.approvePendingApprovalWorkflow",
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.runPipeline"
        }
      }
    },
    "/workflow/{workflowId}/pending-approval/deny": {
      "get": {
        "x-action": "denyBuild",
        "x-entityId": "params.workflowId",
        "x-allowed": {
          "body": [
            "buildStrategy"
          ]
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/workflowId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-deny",
        "summary": "Deny",
        "x-sdk-interface": "workflows.deny",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "audit.allow",
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true,
              "abacSource": "workflow",
              "action": "approve"
            }
          },
          "preMiddleware": [
            "workflow.denyPendingApprovalWorkflow",
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.runPipeline"
        }
      }
    },
    "/builds/{buildId}": {
      "get": {
        "parameters": [
          {
            "name": "buildId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "buildId",
            "required": true
          },
          {
            "name": "noAccount",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "noAccount",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-get-build",
        "summary": "Get",
        "x-sdk-interface": "workflows.getBuild",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "build.getBuildById"
        }
      }
    },
    "/builds/{name}/": {
      "post": {
        "x-action": "runPipeline",
        "x-entityId": {
          "pathName": "params.name"
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": "name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-run-pipeline",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "branch",
                    "serviceName"
                  ]
                },
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "buildFlags": {
                    "properties": {
                      "nocache": {
                        "default": false,
                        "description": "use docker cache",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  },
                  "sha": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-hide": true,
        "summary": "Build by service",
        "x-sdk-interface": "workflows.runPipeline",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "action": "run",
              "abac": true
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.runPipeline"
        }
      }
    },
    "/builds/rebuild/{buildId}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "builds"
        ],
        "operationId": "workflows-restart",
        "parameters": [
          {
            "in": "path",
            "name": "buildId",
            "schema": {
              "type": "string"
            },
            "description": "build id",
            "required": true
          }
        ],
        "summary": "Restart",
        "x-sdk-interface": "workflows.restart",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "build"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "build.rebuild"
        }
      }
    },

    "/clusters": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "clusters.list"
      }
    },
    "/clusters/local/cluster": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-save-local-cluster",
        "parameters": [],
        "summary": "Save local cluster",
        "x-sdk-interface": "clusters.saveLocal",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "preMiddleware": [
            "clusters.testClusterCredentials"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyPostLocalCluster"
        }
      }
    },
    "/clusters/revoke/{provider}": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-revoke",
        "parameters": [
          {
            "description": "id of provider",
            "in": "path",
            "name": "provider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Revoke account access to cluster",
        "x-sdk-interface": "clusters.revoke",
        "x-action": "deleteCloudIntegration",
        "x-entityId": "params.provider",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.revokeAccountAccess"
        }
      }
    },
    "/clusters/tags": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "parameters": [
        ],
        "summary": "Get all cluster tags",
        "x-sdk-interface": "clusters.tags.getAll",
        "operationId": "clusters-tags-get-all",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.getAllTags"
        }
      }
    },
    "/clusters/{clusterId}/tags": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "cluster id"
          }
        ],
        "summary": "List cluster tags",
        "x-sdk-interface": "clusters.tags.list",
        "operationId": "clusters-tags-list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.getTags"
        }
      },
      "put": {
        "x-action": "updateTags",
        "x-entityId": "params.clusterId",
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "clusters"
        ],
        "parameters": [
          {
            "name": "clusterId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "cluster id"
          }
        ],
        "summary": "Put",
        "x-sdk-interface": "clusters.tags.update",
        "operationId": "clusters-tags-update",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.setTags"
        }
      }
    },
    "/clusters/{provider}/cluster/{clusterId}": {
      "delete": {
        "x-action": "deleteCluster",
        "x-entityId": {
          "pathName": "params.provider"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-delete",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Provider"
          },
          {
            "name": "clusterId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "clusters.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.deleteCluster"
        }
      }
    },
    "/clusters*": {
      "head": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-head",
        "parameters": [
        ],
        "summary": "Proxy head",
        "x-sdk-interface": "clusters.proxyHead",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "options": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-options",
        "parameters": [
        ],
        "summary": "Proxy options",
        "x-sdk-interface": "clusters.proxyOptions",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-get",
        "parameters": [
        ],
        "summary": "Proxy get",
        "x-sdk-interface": "clusters.proxyGet",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-post",
        "parameters": [
        ],
        "summary": "Proxy post",
        "x-sdk-interface": "clusters.proxyPost",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "put": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-put",
        "parameters": [
        ],
        "summary": "Proxy put",
        "x-sdk-interface": "clusters.proxyPut",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "patch": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-patch",
        "parameters": [
        ],
        "summary": "Proxy patch",
        "x-sdk-interface": "clusters.proxyPatch",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      },
      "delete": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "clusters-proxy-delete",
        "parameters": [
        ],
        "summary": "Proxy delete",
        "x-sdk-interface": "clusters.proxyDelete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "clusters.proxyToClusterProviders"
        }
      }
    },


    "/compositions": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "compositions.list"
      },
      "post": {
        "x-action": "createComposition",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "name"
                  ]
                },
                "properties": {
                  "isAdvanced": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "vars": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "yamlJson": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "compositions.create"
      }
    },
    "/compositions/{identifier}/run": {
      "post": {
        "x-action": "runComposition",
        "x-entityId": "params.identifier",
        "parameters": [
          {
            "description": "id or name of a composition",
            "in": "path",
            "name": "identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-launch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": []
                },
                "properties": {
                  "vars": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Launch",
        "x-sdk-interface": "compositions.launch"
      }
    },
    "/compositions/{id}": {
      "delete": {
        "x-action": "deleteComposition",
        "x-entityId": "params.id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-delete",
        "summary": "Delete",
        "x-sdk-interface": "compositions.delete"
      },
      "get": {
        "parameters": [
          {
            "description": "id or name of a composition",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-get",
        "summary": "Get",
        "x-sdk-interface": "compositions.get"
      },
      "put": {
        "x-action": "updateComposition",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "bony.name"
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "account",
                    "created",
                    "createdBy",
                    "name",
                    "_id"
                  ]
                },
                "properties": {
                  "isAdvanced": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "vars": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "yamlJson": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Update the name/variables/body of the composition with the id inserted",
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "compositions.update"
      },
      "patch": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-patch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Patch",
        "x-sdk-interface": "compositions.patch"
      }
    },
    "/compositions/{id}/duplicate": {
      "post": {
        "x-action": "duplicateComposition",
        "x-entityId": "params.id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "compositions"
        ],
        "operationId": "compositions-duplicate",
        "summary": "Duplicate",
        "x-sdk-interface": "compositions.duplicate"
      }
    },
    "/contexts": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-list",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Type"
          },
          {
            "in": "query",
            "name": "decrypt",
            "schema": {
              "type": "string"
            },
            "description": "Decrypt"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "contexts.list"
      },
      "post": {
        "x-action": "createContext",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.metadata.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-create",
        "parameters": [
          {
            "in": "query",
            "name": "skipValidation",
            "schema": {
              "type": "string"
            },
            "description": "Skip validation"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "contexts.create"
      }
    },
    "/contexts/{name}": {
      "delete": {
        "x-action": "deleteContext",
        "x-entityIdPath": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "contexts.delete"
      },
      "put": {
        "x-action": "updateContext",
        "x-entityIdPath": "params.name",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-replace",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Replace",
        "x-sdk-interface": "contexts.replace"
      },
      "patch": {
        "x-action": "updateContext",
        "x-entityId": {
          "pathId": "params.name",
          "handlerId": "decodeContextName",
          "pathName": "params.name",
          "handlerName": "decodeContextName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-patch",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Patch",
        "x-sdk-interface": "contexts.patch"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "query",
            "name": "decrypt",
            "schema": {
              "type": "string"
            },
            "description": "Decrypt"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "contexts.get"
      }
    },
    "/contexts/{name}/default": {
      "patch": {
        "x-action": "updateContext",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "contexts"
        ],
        "operationId": "contexts-default-patch",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Patch",
        "x-sdk-interface": "contexts.default.patch"
      }
    },
    "/customers/{customerId}/createAccount": {
      "post": {
        "x-action": "addNewAccount",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-add-new-account",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add new account",
        "x-sdk-interface": "customers.addNewAccount"
      }
    },
    "/customers/{customerId}/{accountId}/updateAccountLimits": {
      "post": {
        "x-action": "updateAccountLimits",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-update-accounts-limits",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update account limits",
        "x-sdk-interface": "customers.updateAccountLimits"
      }
    },
    "/customers/{customerId}/{userId}/addCustomerAdmin": {
      "post": {
        "x-action": "addCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-add-customer-admin",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "User ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add customer admin",
        "x-sdk-interface": "customers.addCustomerAdmin"
      }
    },
    "/customers/{customerId}/{userId}/removeCustomerAdmin": {
      "post": {
        "x-action": "removeCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customers"
        ],
        "operationId": "customers-remove-customer-admin",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer id",
            "required": true
          },
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "description": "User id",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Remove customer admin",
        "x-sdk-interface": "customers.removeCustomerAdmin"
      }
    },
    "/environments": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "envs.list"
      }
    },
    "/environments/all/terminate": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-terminate-all",
        "summary": "Terminate all",
        "parameters": [],
        "x-sdk-interface": "envs.terminateAll"
      }
    },
    "/environments/{id}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-get",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Id"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "envs.get"
      }
    },
    "/environments/{id}/pause": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-pause",
        "summary": "Pause",
        "x-sdk-interface": "envs.pause"
      }
    },
    "/environments/{envId}/rename/{newName}": {
      "get": {
        "parameters": [
          {
            "description": "The new name to assign to the environment",
            "in": "path",
            "name": "newName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "envId",
            "schema": {
              "type": "object"
            },
            "description": "envId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-rename",
        "summary": "Rename",
        "x-sdk-interface": "envs.rename"
      },
      "post": {
        "x-action": "renameRuntimeEnv",
        "x-entityId": {
          "pathId": "params.envId",
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "environments-rename-runtime-env",
        "parameters": [
          {
            "description": "The new name to assign to the environment",
            "in": "path",
            "name": "newName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "envId",
            "schema": {
              "type": "string"
            },
            "description": "Runtime environment ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Rename runtime environment",
        "x-sdk-interface": "environments.renameRuntimeEnv"
      }
    },
    "/environments/{id}/start": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-start",
        "summary": "Start",
        "x-sdk-interface": "envs.start"
      }
    },
    "/environments/{id}/status": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-status",
        "summary": "Status",
        "x-sdk-interface": "envs.status"
      }
    },
    "/environments/{id}/stop": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-stop",
        "summary": "Stop",
        "x-sdk-interface": "envs.stop"
      }
    },
    "/environments/{id}/terminate": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-terminate",
        "summary": "Terminate",
        "x-sdk-interface": "envs.terminate"
      }
    },
    "/environments/{id}/unpause": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "environments"
        ],
        "operationId": "envs-unpause",
        "summary": "Unpause",
        "x-sdk-interface": "envs.unpause"
      }
    },
    "/features/{accountId}": {
      "get": {
        "parameters": [
          {
            "description": "The ID of the account to query for feature availability",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "features"
        ],
        "operationId": "features-account",
        "summary": "Account",
        "x-sdk-interface": "features.account"
      },
      "post": {
        "x-action": "addFeature",
        "x-entityId": {
          "pathName": "body.feature"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "features"
        ],
        "operationId": "features-add",
        "parameters": [
          {
            "in": "path",
            "name": "accountId",
            "schema": {
              "type": "string"
            },
            "description": "Account ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add feature",
        "x-sdk-interface": "features.add"
      }
    },
    "/form-metadata/create": {
      "post": {
        "x-action": "createFormMetadata",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "form-metadata"
        ],
        "operationId": "form-metadata-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create form metadata",
        "x-sdk-interface": "formMetadata.create"
      }
    },
    "/form-metadata/{name}/update": {
      "put": {
        "x-action": "updateFormMetadata",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "form-metadata"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "metadata name"
          }
        ],
        "operationId": "form-metadata-update",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update form metadata",
        "x-sdk-interface": "formMetadata.update"
      }
    },
    "/form-metadata/{name}": {
      "delete": {
        "x-action": "deleteFormMetadata",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "form-metadata"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "metadata name"
          }
        ],
        "operationId": "form-metadata-delete",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Delete form metadata",
        "x-sdk-interface": "formMetadata.delete"
      }
    },
    "/form-metadata/activate/{groupId}/{name}": {
      "patch": {
        "x-action": "setActiveFormMetadata",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "form-metadata"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "metadata group name"
          },
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "metadata name"
          }
        ],
        "operationId": "form-metadata-set-active",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Set active form metadata",
        "x-sdk-interface": "formMetadata.setActive"
      }
    },
    "/helm/boards": {
      "delete": {
        "x-action": "deleteAllBoards",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-delete-all",
        "summary": "Delete all",
        "parameters": [],
        "x-sdk-interface": "helm.boards.deleteAll"
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Board objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "helm.boards.list"
      },
      "post": {
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-action": "createHelmBoard",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_boardOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "helm.boards.create"
      }
    },
    "/helm/boards/name/{name}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardName"
          },
          {
            "description": "include sections in response",
            "in": "query",
            "name": "columns",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-get-by-name",
        "summary": "Get by name",
        "x-sdk-interface": "helm.boards.getByName"
      }
    },
    "/helm/boards/sections": {
      "post": {
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-action": "createHelmSection",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Section object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/create_sectionOptions"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "helm.sections.create"
      }
    },
    "/helm/boards/sections/reorder": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-reorder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "[sectionId]": {
                    "example": "<section index>",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Reorder",
        "parameters": [],
        "x-sdk-interface": "helm.sections.reorder"
      }
    },
    "/helm/boards/sections/{id}": {
      "delete": {
        "x-entityId": "body.id",
        "x-action": "deleteHelmSection",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-delete",
        "summary": "Delete",
        "x-sdk-interface": "helm.sections.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-get",
        "summary": "Get",
        "x-sdk-interface": "helm.sections.get"
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "boardId": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "index": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "section": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Patch",
        "x-sdk-interface": "helm.sections.patch"
      },
      "put": {
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-action": "updateHelmSection",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "boardId": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "index": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "section": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "helm.sections.update"
      }
    },
    "/helm/boards/{boardId}/sections": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardIdpath"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-delete-all",
        "summary": "Delete all",
        "x-sdk-interface": "helm.sections.deleteAll"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardIdpath"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Section object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-list",
        "summary": "List",
        "x-sdk-interface": "helm.sections.list"
      }
    },
    "/helm/boards/{boardId}/sections/name/{name}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/boardIdpath"
          },
          {
            "$ref": "#/components/parameters/sectionName"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.sections"
        ],
        "operationId": "helm-sections-get-by-name",
        "summary": "Get by name",
        "x-sdk-interface": "helm.sections.getByName"
      }
    },
    "/helm/boards/{id}": {
      "delete": {
        "x-entityId": "params.id",
        "x-action": "deleteHelmBoard",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-delete",
        "summary": "Delete",
        "x-sdk-interface": "helm.boards.delete"
      },
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-get",
        "summary": "Get",
        "x-sdk-interface": "helm.boards.get"
      },
      "patch": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Patch",
        "x-sdk-interface": "helm.boards.patch"
      },
      "put": {
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-action": "editHelmBoard",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": [
          "helm.boards"
        ],
        "operationId": "helm-boards-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "helm.boards.update"
      }
    },
    "/helm/repos": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-create",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "x-sdk-interface": "helm.repos.create"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Query"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "helm.repos.list"
      }
    },
    "/helm/repos/{name}": {
      "delete": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "helm.repos.delete"
      },
      "put": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-update",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update",
        "x-sdk-interface": "helm.repos.update"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.repos"
        ],
        "operationId": "helm-repos-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "helm.repos.get"
      }
    },
    "/hermes/events": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-create",
        "parameters": [
          {
            "in": "query",
            "name": "public",
            "schema": {
              "type": "string"
            },
            "description": "Public"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "x-sdk-interface": "triggers.events.create"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-list",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Type"
          },
          {
            "in": "query",
            "name": "kind",
            "schema": {
              "type": "string"
            },
            "description": "Kind"
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "Filter"
          },
          {
            "in": "query",
            "name": "public",
            "schema": {
              "type": "string"
            },
            "description": "Public"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "triggers.events.list"
      }
    },
    "/hermes/events/{event}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-get",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Event"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "triggers.events.get"
      }
    },
    "/hermes/events/{event}/{context}": {
      "delete": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers.events"
        ],
        "operationId": "triggers-events-delete",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Event"
          },
          {
            "in": "path",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Context"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "triggers.events.delete"
      }
    },
    "/hermes/triggers": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "triggers.list"
      }
    },
    "/hermes/triggers/event/{event}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-get-event-triggers",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Event"
          }
        ],
        "summary": "Get event triggers",
        "x-sdk-interface": "triggers.getEventTriggers"
      }
    },
    "/hermes/triggers/pipeline/{pipeline}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-get-pipeline-triggers",
        "parameters": [
          {
            "in": "path",
            "name": "pipeline",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Pipeline"
          }
        ],
        "summary": "Get pipeline triggers",
        "x-sdk-interface": "triggers.getPipelineTriggers"
      }
    },
    "/hermes/triggers/{event}/{pipeline}": {
      "post": {
        "x-action": "createTrigger",
        "x-entityId": "params.pipeline",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-create",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Event"
          },
          {
            "in": "path",
            "name": "pipeline",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Pipeline"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "x-sdk-interface": "triggers.create"
      },
      "delete": {
        "x-action": "deleteTrigger",
        "x-entityId": "params.pipeline",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers"
        ],
        "operationId": "triggers-delete",
        "parameters": [
          {
            "in": "path",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Event"
          },
          {
            "in": "path",
            "name": "pipeline",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Pipeline"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "triggers.delete"
      }
    },
    "/hermes/types": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers.types"
        ],
        "operationId": "triggers-types-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "triggers.types.list"
      }
    },
    "/hermes/types/{type}/{kind}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "triggers.types"
        ],
        "operationId": "triggers-types-get",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Type"
          },
          {
            "in": "path",
            "name": "kind",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Kind"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "triggers.types.get"
      }
    },
    "/hermes/version": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "version"
        ],
        "operationId": "version-get-hermes-version",
        "parameters": [],
        "summary": "Get hermes version",
        "x-sdk-interface": "version.getHermesVersion"
      }
    },
    "/images": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "metadata",
            "schema": {
              "type": "string"
            },
            "description": "Metadata"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "description": "Tag"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "description": "Type"
          },
          {
            "in": "query",
            "name": "branch",
            "schema": {
              "type": "string"
            },
            "description": "Branch"
          },
          {
            "in": "query",
            "name": "imageDisplayNameRegex",
            "schema": {
              "type": "string"
            },
            "description": "Image display name regex"
          },
          {
            "in": "query",
            "name": "select",
            "schema": {
              "type": "string"
            },
            "description": "Select"
          },
          {
            "in": "query",
            "name": "sha",
            "schema": {
              "type": "string"
            },
            "description": "Sha"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "images.list"
      }
    },
    "/images/external": {
      "parameters": [],
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-add-from-external-source",
        "summary": "Add from external source",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Id": {
                    "type": "string"
                  },
                  "Digest": {
                    "type": "string"
                  },
                  "Image": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-sdk-interface": "images.addFromExternalSource"
      }
    },
    "/images/{imageId}/promote": {
      "post": {
        "x-entityId": {
          "pathId": "params.imageId",
          "pathName": "body.imageName"
        },
        "x-action": "promoteImage",
        "x-sdk-interface": "images.promote",
        "operationId": "images-promote",
        "summary": "Promote an image",
        "parameters": [
          {
            "description": "id of the Image",
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "images"
        ]
      }
    },
    "/images/{id}": {
      "get": {
        "parameters": [
          {
            "description": "id of the Image",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-get",
        "summary": "Get",
        "x-sdk-interface": "images.get"
      }
    },
    "/images/{id}/tags": {
      "get": {
        "parameters": [
          {
            "description": "name of the image",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-get-tags",
        "summary": "Get tags",
        "x-sdk-interface": "images.getTags"
      }
    },
    "/images/{imageId}/tag/{tagName}": {
      "post": {
        "x-action": "addTagToImage",
        "x-entityId": "params.imageId",
        "parameters": [
          {
            "description": "image ObjectId",
            "in": "path",
            "name": "imageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "tag",
            "in": "path",
            "name": "tagName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-tag",
        "summary": "Tag",
        "x-sdk-interface": "images.tag"
      },
      "delete": {
        "x-action": "imageTagDeleted",
        "x-entityId": "params.imageId",
        "parameters": [
          {
            "description": "tag ObjectId",
            "in": "path",
            "name": "tagName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "imageId",
            "schema": {
              "type": "object"
            },
            "description": "imageId",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-untag",
        "summary": "Untag",
        "x-sdk-interface": "images.untag"
      }
    },
    "/images/{dockerImageId}/metadata": {
      "get": {
        "parameters": [
          {
            "description": "id of the Image (from docker inspect)",
            "in": "path",
            "name": "dockerImageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-get-metadata",
        "summary": "Get metadata",
        "x-sdk-interface": "images.getMetadata"
      },
      "post": {
        "parameters": [
          {
            "description": "id of the Image (from docker inspect)",
            "in": "path",
            "name": "dockerImageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-upsert-metadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "CF_QUALITY": {
                    "default": true,
                    "type": "boolean"
                  },
                  "comment": {
                    "default": "image for qa",
                    "type": "string"
                  },
                  "coverage": {
                    "default": "60%",
                    "type": "string"
                  },
                  "failed_tests": {
                    "default": 7,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Upsert metadata",
        "x-sdk-interface": "images.upsertMetadata"
      }
    },
    "/images/{dockerImageId}/metadata/{keyName}": {
      "delete": {
        "parameters": [
          {
            "description": "id of the Image from docker inspect",
            "in": "path",
            "name": "dockerImageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the metadata key",
            "in": "path",
            "name": "keyName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "images"
        ],
        "operationId": "images-delete-metadata",
        "summary": "Delete metadata",
        "x-sdk-interface": "images.deleteMetadata"
      }
    },
    "/idp/account": {
      "post": {
        "x-action": "createAccountIdp",
        "x-audit": {
          "name": {
            "path": "body.displayName",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "account"
        ],
        "operationId": "account-create-idp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body":  [
                    "clientName",
                    "clientType",
                    "displayName",
                    "accounts",
                    "customerId"
                  ]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create account IDP",
        "x-sdk-interface": "account.createIdp"
      },
      "put": {
        "x-action": "updateAccountIdp",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.displayName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "account"
        ],
        "operationId": "account-update-idp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "_id",
                    "clientName",
                    "clientType",
                    "displayName",
                    "accounts",
                    "customerId"
                  ]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update IDP",
        "x-sdk-interface": "account.updateIdp"
      },
      "delete": {
        "x-action": "deleteAccountIdp",
        "x-entityId": {
          "pathId": "body.id",
          "pathName": "body.displayName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "account"
        ],
        "operationId": "account-delete-idp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "_id",
                    "clientName",
                    "clientType",
                    "displayName",
                    "accounts",
                    "customerId"
                  ]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Delete IDP",
        "x-sdk-interface": "account.deleteIdp"
      }
    },
    "/idp/customer/{customerId}": {
      "post": {
        "x-action": "createCustomerIdp",
        "x-audit": {
          "name": {
            "path": "body.displayName",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customer"
        ],
        "operationId": "customer-create-idp",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "clientName",
                    "clientType",
                    "displayName",
                    "accounts",
                    "customerId"
                  ]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create IDP",
        "x-sdk-interface": "customer.createIdp"
      },
      "put": {
        "x-action": "updateCustomerIdp",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.displayName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customer"
        ],
        "operationId": "customer-update-idp",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": [
                    "_id",
                    "clientName",
                    "clientType",
                    "displayName",
                    "accounts",
                    "customerId"
                  ]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update IDP",
        "x-sdk-interface": "customer.updateIdp"
      },
      "delete": {
        "x-action": "deleteCustomerIdp",
        "x-entityId": "body.id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customer"
        ],
        "operationId": "customer-delete-idp",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "summary": "Delete IDP",
        "x-sdk-interface": "customer.deleteIdp"
      }
    },
    "/idp/customer/{customerId}/addAccounts": {
      "post": {
        "x-action": "addAccountToCustomerIdp",
        "x-entityId": "body.ssoConfigId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customer"
        ],
        "operationId": "customer-add-account-to-idp",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Add account to IDP",
        "x-sdk-interface": "customer.AddAccountToIdp"
      }
    },
    "/idp/customer/{customerId}/deleteAccounts": {
      "delete": {
        "x-action": "removeAccountFromCustomerIdp",
        "x-entityId": "body.ssoConfigId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "customer"
        ],
        "operationId": "customer-remove-account-from-idp",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "schema": {
              "type": "string"
            },
            "description": "Customer ID",
            "required": true
          }
        ],
        "summary": "Remove account from customer idp",
        "x-sdk-interface": "customer.removeAccountFromIdp"
      }
    },

    "/kubernetes/test": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-test-credentials",
        "parameters": [],
        "summary": "Test Cluster Credentials",
        "x-sdk-interface": "kubernetes.testClusterCredentials",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.testClusterCredentials"
        }
      }
    },
    "/kubernetes/test/{selector}": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-test-existed-credentials",
        "parameters": [
          {
            "in": "path",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "cluster selector",
            "required": true
          }
        ],
        "summary": "Test Existed Cluster Credentials",
        "x-sdk-interface": "kubernetes.testExistedClusterCredentials",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.testExistedClusterCredentials"
        }
      }
    },
    "/kubernetes/services": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-list-services",
        "parameters": [],
        "summary": "List services",
        "x-sdk-interface": "kubernetes.services.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getServices"
        }
      }
    },
    "/kubernetes/namespaces": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-list-namespaces",
        "parameters": [],
        "summary": "List namespaces",
        "x-sdk-interface": "kubernetes.namespaces.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getNamespaces"
        }
      }
    },
    "/kubernetes/podGroups": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-list-pod-groups",
        "parameters": [],
        "summary": "List pod groups",
        "x-sdk-interface": "kubernetes.podGroups.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getPodGroups"
        }
      }
    },
    "/kubernetes/deployments/{name}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-describe-deployment",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "description": "deployment name",
            "required": true
          }
        ],
        "summary": "Describe deployment",
        "x-sdk-interface": "kubernetes.deployments.describe",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.describeDeployment"
        }
      }
    },
    "/kubernetes/releases": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-list-releases",
        "parameters": [],
        "summary": "List helm releases",
        "x-sdk-interface": "kubernetes.releases.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.bf-supported.getHelmReleases"
        }
      }
    },
    "/kubernetes/releases/{releaseName}/delete": {
      "post": {
        "x-entityId": {
          "pathName": "params.releaseName"
        },
        "x-action": "helmReleaseDeleted",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.releases",
          "kubernetes"
        ],
        "operationId": "helm-releases-delete",
        "parameters": [
          {
            "in": "path",
            "name": "releaseName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Release name"
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Delete",
        "x-sdk-interface": "helm.releases.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.deleteRelease"
        }
      }
    },
    "/kubernetes/releases/{releaseName}/test": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.releases",
          "kubernetes"
        ],
        "operationId": "helm-releases-test",
        "parameters": [
          {
            "in": "path",
            "name": "releaseName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Release name"
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "Selector"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Test",
        "x-sdk-interface": "helm.releases.test",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster"
            }
          },
          "preMiddleware": [
            "kubernetes.resolveClustersFromQuery",
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.testRelease"
        }
      }
    },
    "/kubernetes/secrets/imagePullSecret": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-generate-image-pull-secret",
        "parameters": [
          {
            "in": "query",
            "name": "namespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Namespace"
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Selector"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Generate image pull secret",
        "x-sdk-interface": "kubernetes.generateImagePullSecret",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.resolveClustersFromQuery",
            "kubernetes.extendBodyWithAccountRegistries"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      }
    },
    "/kubernetes/chart/install": {
      "post": {
        "x-entityId": {
          "pathName": "body.releaseName"
        },
        "x-action": "installHelmRelease",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.charts",
          "kubernetes"
        ],
        "operationId": "helm-charts-install",
        "parameters": [
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Install",
        "x-sdk-interface": "helm.charts.install",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.installChart"
        }
      }
    },
    "/kubernetes/chart/promote": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "helm.charts"
        ],
        "operationId": "helm-charts-promote",
        "parameters": [
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Promote",
        "x-sdk-interface": "helm.charts.promote",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromBoards",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.promoteChart"
        }
      }
    },
    "/kubernetes/rollback/{release}/{revision}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-rollback-release",
        "parameters": [
          {
            "in": "path",
            "name": "release",
            "schema": {
              "type": "string"
            },
            "description": "release",
            "required": true
          },
          {
            "in": "path",
            "name": "revision",
            "schema": {
              "type": "string"
            },
            "description": "revision",
            "required": true
          },
          {
            "in": "query",
            "name": "selector",
            "schema": {
              "type": "string"
            },
            "description": "Selector"
          },
          {
            "in": "query",
            "name": "tillerNamespace",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Tiller namespace"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Promote",
        "x-sdk-interface": "kubernetes.rollback",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": [
            "kubernetes.extendRequestWithKubeManager",
            "kubernetes.extendRequestWithTillerVersion"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.rollback"
        }
      }
    },
    "/kubernetes*": {
      "head": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-head",
        "parameters": [
        ],
        "summary": "Proxy head",
        "x-sdk-interface": "kubernetes.proxyHead",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "options": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-options",
        "parameters": [
        ],
        "summary": "Proxy options",
        "x-sdk-interface": "kubernetes.proxyOptions",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-get",
        "parameters": [
        ],
        "summary": "Proxy get",
        "x-sdk-interface": "kubernetes.proxyGet",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-post",
        "parameters": [
        ],
        "summary": "Proxy post",
        "x-sdk-interface": "kubernetes.proxyPost",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "put": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "clusters"
        ],
        "operationId": "kubernetes-proxy-put",
        "parameters": [
        ],
        "summary": "Proxy put",
        "x-sdk-interface": "kubernetes.proxyPut",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "patch": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-patch",
        "parameters": [
        ],
        "summary": "Proxy patch",
        "x-sdk-interface": "kubernetes.proxyPatch",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      },
      "delete": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "kubernetes"
        ],
        "operationId": "kubernetes-proxy-delete",
        "parameters": [
        ],
        "summary": "Proxy delete",
        "x-sdk-interface": "kubernetes.proxyDelete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated",
              "kubernetes.resolveClustersFromQuery"
            ],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "kubernetes.callService"
        }
      }
    },

    "/charts/{repo}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "charts"
        ],
        "operationId": "charts-list",
        "parameters": [
          {
            "in": "path",
            "name": "repo",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Repo"
          }
        ],
        "summary": "Get charts by repo",
        "x-sdk-interface": "charts.list"
      }
    },
    "/nomios/version": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "version"
        ],
        "operationId": "version-get-nomios-version",
        "parameters": [],
        "summary": "Get nomios version",
        "x-sdk-interface": "version.getNomiosVersion"
      }
    },
    "/payments": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "payments.list"
      },
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "couponId": {
                    "type": "string"
                  },
                  "plan": {
                    "properties": {
                      "builds": {
                        "default": 2,
                        "type": "integer"
                      },
                      "environments": {
                        "default": 2,
                        "type": "integer"
                      },
                      "id": {
                        "default": "BASIC",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "token": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "payments.create"
      }
    },
    "/payments/plans": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "payments"
        ],
        "operationId": "payments-get-plans",
        "summary": "Get plans",
        "parameters": [],
        "x-sdk-interface": "payments.getPlans"
      }
    },

    "/pipelines": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "labels",
            "schema": {
              "type": "string"
            },
            "description": "Labels"
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "description": "project id"
          }
        ],
        "operationId": "pipelines-list",
        "summary": "List",
        "x-sdk-interface": "pipelines.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "cache": {
            "entity": "pipelines",
            "type": "list",
            "evict": [
              {
                "event": "pipeline.updated",
                "identifiers": [
                  "aggregateId",
                  "props.metadata.name"
                ],
                "identity": "accountId"
              },
              {
                "event": "pipeline.created",
                "identifiers": [
                  "aggregateId",
                  "props.metadata.name"
                ],
                "identity": "accountId"
              },
              {
                "event": "pipeline.deleted",
                "identifiers": [
                  "aggregateId",
                  "props.metadata.name"
                ],
                "identity": "accountId"
              }
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getAllAccountPipelines"
        }
      },
      "post": {
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "metadata.id",
            "source": "res"
          }
        },
        "x-action": "createPipeline",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "pipelines.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "pipelines.createPipeline"
        }
      }
    },
    "/pipelines/templates": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-templates",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Get templates",
        "x-sdk-interface": "pipelines.getTemplates",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getTemplates"
        }
      }
    },
    "/pipelines/exist": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-exist",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Pipeline exist",
        "x-sdk-interface": "pipelines.pipelinesExist",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "disableAbac": true,
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.isPipelinesExist"
        }
      }
    },
    "/pipelines/analyze": {
      "post": {
        "x-audit": {
          "name": {
            "path": "body.repo.repoName",
            "source": "req"
          },
          "id": {
            "path": "body.repo.repoName",
            "source": "res"
          }
        },
        "x-action": "analyzeRepo",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-analyze",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Analyze pipeline",
        "x-sdk-interface": "analyze",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.analyze"
        }
      }
    },
    "/pipelines/labels": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-labels",
        "parameters": [],
        "summary": "Test yaml from url",
        "x-sdk-interface": "pipelines.getLabels",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getLabels"
        }
      }
    },
    "/pipelines/labels/{label}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-label-values",
        "parameters": [
          {
            "in": "path",
            "name": "label",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "label"
          }

        ],
        "summary": "Get label values",
        "x-sdk-interface": "pipelines.getLabelValues",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getLabelValues"
        }
      }
    },
    "/pipelines/names": {
      "get": {
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "labels",
            "schema": {
              "type": "string"
            },
            "description": "Labels"
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "description": "project id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-names",
        "summary": "Get",
        "x-sdk-interface": "pipelines.getNames",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getAllAccountPipelinesNames"
        }
      }
    },
    "/pipelines/utils/extractVariables": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-extract-variables-from-yaml",
        "parameters": [
          {
            "in": "query",
            "name": "yamlURL",
            "description": "url to retrieve yaml from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Extract variables from yaml",
        "x-sdk-interface": "pipelines.extractVariablesFromYaml",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.extractVariables"
        }
      }
    },
    "/pipelines/{name}": {
      "get": {
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "decryptVariables",
            "schema": {
              "type": "string"
            },
            "description": "Decrypt variables"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get",
        "summary": "Get",
        "x-sdk-interface": "pipelines.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "cache": {
            "entity": "pipelines",
            "type": "single",
            "identifier": "params.name",
            "evict": [
              {
                "event": "pipeline.updated",
                "identifiers": [
                  "aggregateId",
                  "props.metadata.name"
                ],
                "identity": "accountId"
              },
              {
                "event": "pipeline.deleted",
                "identifiers": [
                  "aggregateId",
                  "props.metadata.name"
                ],
                "identity": "accountId"
              }
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getPipelineByNameOrId"
        }
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "updatePipeline",
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "should skip trigger validation",
            "in": "query",
            "name": "skipTriggerValidation",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "allows to omit revision validation - will use revision of existing pipeline",
            "in": "query",
            "name": "disableRevisionCheck",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {
                      "variables": {
                        "type": "array",
                        "x-secure": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "triggers": {
                        "type": "array",
                        "x-secure": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {
                        "variables": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-replace",
        "summary": "Replace",
        "x-sdk-interface": "pipelines.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "pipelines.replacePipelineByName"
        }
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "deletePipeline",
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-delete",
        "summary": "Delete",
        "x-sdk-interface": "pipelines.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.deletePipelineByName"
        }
      }
    },
    "/pipelines/{name}/extractVariables": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-extract-variables",
        "parameters": [
          {
            "in": "query",
            "name": "yamlURL",
            "description": "url to retrieve yaml from",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "description": "pipeline name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "summary": "Extract variables",
        "x-sdk-interface": "pipelines.extractVariables",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.extractVariables"
        }
      }
    },
    "/pipelines/{name}/volume-image": {
      "get": {
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-volume-image",
        "summary": "Get volume image",
        "x-sdk-interface": "pipelines.getVolumeImage",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getPipelineVolumeImage"
        }
      }
    },
    "/pipelines/run/{name}": {
      "post": {
        "x-action": "runPipeline",
        "x-entityId": {
          "pathName": "params.name"
        },
        "x-allowed": {
          "body": [
            "branch",
            "serviceName",
            "type",
            "serviceId"
          ]
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-run",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Run",
        "x-sdk-interface": "pipelines.run",
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "action": "run",
              "description": "Run a pipeline",
              "abac": true
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.runPipeline"
        }
      }
    },
    "/pipelines/{name}/preview-run-input": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-preview-run-input",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "query",
            "name": "trigger",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Trigger name/id"
          }
        ],
        "summary": "Get a preview of input (variables and options) for a pipeline execution",
        "x-sdk-interface": "pipelines.preview-run-input",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "action": "run",
              "abac": true
            }
          },
          "preMiddleware": [
            "workflow.authorizeWorkflow"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.previewRunInput"
        }
      }
    },
    "/pipelines/yaml/validator": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-validate-yaml",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Validate yaml",
        "x-sdk-interface": "pipelines.validateYaml",
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.yamlValidator"
        }
      }
    },
    "/pipelines/yaml/test-url": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-test-yaml-from-url",
        "parameters": [],
        "summary": "Test yaml from url",
        "x-sdk-interface": "pipelines.testYamlFromUrl",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.testYamlFromUrl"
        }
      }
    },
    "/pipelines/templates/deploy-images": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-deploy-images",
        "parameters": [],
        "summary": "Get deploy images",
        "x-sdk-interface": "pipelines.getDeployImages",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getDeployImages"
        }
      }
    },
    "/pipelines/clone/variables/{name}/{originPipelineName}": {
      "put": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-clone-variables",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "path",
            "name": "originPipelineName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name of the pipeline from which to clone"
          }

        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Clone variables",
        "x-sdk-interface": "pipelines.cloneVariables",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true,
              "abacOptions": [
                {
                  "identifiersLocation": "params.originPipelineName",
                  "action": "read"
                },
                {
                  "action": "update"
                }
              ],
              "description": "Clone pipeline variables"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.clonePipelineVariables"
        }
      }
    },
    "/pipelines/{name}/triggers/{triggerId}/verify": {
      "post": {
        "summary": "Verify pipeline trigger",
        "operationId": "pipelines-verify-trigger",
        "x-sdk-interface": "pipelines.verifyTrigger",
        "tags": [
          "pipelines"
        ],
        "parameters": [
          {
            "description": "Name of pipeline",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Trigger id",
            "in": "path",
            "name": "triggerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.verifyPipelineTrigger"
        }
      }
    },
    "/pipelines/projects/all": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "pipelines-get-project-names",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Test yaml from url",
        "x-sdk-interface": "pipelines.getProjects",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "pipelines.getProjects"
        }
      }
    },

    "/views/": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "labels",
            "schema": {
              "type": "string"
            },
            "description": "Labels"
          }
        ],
        "operationId": "views-list",
        "summary": "List",
        "x-sdk-interface": "views.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllAccountViews"
        }
      },
      "post": {
        "x-action": "createView",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "operationId": "views-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "views.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.createView"
        }
      }
    },
    "/views/{name}": {
      "get": {
        "parameters": [
          {
            "description": "Name of view",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "operationId": "views-get",
        "summary": "Get",
        "x-sdk-interface": "views.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getViewByNameOrId"
        }
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "updateView",
        "parameters": [
          {
            "description": "Name of view",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "tags": [
          "views"
        ],
        "operationId": "views-replace",
        "summary": "Replace",
        "x-sdk-interface": "views.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.replaceViewByName"
        }
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "deleteView",
        "parameters": [
          {
            "description": "Name of view",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "operationId": "views-delete",
        "summary": "Delete",
        "x-sdk-interface": "views.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.deleteViewByName"
        }
      }
    },
    "/views/types/metadata": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [],
        "operationId": "views-type-list",
        "summary": "List types",
        "x-sdk-interface": "views.type.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllTypes"
        }
      }
    },
    "/views/types/names": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [],
        "operationId": "views-typeNames-list",
        "summary": "List types names",
        "x-sdk-interface": "views.typesNames.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllTypesNames"
        }
      }
    },
    "/views/types/{type}/fields": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [
          {
            "description": "Type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "views-typeFields-list",
        "summary": "List type fields",
        "x-sdk-interface": "views.typeFields.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllTypeFields"
        }
      }
    },
    "/views/types/{type}/fields/{field}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "views"
        ],
        "parameters": [
          {
            "description": "Type",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Field",
            "in": "path",
            "name": "field",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "views-TypeFieldValues-list",
        "summary": "List type field values",
        "x-sdk-interface": "views.typeFieldValues.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "views.getAllAccountTypeFieldValues"
        }
      }
    },

    "/step-types": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Id or name"
          },
          {
            "in": "query",
            "name": "official",
            "schema": {
              "type": "string"
            },
            "description": "Filter only official step-types"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter by a specific category"
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "type": "string"
            },
            "description": "Filter by a specific tag"
          },
          {
            "in": "query",
            "name": "public",
            "schema": {
              "type": "string"
            },
            "description": "Filter only public step-types"
          },
          {
            "in": "query",
            "name": "private",
            "schema": {
              "type": "string"
            },
            "description": "Filter only private step-types"
          },
          {
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "string",
              "enum": ["graduated", "incubating"]
            },
            "description": "Filter by stage"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Offset"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          }
        ],
        "operationId": "steps-list",
        "summary": "List",
        "x-sdk-interface": "steps.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getSteps"
        }
      },
      "post": {
        "x-action": "createStep",
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-create",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "steps.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.createStep"
        }
      }
    },
    "/step-types/sitemap.xml": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-sitemap"
        ],
        "parameters": [

        ],
        "operationId": "steps-sitemap",
        "summary": "List",
        "x-hide": true,
        "x-sdk-interface": "steps.sitemap",
        "x-endpoint": {
          "isEndpoint": false,
          "preMiddleware": [
            "auth.isAuthenticatedOrAnonymous"
          ],
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getSitemap"
        }
      }
    },
    "/step-types/{name}": {
      "get": {
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-get",
        "summary": "Get",
        "x-sdk-interface": "steps.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getStepByNameOrId"
        }
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "updateStep",
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-replace",
        "summary": "Replace",
        "x-sdk-interface": "steps.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.replaceStepByName"
        }
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "deleteStep",
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-delete",
        "summary": "Delete",
        "x-sdk-interface": "steps.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticated"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.deleteStepByName"
        }
      }
    },
    "/step-types/{name}/versions": {
      "get": {
        "parameters": [
          {
            "description": "Name of step",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "step-types"
        ],
        "operationId": "steps-get-version",
        "summary": "Get Versions",
        "x-sdk-interface": "steps.getStepVersions",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [
              "auth.isAuthenticatedOrAnonymous"
            ],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "steps.getStepVersions"
        }
      }
    },

    "/projects": {
      "post": {
        "x-action": "createProject",
        "x-audit": {
          "name": {
            "path": "body.projectName",
            "source": "req"
          },
          "id": {
            "path": "id",
            "source": "res"
          }
        },

        "x-sdk-interface": "projects.create",
        "operationId": "projects-create",
        "summary": "Create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.createProject"
        }
      },
      "get": {
        "x-sdk-interface": "projects.list",
        "operationId": "projects-list",
        "summary": "List",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "limit",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "offset",
            "description": "offset",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "description": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "tags",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.getProjects"
        }
      }
    },
    "/projects/tags": {
      "get": {
        "x-sdk-interface": "projects.getProjectsTags",
        "operationId": "projects-get-projects-tags",
        "summary": "Get projects tags",
        "parameters": [
          {
            "in": "query",
            "name": "tagsNameRegex",
            "description": "regex to filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.getProjectsTags"
        }
      }
    },
    "/projects/name/{name}": {
      "get": {
        "x-sdk-interface": "projects.getByName",
        "operationId": "projects-get-by-name",
        "summary": "Get by name",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "project name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.getProjectByName"
        }
      }
    },
    "/projects/{id}": {
      "get": {
        "x-sdk-interface": "projects.get",
        "operationId": "projects-get",
        "summary": "Get",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.getProjectById"
        }
      },
      "patch": {
        "x-action": "updateProject",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-sdk-interface": "projects.patch",
        "operationId": "projects-patch",
        "summary": "Patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": [
                    "projectName",
                    "tags"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.updateProject"
        }
      },
      "delete": {
        "x-action": "deleteProject",
        "x-entityId": {
          "pathId": "params.id"
        },
        "x-sdk-interface": "projects.delete",
        "operationId": "projects-delete",
        "summary": "Delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "projects"
        ],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": [
              "auth.isAuthenticated"
            ]
          },
          "postMiddleware": [
            "global.iseMiddleware"
          ],
          "handler": "projects.deleteProject"
        }
      }
    },


    "/progress/download/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "progress"
        ],
        "operationId": "progress-download",
        "summary": "Download",
        "x-sdk-interface": "progress.download"
      }
    },
    "/progress/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "progress"
        ],
        "operationId": "progress-get",
        "summary": "Get",
        "x-sdk-interface": "progress.get"
      },
      "delete": {
        "x-action": "terminateBuild",
        "x-entityId": "params.id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "progress"
        ],
        "operationId": "progress-terminate",
        "summary": "Terminate",
        "x-sdk-interface": "progress.terminate"
      }
    },
    "/providers/github/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": ["enrichHeaders", "githubCommiter"],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.githubName"
        },
        "x-allowed": {
          "headers": [
            "x-github-event",
            "x-github-delivery"
          ]
        },
        "x-sdk-interface": "providers.sendGithubWebhook",
        "operationId": "providers-send-github-webhook",
        "summary": "Send github webhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "providers"
        ]
      }
    },
    "/providers/gitlab/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": ["enrichHeaders", "gitlabCommiter"],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.gitlabName"
        },
        "x-allowed": {
          "headers": [
            "x-gitlab-event",
            "x-gitlab-token"
          ]
        },
        "x-sdk-interface": "providers.sendGitlabWebhook",
        "operationId": "providers-send-gitlab-webhook",
        "summary": "Send gitlab webhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "providers"
        ]
      }
    },
    "/providers/bitbucket/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": ["enrichHeaders", "bitbucketCommiter"],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.bitbucketName"
        },
        "x-allowed": {
          "headers": [
            "x-hook-uuid",
            "x-event-key",
            "x-event-time",
            "x-request-uuid",
            "x-attempt-number"
          ]
        },
        "x-sdk-interface": "providers.sendBitbucketbWebhook",
        "operationId": "providers-send-bitbucket-webhook",
        "summary": "Send bitbucket webhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "providers"
        ]
      }
    },
    "/providers/bitbucket_server/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": ["enrichHeaders", "bitbucketServerCommiter"],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.bitbucketServerName"
        },
        "x-allowed": {
          "headers": [
            "x-event-key",
            "x-request-id"
          ]
        },
        "x-sdk-interface": "providers.sendBitbucketServerbWebhook",
        "operationId": "providers-send-bitbucket-server-webhook",
        "summary": "Send bitbucket server webhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "providers"
        ]
      }
    },
    "/providers/azure-devops/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": ["enrichHeaders", "azureDevopsCommiter"],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.azureDevopsName"
        },
        "x-allowed": {
          "headers": [
            "request-id",
            "x-vss-subscriptionid",
            "x-vss-activityid"
          ]
        },
        "x-sdk-interface": "providers.sendAzureDevopsbWebhook",
        "operationId": "providers-send-azure-devops-webhook",
        "summary": "Send azure devops webhook",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "providers"
        ]
      }
    },
    "/registry/auth/token": {
      "post": {
        "x-action": "createCFCRToken",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "registries"
        ],
        "operationId": "registries-generate-cfcr-token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "summary": "Generate cfcr token",
        "parameters": [],
        "x-sdk-interface": "registries.generateCfcrToken"
      }
    },
    "/registry/auth/token/{id}": {
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "x-action": "deleteCRCRToken",
        "x-entityId": "params.id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "registries"
        ],
        "summary": "Generate cfcr token",
        "x-sdk-interface": "registries.deleteCfcrToken",
        "operationId": "registries-delete-cfcr-token"
      }
    },
    "/repos": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-git-list",
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          }
        ],
        "summary": "List git repos (github, bitbucket, etc)",
        "x-sdk-interface": "repos.git.list"
      }
    },
    "/registries": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "registries"
        ],
        "operationId": "registries-list",
        "parameters": [],
        "summary": "List registries",
        "x-sdk-interface": "registries.list"
      },
      "post": {
        "x-action": "createRegistry",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "registries"
        ],
        "operationId": "registries-create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "x-secure": true
                  },
                  "domain": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "behindFirewall": {
                    "type": "string"
                  },
                  "secretAccessKey": {
                    "type": "string",
                    "x-secure": true
                  }
                },
                "required": [
                  "username",
                  "password",
                  "domain",
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "summary": "Create",
        "x-sdk-interface": "registries.create"
      }
    },
    "/registries/{registryId}": {
      "delete": {
        "x-action": "deleteRegistry",
        "x-entityId": "params.registryId",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "registries"
        ],
        "operationId": "registries-delete",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "registries.delete"
      },
      "patch": {
        "x-action": "updateRegistry",
        "x-entityId": {
          "pathId": "params.registryId",
          "pathName": "body.name"
        },
        "operationId": "registries-patch",
        "tags": [
          "registries"
        ],
        "summary": "Patch",
        "x-sdk-interface": "registries.patch",
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "password": {
                    "type": "string",
                    "x-secure": true
                  },
                  "secretAccessKey": {
                    "type": "string",
                    "x-secure": true
                  }
                },
                "required": [
                  "username",
                  "password",
                  "domain",
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/registries/{registryId}/default": {
      "patch": {
        "x-action": "setDefaultRegistry",
        "x-entityId": "params.registryId",
        "operationId": "registries-default-patch",
        "summary": "Patch default",
        "x-sdk-interface": "registries.setDefault",
        "tags": [
          "registries"
        ],
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "registryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/registries/test": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "registries"
        ],
        "operationId": "registries-test",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "behindFirewall": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password",
                  "domain",
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "summary": "Test",
        "x-sdk-interface": "registries.test"
      }
    },
    "/repos/existing": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-list",
        "parameters": [
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          },
          {
            "in": "query",
            "name": "thin",
            "schema": {
              "type": "string"
            },
            "allowEmptyValue": true,
            "description": "Thin"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "repos.list"
      }
    },
    "/repos/settings/{repoOwner}/{repoName}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/repoOwner"
          },
          {
            "$ref": "#/components/parameters/repoName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-get-settings",
        "summary": "Get settings",
        "x-sdk-interface": "repos.getSettings"
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-git-get-repo",
        "parameters": [
          {
            "in": "path",
            "name": "owner",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Owner"
          },
          {
            "in": "path",
            "name": "repo",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Repo"
          },
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          }
        ],
        "summary": "Get git repo",
        "x-sdk-interface": "repos.git.get"
      }
    },
    "/runtime-environments": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-list",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "string"
            },
            "description": "Limit"
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "string"
            },
            "description": "Offset"
          }
        ],
        "summary": "List",
        "x-sdk-interface": "runtimeEnvs.list"
      }
    },
    "/runtime-environments/default/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "upsertRuntimeEnv",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-set-default",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          }
        ],
        "summary": "Set default",
        "x-sdk-interface": "runtimeEnvs.setDefault"
      }
    },
    "/runtime-environments/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "upsertRuntimeEnv",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-update",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            },
            "description": "Extend"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string"
            },
            "description": "Description"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Update",
        "x-sdk-interface": "runtimeEnvs.update"
      },
      "delete": {
        "x-action": "deleteRuntimeEnv",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-delete",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "force",
            "schema": {
              "type": "string"
            },
            "description": "Force"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "runtimeEnvs.delete"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "runtimeEnvs"
        ],
        "operationId": "runtime-envs-get",
        "parameters": [
          {
            "in": "path",
            "name": "runtimeEnvironmentName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Runtime environment name"
          },
          {
            "in": "query",
            "name": "version",
            "schema": {
              "type": "string"
            },
            "description": "Version"
          },
          {
            "in": "query",
            "name": "extend",
            "schema": {
              "type": "string"
            },
            "description": "Extend"
          },
          {
            "in": "query",
            "name": "history",
            "schema": {
              "type": "string"
            },
            "description": "History"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "runtimeEnvs.get"
      }
    },
    "/runtime/testit": {
      "post": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "pipelines"
        ],
        "operationId": "runtime-launch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "repoData": {
                    "properties": {
                      "url": {
                        "properties": {
                          "https": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "repoName": {
                    "type": "string"
                  },
                  "repoOwner": {
                    "type": "string"
                  },
                  "serviceId": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Launch",
        "parameters": [],
        "x-sdk-interface": "runtime.launch"
      }
    },
    "/services": {
      "post": {
        "parameters": [
          {
            "description": "The git context name",
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "serviceDetails": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "scm": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "owner": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "repos.create"
      }
    },
    "/services/{name}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-get",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          }
        ],
        "summary": "Get",
        "x-sdk-interface": "repos.get"
      },
      "delete": {
        "x-action": "serviceDeleted",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "repos"
        ],
        "operationId": "repos-delete",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "query",
            "name": "context",
            "schema": {
              "type": "string"
            },
            "description": "Context"
          }
        ],
        "summary": "Delete",
        "x-sdk-interface": "repos.delete"
      }
    },
    "/team": {
      "post": {
        "x-action": "createTeam",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "name": {
                    "type": "string"
                  },
                  "users": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Team data",
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "teams.create"
      },
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "teams.list"
      }
    },
    "/team/{teamId}": {
      "delete": {
        "x-action": "deleteTeam",
        "x-entityId": "params.teamId",
        "x-sdk-interface": "teams.delete",
        "operationId": "teams-delete",
        "summary": "Delete",
        "parameters": [
          {
            "in": "path",
            "name": "teamId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "team id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/team/group/synchronize/name/{name}/type/{type}": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-synchronize-client-with-group",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Name"
          },
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Type"
          },
          {
            "in": "query",
            "name": "access_token",
            "schema": {
              "type": "string"
            },
            "description": "Access token"
          },
          {
            "in": "query",
            "name": "disableNotifications",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Disable send notifications"
          }
        ],
        "summary": "Synchronize client with group",
        "x-sdk-interface": "teams.synchronizeClientWithGroup"
      }
    },
    "/team/{teamId}/{userId}/assignUserToTeam": {
      "put": {
        "x-action": "assignUserToTeam",
        "x-entityId": "params.teamId",
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user id for assign",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-add-user",
        "summary": "Add user",
        "x-sdk-interface": "teams.addUser"
      }
    },
    "/team/{teamId}/renameTeam": {
      "put": {
        "x-action": "renameTeam",
        "x-entityId": {
          "pathId": "params.teamId",
          "pathName": "body.name"
        },
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-rename",
        "summary": "Rename team",
        "x-sdk-interface": "teams.rename"
      }
    },
    "/team/{teamId}/{userId}/deleteUserFromTeam": {
      "put": {
        "x-action": "deleteUserFromTeam",
        "x-entityId": "params.teamId",
        "parameters": [
          {
            "description": "The id of the team",
            "in": "path",
            "name": "teamId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user id for assign",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-remove-user",
        "summary": "Remove user",
        "x-sdk-interface": "teams.removeUser"
      }
    },
    "/team/{userId}/findTeamsByUser": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "teams"
        ],
        "operationId": "teams-list-by-user",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "User id"
          }
        ],
        "summary": "List by user",
        "x-sdk-interface": "teams.listByUser"
      }
    },
    "/user": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-get",
        "summary": "Get",
        "parameters": [],
        "x-sdk-interface": "users.get"
      },
      "post": {
        "x-action": "updateUser",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.name"
        },
        "operationId": "users-create",
        "x-sdk-interface": "users.create",
        "summary": "Create",
        "tags": [
          "users"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account": {
                    "type": "object",
                    "x-secure": true
                  },
                  "activeAccount": {
                    "type": "object",
                    "x-secure": true
                  },
                  "logins": {
                    "type": "object",
                    "x-secure": true
                  },
                  "key": {
                    "type": "object",
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/user/onboarding-status/user": {
      "post": {
        "x-action": "createOnboardingStatusUser",
        "operationId": "users-onboarding-status-create",
        "x-sdk-interface": "users.onboardingStatus.create",
        "summary": "Create onboarding status",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/user/onboarding-status/account": {
      "post": {
        "x-action": "createOnboardingStatusAccount",
        "operationId": "users-onboarding-status-account",
        "x-sdk-interface": "users.onboardingStatus.account",
        "summary": "Onboarding status account",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        }
      }
    },
    "/user/context": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-notify-context-created",
        "summary": "Notify context created",
        "parameters": [],
        "x-sdk-interface": "auth.notifyContextCreated"
      }
    },
    "/user/changeaccount/{accountId}": {
      "post": {
        "parameters": [
          {
            "description": "id of an object",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-change-account",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Change account",
        "x-sdk-interface": "users.changeAccount"
      }
    },
    "/user/submitQuestionnaire": {
      "post": {
        "x-action": "submitQuestionnaire",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "users"
        ],
        "operationId": "users-submit-questionnaire",
        "requestBody": {
          "$ref": "#/components/requestBodies/Json"
        },
        "summary": "Submit questionare",
        "x-sdk-interface": "users.submitQuestionnaire"
      }
    },
    "/user/firebaseAuth": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "firebase"
        ],
        "operationId": "firebase-get-token",
        "summary": "Get token",
        "x-sdk-interface": "firebase.getToken"
      }
    },
    "/version": {
      "get": {
        "responses": {
          "200": {
            "$ref": "#/components/responses/Json"
          }
        },
        "tags": [
          "version"
        ],
        "operationId": "version-get-server-version",
        "parameters": [],
        "summary": "Get server version",
        "x-sdk-interface": "version.getServerVersion"
      }
    }
  },
  "components": {
    "parameters": {
      "accountName": {
        "in": "path",
        "name": "accountName",
        "description": "Account name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardId": {
        "in": "query",
        "name": "boardId",
        "description": "Board id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardIdpath": {
        "description": "id of a board",
        "in": "path",
        "name": "boardId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardName": {
        "description": "name of a board",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "buildId": {
        "description": "id of a build object",
        "in": "path",
        "name": "buildId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "workflowId": {
        "description": "id of a workflowId object",
        "in": "path",
        "name": "workflowId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "id": {
        "description": "id of an object",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "accountId": {
        "description": "accountId of an object",
        "in": "path",
        "name": "accountId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repoName": {
        "description": "repository name",
        "in": "path",
        "name": "repoName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repoOwner": {
        "description": "name of owner of repository",
        "in": "path",
        "name": "repoOwner",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "sectionName": {
        "description": "name of a section",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "serviceId": {
        "description": "id of a service object",
        "in": "path",
        "name": "serviceId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "requestBody": {
        "type": "object"
      },
      "Json": {
        "type": "object"
      },
      "abac": {
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resource": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "requestBodies": {
      "Json": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/requestBody"
            }
          }
        }
      },
      "create_boardOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_sectionOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "boardId": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "index": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "section": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "updateAccountAccountdetails": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "settings": {
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "create_favoriteOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "entities": {
                  "type": "string"
                },
                "type": {
                  "enum": [
                    "repo",
                    "pipeline-branch",
                    "step-type"
                  ],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_annotationOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "entityId": {
                  "type": "string"
                },
                "entityType": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_annotation_manyOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "annotations": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entityId": {
                            "type": "string"
                          },
                          "entityType": {
                            "type": "string"
                          },
                          "annotations": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    },
                    "unset": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entityId": {
                            "type": "string"
                          },
                          "entityType": {
                            "type": "string"
                          },
                          "annotations": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "abac": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "teams": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "actions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "resource": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "Json": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/requestBody"
            }
          }
        },
        "description": "json"
      }
    },
    "securitySchemes": {
      "apiKey": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  }
}
