{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "name": "Codefresh",
      "url": "https://www.codefresh.io"
    },
    "description": "Codefresh API openAPI 3.0 specification",
    "termsOfService": "https://codefresh.io/docs/docs/terms-and-privacy-policy/terms-of-service/",
    "title": "Codefresh API",
    "version": "0.0.2",
    "x-logo": {
      "url": "https://i.ibb.co/X7kg7jb/image.png",
      "backgroundColor": "#FFFFFF",
      "altText": "Codefresh"
    }
  },
  "x-service-name": "api-public",
  "x-base-path": "/api",
  "x-internal-services": ["pipeline-manager", "api"],
  "x-endpoint-conditions": [{
    "weight": 0,
    "condition": "global.has-general-service-role",
    "handlerRegex": "(.*)"
  }],
  "servers": [{
    "url": "https://g.codefresh.io/api"
  }],
  "security": [{
    "apiKey": []
  }],
  "x-tagGroups": [{
    "name": "Pipelines / Builds",
    "tags": ["Annotations", "Builds", "Images", "Pipelines", "Progress", "Step-types", "Triggers", "Triggers Events", "Triggers Types"]
  }, {
    "name": "Kubernetes / Helm",
    "tags": ["Helm Boards", "Helm Charts", "Helm Releases", "Helm Sections", "Kubernetes"]
  }, {
    "name": "Swarm",
    "tags": ["Compositions", "Environments"]
  }, {
    "name": "Integrations / Contexts",
    "tags": ["Clusters", "Contexts", "Helm Repos", "Registries", "Repos"]
  }, {
    "name": "Account Management",
    "tags": ["Abac", "Accounts", "Runtime Environments", "Teams", "Tokens", "Views"]
  }, {
    "name": "User Properties",
    "tags": ["favorites"]
  }, {
    "name": "On-Premise",
    "tags": ["Features", "Runtime Environments (Account)", "Runtime Environments (Plan)", "Runtime Environments (System)", "Runtime Environments."]
  }],
  "tags": [{
    "name": "Abac",
    "description": "abac",
    "x-id": "abac"
  }, {
    "name": "Accounts",
    "description": "accounts",
    "x-id": "accounts"
  }, {
    "name": "Annotations",
    "description": "annotations",
    "x-id": "annotations"
  }, {
    "name": "Approval",
    "description": "Approval",
    "x-id": "approval"
  }, {
    "name": "Builds",
    "description": "builds",
    "x-id": "builds"
  }, {
    "name": "Clusters",
    "description": "clusters",
    "x-id": "clusters"
  }, {
    "name": "Compositions",
    "description": "compositions",
    "x-id": "compositions"
  }, {
    "name": "Contexts",
    "description": "contexts",
    "x-id": "contexts"
  }, {
    "name": "Environments",
    "description": "environments",
    "x-id": "environments"
  }, {
    "name": "Features",
    "description": "features",
    "x-id": "features"
  }, {
    "name": "Helm Boards",
    "description": "helm.boards",
    "x-id": "helm.boards"
  }, {
    "name": "Helm Charts",
    "description": "helm.charts",
    "x-id": "helm.charts"
  }, {
    "name": "Helm Releases",
    "description": "helm.releases",
    "x-id": "helm.releases"
  }, {
    "name": "Helm Repos",
    "description": "helm.repos",
    "x-id": "helm.repos"
  }, {
    "name": "Helm Sections",
    "description": "helm.sections",
    "x-id": "helm.sections"
  }, {
    "name": "Images",
    "description": "images",
    "x-id": "images"
  }, {
    "name": "Kubernetes",
    "description": "kubernetes",
    "x-id": "kubernetes"
  }, {
    "name": "Pipelines",
    "description": "pipelines",
    "x-id": "pipelines"
  }, {
    "name": "Progress",
    "description": "progress",
    "x-id": "progress"
  }, {
    "name": "Providers",
    "description": "providers",
    "x-id": "providers"
  }, {
    "name": "Registries",
    "description": "registries",
    "x-id": "registries"
  }, {
    "name": "Repos",
    "description": "repos",
    "x-id": "repos"
  }, {
    "name": "Runtime Environments",
    "description": "runtimeEnvs",
    "x-id": "runtimeEnvs"
  }, {
    "name": "Runtime Environments (Account)",
    "description": "onPrem.runtimeEnvs.account",
    "x-id": "onPrem.runtimeEnvs.account"
  }, {
    "name": "Runtime Environments (Plan)",
    "description": "onPrem.runtimeEnvs.plan",
    "x-id": "onPrem.runtimeEnvs.plan"
  }, {
    "name": "Runtime Environments (System)",
    "description": "onPrem.runtimeEnvs.system",
    "x-id": "onPrem.runtimeEnvs.system"
  }, {
    "name": "Runtime Environments.",
    "description": "onPrem.runtimeEnvs",
    "x-id": "onPrem.runtimeEnvs"
  }, {
    "name": "Step-types",
    "description": "step-types",
    "x-id": "step-types"
  }, {
    "name": "Teams",
    "description": "teams",
    "x-id": "teams"
  }, {
    "name": "Tokens",
    "description": "tokens",
    "x-id": "tokens"
  }, {
    "name": "Triggers",
    "description": "triggers",
    "x-id": "triggers"
  }, {
    "name": "Triggers Events",
    "description": "triggers.events",
    "x-id": "triggers.events"
  }, {
    "name": "Triggers Types",
    "description": "triggers.types",
    "x-id": "triggers.types"
  }, {
    "name": "Views",
    "description": "views",
    "x-id": "views"
  }],
  "paths": {
    "/abac": {
      "post": {
        "x-action": "createGrantRule",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Abac"],
        "operationId": "abac-rules-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "action": {
                    "type": "string"
                  },
                  "resource": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create rule",
        "parameters": [],
        "x-sdk-interface": "abac.rules.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"tags\\\":[\\\"${TAGS_ARR_STR}\\\"],\\\"action\\\":\\\"${ACTION_STR}\\\",\\\"resource\\\":\\\"${RESOURCE_STR}\\\",\\\"team\\\":\\\"${TEAM_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/abac\""
        }, {
          "lang": "node.js",
          "source": "sdk.abac.rules.create({\n    tags: [\n        `${TAGS_ARR_STR}`\n    ],\n    action: `${ACTION_STR}`,\n    resource: `${RESOURCE_STR}`,\n    team: `${TEAM_STR}`\n})"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Abac"],
        "operationId": "abac-rules-list",
        "summary": "List rules",
        "parameters": [],
        "x-sdk-interface": "abac.rules.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/abac\""
        }, {
          "lang": "node.js",
          "source": "sdk.abac.rules.list()"
        }]
      }
    },
    "/abac/batch": {
      "post": {
        "x-action": "updateRules",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Abac"],
        "operationId": "abac-rules-create-or-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "create": {
                    "items": {
                      "properties": {
                        "teams": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "actions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "resource": {
                          "type": "string"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "type": "array"
                  },
                  "delete": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create or delete rules",
        "parameters": [],
        "x-sdk-interface": "abac.rules.createOrDelete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"create\\\":[${CREATE_ARR_OBJ}],\\\"delete\\\":[\\\"${DELETE_ARR_STR}\\\"]}\" \\\n    \"https://g.codefresh.io/api/abac/batch\""
        }, {
          "lang": "node.js",
          "source": "sdk.abac.rules.createOrDelete({\n    create: [\n        { ...CREATE_ARR_OBJ }\n    ],\n    delete: [\n        `${DELETE_ARR_STR}`\n    ]\n})"
        }]
      }
    },
    "/abac/resource/{resource}": {
      "get": {
        "parameters": [{
          "description": "The id of the resource",
          "in": "path",
          "name": "resource",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Abac"],
        "operationId": "abac-list-by-resource",
        "summary": "Get rules by resource",
        "x-sdk-interface": "abac.rules.listByResource",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/abac/resource/${RESOURCE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.abac.rules.listByResource({ resource })"
        }]
      }
    },
    "/abac/tags/rule/{rule}": {
      "post": {
        "x-action": "updateRule",
        "x-entityId": {
          "pathId": "params.rule",
          "pathName": "body.tags[0]"
        },
        "parameters": [{
          "description": "The id of the rule",
          "in": "path",
          "name": "rule",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Abac"],
        "operationId": "abac-rules-tags-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update rule tags",
        "x-sdk-interface": "abac.rules.tags.update",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"tags\\\":[\\\"${TAGS_ARR_STR}\\\"]}\" \\\n    \"https://g.codefresh.io/api/abac/tags/rule/${RULE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.abac.rules.tags.update({ rule }, {\n    tags: [\n        `${TAGS_ARR_STR}`\n    ]\n})"
        }]
      }
    },
    "/abac/tags/rules": {
      "post": {
        "x-action": "updateTagsForRules",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Abac"],
        "operationId": "abac-rules-tags-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "rules": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create rules tags",
        "parameters": [],
        "x-sdk-interface": "abac.rules.tags.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"tags\\\":[\\\"${TAGS_ARR_STR}\\\"],\\\"rules\\\":[\\\"${RULES_ARR_STR}\\\"]}\" \\\n    \"https://g.codefresh.io/api/abac/tags/rules\""
        }, {
          "lang": "node.js",
          "source": "sdk.abac.rules.tags.create({\n    tags: [\n        `${TAGS_ARR_STR}`\n    ],\n    rules: [\n        `${RULES_ARR_STR}`\n    ]\n})"
        }]
      }
    },
    "/abac/team/{teamId}": {
      "get": {
        "parameters": [{
          "description": "The id of the team",
          "in": "path",
          "name": "teamId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Abac"],
        "operationId": "abac-list-by-team",
        "summary": "Get rules by team id",
        "x-sdk-interface": "abac.rules.listByTeam",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/abac/team/${TEAM_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.abac.rules.listByTeam({ teamId })"
        }]
      }
    },
    "/abac/teamRules": {
      "post": {
        "x-action": "createRulesForTeam",
        "x-entityId": {
          "pathName": "body.teams[0]"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Abac"],
        "operationId": "abac-rules-create-in-batch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "teams": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "actions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "resource": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "summary": "Create rules in batch",
        "parameters": [],
        "x-sdk-interface": "abac.rules.createInBatch",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/abac/teamRules\""
        }, {
          "lang": "node.js",
          "source": "sdk.abac.rules.createInBatch({ ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/abac/{rule}": {
      "get": {
        "parameters": [{
          "description": "The id of the rule",
          "in": "path",
          "name": "rule",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Abac"],
        "operationId": "abac-rules-get",
        "summary": "Get rule",
        "x-sdk-interface": "abac.rules.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/abac/${RULE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.abac.rules.get({ rule })"
        }]
      },
      "delete": {
        "x-action": "deleteRuleForTeam",
        "x-entityId": {
          "pathName": "params.rule"
        },
        "parameters": [{
          "description": "The id of the rule",
          "in": "path",
          "name": "rule",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Abac"],
        "operationId": "abac-rules-delete",
        "summary": "Delete rule",
        "x-sdk-interface": "abac.rules.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/abac/${RULE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.abac.rules.delete({ rule })"
        }]
      }
    },
    "/accounts/{accountId}/{userId}": {
      "delete": {
        "x-action": "removeUserFromAccount",
        "x-entityId": "params.accountId",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "id of an object",
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "description": "Not implemented yet",
        "operationId": "accounts-delete-user-from-account",
        "summary": "Delete user from account",
        "x-sdk-interface": "accounts.deleteUserFromAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/accounts/${ACCOUNT_ID}/${USER_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.deleteUserFromAccount({ accountId, userId })"
        }]
      }
    },
    "/accounts/{accountId}/{userId}/resendInvite": {
      "post": {
        "x-action": "resendInviteToUser",
        "x-entityId": "params.accountId",
        "operationId": "accounts-resend-invite",
        "tags": ["Accounts"],
        "summary": "Resend invite",
        "x-sdk-interface": "accounts.resendInvite",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "id of an object",
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/accounts/${ACCOUNT_ID}/${USER_ID}/resendInvite\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.resendInvite({ accountId, userId })"
        }]
      }
    },
    "/accounts/{accountId}/{userId}/adduser": {
      "post": {
        "x-action": "addExistingUserToAccount",
        "x-entityId": "params.accountId",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "id of an object",
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "operationId": "accounts-add-existing-user-to-account",
        "summary": "Add existing user to account",
        "x-sdk-interface": "accounts.addExistingUserToAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/accounts/${ACCOUNT_ID}/${USER_ID}/adduser\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.addExistingUserToAccount({ accountId, userId })"
        }]
      }
    },
    "/accounts/{accountId}/{userId}/admin": {
      "post": {
        "x-entityId": "params.accountId",
        "x-action": "makeUserAdmin",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "id of an object",
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "operationId": "accounts-set-as-admin",
        "summary": "Set as admin",
        "x-sdk-interface": "accounts.setAsAdmin",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/accounts/${ACCOUNT_ID}/${USER_ID}/admin\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.setAsAdmin({ accountId, userId })"
        }]
      },
      "delete": {
        "x-entityId": "params.accountId",
        "x-action": "removeUserFromAdmins",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "id of an object",
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "operationId": "accounts-delete-admin",
        "summary": "Delete admin",
        "x-sdk-interface": "accounts.deleteAdmin",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/accounts/${ACCOUNT_ID}/${USER_ID}/admin\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.deleteAdmin({ accountId, userId })"
        }]
      }
    },
    "/accounts/{accountId}/adduser": {
      "post": {
        "x-action": "addUserToAccount",
        "x-entityId": "body.accountId",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "description": "Adds a not existing user to an account. the provider field is optional and if not provided it will be taken from the account model",
        "operationId": "accounts-add-user-to-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userDetails": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Add user to account",
        "x-sdk-interface": "accounts.addUserToAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"userDetails\\\":\\\"${USER_DETAILS_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/accounts/${ACCOUNT_ID}/adduser\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.addUserToAccount({ accountId }, {\n    userDetails: `${USER_DETAILS_STR}`\n})"
        }]
      }
    },
    "/accounts/{accountId}/update": {
      "post": {
        "x-action": "updateAccount",
        "x-entityId": {
          "pathId": "params.accountId",
          "pathName": "body.name"
        },
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "description": "Not implemented yet: update the user defined account fields. Receives a settings object (will be defined later)",
        "operationId": "accounts-update-account-public-settings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "integrations": {
                    "type": "object",
                    "x-secure": true
                  },
                  "notifications": {
                    "items": {
                      "properties": {
                        "events": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "slack": {
                          "properties": {
                            "uri": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "type": {
                          "enum": ["webhook", "slack"],
                          "type": "string"
                        },
                        "webhook": {
                          "properties": {
                            "method": {
                              "type": "string"
                            },
                            "uri": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update account public settings",
        "x-sdk-interface": "accounts.updateAccountPublicSettings",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"integrations\\\":${INTEGRATIONS_OBJ},\\\"notifications\\\":[{\\\"events\\\":[\\\"${EVENTS_ARR_STR}\\\"],\\\"slack\\\":{\\\"uri\\\":\\\"${URI_STR}\\\"},\\\"type\\\":\\\"${TYPE_STR}\\\",\\\"webhook\\\":{\\\"method\\\":\\\"${METHOD_STR}\\\",\\\"uri\\\":\\\"${URI_STR}\\\"}}]}\" \\\n    \"https://g.codefresh.io/api/accounts/${ACCOUNT_ID}/update\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.updateAccountPublicSettings({ accountId }, {\n    integrations: { ...INTEGRATIONS_OBJ },\n    notifications: [\n        {\n            events: [\n                `${EVENTS_ARR_STR}`\n            ],\n            slack: {\n                uri: `${URI_STR}`\n            },\n            type: `${TYPE_STR}`,\n            webhook: {\n                method: `${METHOD_STR}`,\n                uri: `${URI_STR}`\n            }\n        }\n    ]\n})"
        }]
      }
    },
    "/accounts/{accountId}/{userId}/updateuser": {
      "post": {
        "x-action": "updateUserByAdmin",
        "x-entityId": "params.accountId",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "id of an object",
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "description": "Not implemented yet",
        "operationId": "accounts-update-user-details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "logins": {
                    "type": "object",
                    "x-secure": true
                  },
                  "key": {
                    "type": "object",
                    "x-secure": true
                  },
                  "settings": {
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update user details",
        "x-sdk-interface": "accounts.updateUserDetails",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"logins\\\":${LOGINS_OBJ},\\\"key\\\":${KEY_OBJ},\\\"settings\\\":${SETTINGS_OBJ}}\" \\\n    \"https://g.codefresh.io/api/accounts/${ACCOUNT_ID}/${USER_ID}/updateuser\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.updateUserDetails({ accountId, userId }, {\n    logins: { ...LOGINS_OBJ },\n    key: { ...KEY_OBJ },\n    settings: { ...SETTINGS_OBJ }\n})"
        }]
      }
    },
    "/accounts/{accountId}/users": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "description": "List users of an account",
        "operationId": "accounts-get-users-for-account",
        "summary": "Get users for account",
        "x-sdk-interface": "accounts.getUsersForAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/accounts/${ACCOUNT_ID}/users\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.getUsersForAccount({ accountId })"
        }]
      }
    },
    "/admin/accounts": {
      "post": {
        "x-action": "createAccount",
        "x-audit": {
          "name": {
            "path": "name",
            "source": "res"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "description": "Add new account. Receives an account object ",
        "operationId": "accounts-add-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "provider": {
                    "type": "string"
                  }
                },
                "required": ["name"],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add account",
        "parameters": [],
        "x-sdk-interface": "accounts.addAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"name\\\":\\\"${NAME_STR}\\\",\\\"provider\\\":\\\"${PROVIDER_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/admin/accounts\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.addAccount({\n    name: `${NAME_STR}`,\n    provider: `${PROVIDER_STR}`\n})"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "description": "get all the accounts in the system",
        "operationId": "accounts-list-accounts",
        "summary": "List accounts",
        "parameters": [],
        "x-sdk-interface": "accounts.listAccounts",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/accounts\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.listAccounts()"
        }]
      }
    },
    "/admin/accounts/addpendinguser": {
      "post": {
        "x-action": "addPendingUser",
        "x-audit": {
          "name": {
            "path": "body.email",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "operationId": "accounts-add-pending-user-without-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "account": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "provider": {
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": ["name"],
                    "type": "object"
                  },
                  "userName": {
                    "type": "string"
                  }
                },
                "required": ["userName", "provider"],
                "type": "object"
              }
            }
          }
        },
        "summary": "Add pending user without account",
        "parameters": [],
        "x-sdk-interface": "accounts.addPendingUserWithoutAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"account\\\":[\\\"${ACCOUNT_ARR_STR}\\\"],\\\"provider\\\":{\\\"name\\\":\\\"${NAME_STR}\\\"},\\\"userName\\\":\\\"${USER_NAME_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/admin/accounts/addpendinguser\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.addPendingUserWithoutAccount({\n    account: [\n        `${ACCOUNT_ARR_STR}`\n    ],\n    provider: {\n        name: `${NAME_STR}`\n    },\n    userName: `${USER_NAME_STR}`\n})"
        }]
      }
    },
    "/admin/accounts/{accountId}": {
      "get": {
        "parameters": [{
          "description": "accountId of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "description": "Get an account by id",
        "operationId": "accounts-get-by-id",
        "summary": "Get by id",
        "x-sdk-interface": "accounts.getById",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/accounts/${ACCOUNT_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.getById({ accountId })"
        }]
      },
      "delete": {
        "x-action": "deleteAccount",
        "x-entityId": "params.accountId",
        "parameters": [{
          "description": "accountId of an object",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "description": "Not implemented yet",
        "operationId": "accounts-delete-account",
        "summary": "Delete account",
        "x-sdk-interface": "accounts.deleteAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/accounts/${ACCOUNT_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.deleteAccount({ accountId })"
        }]
      }
    },
    "/admin/accounts/{id}/update": {
      "post": {
        "x-action": "updateAccount",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.accountDetails.name"
        },
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "description": "Not implemented yet: Update the account info that only codefresh admins (codefresh employees, not account admin) can access",
        "operationId": "accounts-update-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountDetails": {
                    "type": "object",
                    "properties": {
                      "integrations": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Update account",
        "x-sdk-interface": "accounts.updateAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"accountDetails\\\":{\\\"integrations\\\":${INTEGRATIONS_OBJ}}}\" \\\n    \"https://g.codefresh.io/api/admin/accounts/${ID}/update\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.updateAccount({ id }, {\n    accountDetails: {\n        integrations: { ...INTEGRATIONS_OBJ }\n    }\n})"
        }]
      }
    },
    "/admin/accounts/{id}/rename": {
      "post": {
        "x-action": "renameAccount",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Accounts"],
        "operationId": "accounts-update-account-by-admin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "integrations": {
                    "type": "object",
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "summary": "Rename account",
        "x-sdk-interface": "accounts.renameAccountByAdmin",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"integrations\\\":${INTEGRATIONS_OBJ}}\" \\\n    \"https://g.codefresh.io/api/admin/accounts/${ID}/rename\""
        }, {
          "lang": "node.js",
          "source": "sdk.accounts.renameAccountByAdmin({ id }, {\n    integrations: { ...INTEGRATIONS_OBJ }\n})"
        }]
      }
    },
    "/admin/runtime-environments": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments."],
        "operationId": "onPrem-runtimeEnvs-list",
        "parameters": [{
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "string"
          },
          "description": "Limit"
        }, {
          "in": "query",
          "name": "offset",
          "schema": {
            "type": "string"
          },
          "description": "Offset"
        }, {
          "in": "query",
          "name": "accountIds",
          "schema": {
            "type": "string"
          },
          "description": "Account ids"
        }],
        "summary": "List",
        "x-sdk-interface": "onPrem.runtimeEnvs.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments?limit=${LIMIT}&offset=${OFFSET}&accountIds=${ACCOUNT_IDS}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.list({ limit, offset, accountIds })"
        }]
      }
    },
    "/admin/runtime-environments/account/default/{account}/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "setDefaultRuntimeEnvByAdminToAccount",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments (Account)"],
        "operationId": "onPrem-runtimeEnvs-account-set-default",
        "parameters": [{
          "in": "path",
          "name": "account",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Account"
        }, {
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }],
        "summary": "Set default for account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.setDefault",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/account/default/${ACCOUNT}/${RUNTIME_ENVIRONMENT_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.account.setDefault({ account, runtimeEnvironmentName })"
        }]
      }
    },
    "/admin/runtime-environments/account/modify/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "addRuntimeEnvToAccountByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments (Account)"],
        "operationId": "onPrem-runtimeEnvs-account-modify",
        "parameters": [{
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }],
        "summary": "Add to account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.modify",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/account/modify/${RUNTIME_ENVIRONMENT_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.account.modify({ runtimeEnvironmentName })"
        }]
      },
      "delete": {
        "x-action": "removeRuntimeEnvFromAccountByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments (Account)"],
        "operationId": "onPrem-runtimeEnvs-account-delete",
        "parameters": [{
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }],
        "summary": "Delete for account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/account/modify/${RUNTIME_ENVIRONMENT_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.account.delete({ runtimeEnvironmentName })"
        }]
      }
    },
    "/admin/runtime-environments/account/{account}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments (Account)"],
        "operationId": "onPrem-runtimeEnvs-account-list",
        "parameters": [{
          "in": "path",
          "name": "account",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Account"
        }, {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "string"
          },
          "description": "Limit"
        }, {
          "in": "query",
          "name": "offset",
          "schema": {
            "type": "string"
          },
          "description": "Offset"
        }, {
          "in": "query",
          "name": "accountIds",
          "schema": {
            "type": "string"
          },
          "description": "Account ids"
        }],
        "summary": "Get by account",
        "x-sdk-interface": "onPrem.runtimeEnvs.account.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/account/${ACCOUNT}?limit=${LIMIT}&offset=${OFFSET}&accountIds=${ACCOUNT_IDS}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.account.list({\n    account,\n    limit,\n    offset,\n    accountIds\n})"
        }]
      }
    },
    "/admin/runtime-environments/default/{plan}/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "setDefaultRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments (Plan)"],
        "operationId": "onPrem-runtimeEnvs-plan-set-default",
        "parameters": [{
          "in": "path",
          "name": "plan",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Plan"
        }, {
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }],
        "summary": "Set default",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.setDefault",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/default/${PLAN}/${RUNTIME_ENVIRONMENT_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.plan.setDefault({ plan, runtimeEnvironmentName })"
        }]
      }
    },
    "/admin/runtime-environments/{runtimeEnvironmentName}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments (System)"],
        "operationId": "onPrem-runtimeEnvs-system-get",
        "parameters": [{
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }, {
          "in": "query",
          "name": "version",
          "schema": {
            "type": "string"
          },
          "description": "Version"
        }, {
          "in": "query",
          "name": "extend",
          "schema": {
            "type": "string"
          },
          "description": "Extend"
        }, {
          "in": "query",
          "name": "history",
          "schema": {
            "type": "string"
          },
          "description": "History"
        }, {
          "in": "query",
          "name": "successors",
          "schema": {
            "type": "string"
          },
          "description": "Successors"
        }],
        "summary": "Get sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/${RUNTIME_ENVIRONMENT_NAME}?version=${VERSION}&extend=${EXTEND}&history=${HISTORY}&successors=${SUCCESSORS}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.system.get({\n    runtimeEnvironmentName,\n    version,\n    extend,\n    history,\n    successors\n})"
        }]
      },
      "put": {
        "x-action": "upsertRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments (System)"],
        "operationId": "onPrem-runtimeEnvs-system-update",
        "parameters": [{
          "in": "path",
          "name": "runtimeEnvironmentName",
          "description": "Runtime environment name",
          "schema": {
            "type": "string"
          },
          "required": true
        }, {
          "in": "query",
          "name": "extend",
          "description": "Extend or not",
          "schema": {
            "type": "string"
          }
        }, {
          "in": "query",
          "name": "description",
          "description": "Description",
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.update",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/${RUNTIME_ENVIRONMENT_NAME}?extend=${EXTEND}&description=${DESCRIPTION}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.system.update({ runtimeEnvironmentName, extend, description }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "delete": {
        "x-action": "deleteRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments (System)"],
        "operationId": "onPrem-runtimeEnvs-system-delete",
        "parameters": [{
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }, {
          "in": "query",
          "name": "force",
          "schema": {
            "type": "string"
          },
          "description": "Force"
        }],
        "summary": "Delete sys re",
        "x-sdk-interface": "onPrem.runtimeEnvs.system.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/${RUNTIME_ENVIRONMENT_NAME}?force=${FORCE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.system.delete({ runtimeEnvironmentName, force })"
        }]
      }
    },
    "/admin/runtime-environments/{plan}/{runtimeEnvironmentName}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments."],
        "operationId": "onPrem-runtimeEnvs-plan-get",
        "parameters": [{
          "in": "path",
          "name": "plan",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Plan"
        }, {
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }, {
          "in": "query",
          "name": "version",
          "schema": {
            "type": "string"
          },
          "description": "Version"
        }, {
          "in": "query",
          "name": "extend",
          "schema": {
            "type": "string"
          },
          "description": "Extend"
        }, {
          "in": "query",
          "name": "history",
          "schema": {
            "type": "string"
          },
          "description": "History"
        }, {
          "in": "query",
          "name": "successors",
          "schema": {
            "type": "string"
          },
          "description": "Successors"
        }],
        "summary": "Get",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/${PLAN}/${RUNTIME_ENVIRONMENT_NAME}?version=${VERSION}&extend=${EXTEND}&history=${HISTORY}&successors=${SUCCESSORS}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.plan.get({\n    plan,\n    runtimeEnvironmentName,\n    version,\n    extend,\n    history,\n    successors\n})"
        }]
      },
      "put": {
        "x-action": "upsertRuntimeEnvByAdmin",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments (Plan)"],
        "operationId": "onPrem-runtimeEnvs-plan-update",
        "parameters": [{
          "in": "path",
          "name": "plan",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Plan"
        }, {
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }, {
          "in": "query",
          "name": "extend",
          "schema": {
            "type": "string"
          },
          "description": "Extend"
        }, {
          "in": "query",
          "name": "description",
          "schema": {
            "type": "string"
          },
          "description": "Description"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.update",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/${PLAN}/${RUNTIME_ENVIRONMENT_NAME}?extend=${EXTEND}&description=${DESCRIPTION}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.plan.update({\n    plan,\n    runtimeEnvironmentName,\n    extend,\n    description\n}, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "delete": {
        "x-action": "deleteRuntimeEnvByAdmin",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments (Plan)"],
        "operationId": "onPrem-runtimeEnvs-plan-delete",
        "parameters": [{
          "in": "path",
          "name": "plan",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Plan"
        }, {
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }, {
          "in": "query",
          "name": "force",
          "schema": {
            "type": "string"
          },
          "description": "Force"
        }],
        "summary": "Delete",
        "x-sdk-interface": "onPrem.runtimeEnvs.plan.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/runtime-environments/${PLAN}/${RUNTIME_ENVIRONMENT_NAME}?force=${FORCE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.onPrem.runtimeEnvs.plan.delete({ plan, runtimeEnvironmentName, force })"
        }]
      }
    },
    "/admin/user/{userName}": {
      "delete": {
        "x-action": "deleteUser",
        "x-entityId": {
          "pathName": "params.userName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["user"],
        "operationId": "user-delete",
        "parameters": [{
          "in": "path",
          "name": "userName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "User name"
        }],
        "summary": "Delete",
        "x-sdk-interface": "user.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/user/${USER_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.user.delete({ userName })"
        }]
      }
    },
    "/admin/user/adminRole": {
      "post": {
        "x-action": "changeAdminRole",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.userName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["user"],
        "operationId": "user-change-admin-role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Change role",
        "x-sdk-interface": "user.changeRole",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/user/adminRole\""
        }, {
          "lang": "node.js",
          "source": "sdk.user.changeRole({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      }
    },
    "/admin/user/account": {
      "post": {
        "x-action": "changeUserAccount",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.userName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["user"],
        "operationId": "user-change-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    },
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "summary": "Change account",
        "x-sdk-interface": "user.changeAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"account\\\":[${ACCOUNT_ARR_OBJ}]}\" \\\n    \"https://g.codefresh.io/api/admin/user/account\""
        }, {
          "lang": "node.js",
          "source": "sdk.user.changeAccount({\n    account: [\n        { ...ACCOUNT_ARR_OBJ }\n    ]\n})"
        }],
        "parameters": []
      }
    },
    "/admin/user/localProvider": {
      "post": {
        "x-action": "updateLocalProviderPassword",
        "x-entityId": {
          "pathName": "request.body.userName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["user"],
        "operationId": "user-update-local-provider",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "x-secure": true
                  }
                }
              }
            }
          }
        },
        "summary": "Update local provider",
        "x-sdk-interface": "user.updateLocalProvider",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"password\\\":\\\"${PASSWORD_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/admin/user/localProvider\""
        }, {
          "lang": "node.js",
          "source": "sdk.user.updateLocalProvider({\n    password: `${PASSWORD_STR}`\n})"
        }],
        "parameters": []
      },
      "delete": {
        "x-action": "deleteLocalProvider",
        "x-entityId": {
          "pathName": "query.userName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["user"],
        "operationId": "user-delete-local-provider",
        "summary": "Delete local provider",
        "x-sdk-interface": "user.deleteLocalProvider",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/user/localProvider\""
        }, {
          "lang": "node.js",
          "source": "sdk.user.deleteLocalProvider()"
        }],
        "parameters": []
      }
    },
    "/admin/user/{userId}/activate": {
      "post": {
        "x-action": "activateUser",
        "x-entityId": "params.userId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["user"],
        "operationId": "user-activate-user",
        "parameters": [{
          "in": "path",
          "name": "userId",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "User ID"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Activate user",
        "x-sdk-interface": "user.activate.user",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/user/${USER_ID}/activate\""
        }, {
          "lang": "node.js",
          "source": "sdk.user.activate.user({ userId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/admin/idp": {
      "post": {
        "x-action": "createIDP",
        "x-audit": {
          "name": {
            "path": "body.clientName",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["idp"],
        "operationId": "idp-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": ["clientName", "clientType"]
                }
              }
            }
          }
        },
        "summary": "Create IDP",
        "x-sdk-interface": "idp.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/idp\""
        }, {
          "lang": "node.js",
          "source": "sdk.idp.create({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      },
      "put": {
        "x-action": "updateIDP",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.clientName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["idp"],
        "operationId": "idp-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": ["clientName", "clientType"]
                }
              }
            }
          }
        },
        "summary": "Update IDP",
        "x-sdk-interface": "idp.update",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/idp\""
        }, {
          "lang": "node.js",
          "source": "sdk.idp.update({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      }
    },
    "/admin/idp/addAccount": {
      "post": {
        "x-action": "addAccountToIDP",
        "x-entityId": "body.IDPConfigId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["idp"],
        "operationId": "idp-add-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Add to account",
        "x-sdk-interface": "idp.add-account",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/idp/addAccount\""
        }, {
          "lang": "node.js",
          "source": "sdk.idp.add-account({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      }
    },
    "/admin/idp/{id}": {
      "delete": {
        "x-action": "deleteIDP",
        "x-entityId": "params.id",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["idp"],
        "operationId": "idp-delete",
        "parameters": [{
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "idp id"
        }],
        "summary": "Delete",
        "x-sdk-interface": "idp.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/admin/idp/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.idp.delete({ id })"
        }]
      }
    },
    "/admin/analytic/addAccount": {
      "put": {
        "x-action": "addAccountToAnalytic",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["analytic"],
        "operationId": "analytic-add-account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": ["name"]
                }
              }
            }
          }
        },
        "summary": "Add account",
        "x-sdk-interface": "analytic.add.account",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/analytic/addAccount\""
        }, {
          "lang": "node.js",
          "source": "sdk.analytic.add.account({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      }
    },
    "/admin/customers": {
      "post": {
        "x-action": "createCustomer",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customers"],
        "operationId": "customers-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "customers.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/customers\""
        }, {
          "lang": "node.js",
          "source": "sdk.customers.create({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      }
    },
    "/admin/customers/{customerId}/{accountId}/assignAccountToCustomer": {
      "post": {
        "x-action": "assignAccountToCustomer",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customers"],
        "operationId": "customers-assign-account",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }, {
          "in": "path",
          "name": "accountId",
          "schema": {
            "type": "string"
          },
          "description": "Account ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Assign account",
        "x-sdk-interface": "customers.assignAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/customers/${CUSTOMER_ID}/${ACCOUNT_ID}/assignAccountToCustomer\""
        }, {
          "lang": "node.js",
          "source": "sdk.customers.assignAccount({ customerId, accountId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/admin/customers/{customerId}/updateCustomerLimits": {
      "put": {
        "x-action": "updateCustomerLimits",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customers"],
        "operationId": "customers-update-limits",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update limits",
        "x-sdk-interface": "customers.updateLimits",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/customers/${CUSTOMER_ID}/updateCustomerLimits\""
        }, {
          "lang": "node.js",
          "source": "sdk.customers.updateLimits({ customerId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/admin/customers/{customerId}/{accountId}/detachAccountFromCustomer": {
      "post": {
        "x-action": "detachAccountFromCustomer",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customers"],
        "operationId": "customers-detach-account",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }, {
          "in": "path",
          "name": "accountId",
          "schema": {
            "type": "string"
          },
          "description": "Account ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Detach account",
        "x-sdk-interface": "customers.detachAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/customers/${CUSTOMER_ID}/${ACCOUNT_ID}/detachAccountFromCustomer\""
        }, {
          "lang": "node.js",
          "source": "sdk.customers.detachAccount({ customerId, accountId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/admin/customers/{customerId}/{userId}/addCustomerAdmin": {
      "post": {
        "x-action": "addCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customers"],
        "operationId": "customers-add-admin",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }, {
          "in": "path",
          "name": "userId",
          "schema": {
            "type": "string"
          },
          "description": "User ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Add admit",
        "x-sdk-interface": "customers.addAdmin",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/customers/${CUSTOMER_ID}/${USER_ID}/addCustomerAdmin\""
        }, {
          "lang": "node.js",
          "source": "sdk.customers.addAdmin({ customerId, userId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/admin/customers/{customerId}/{userId}/removeCustomerAdmin": {
      "post": {
        "x-action": "removeCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customers"],
        "operationId": "customers-remove-admin",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }, {
          "in": "path",
          "name": "userId",
          "schema": {
            "type": "string"
          },
          "description": "User ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Remove admin",
        "x-sdk-interface": "customers.removeAdmin",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/customers/${CUSTOMER_ID}/${USER_ID}/removeCustomerAdmin\""
        }, {
          "lang": "node.js",
          "source": "sdk.customers.removeAdmin({ customerId, userId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/admin/approval/approve": {
      "post": {
        "x-action": "submitApproval",
        "x-entityId": "body._id",
        "x-overrides": ["addResponseBody"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Approval"],
        "operationId": "approval-submit-aproval",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Submit approval",
        "x-sdk-interface": "approval.submitApproval",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/admin/approval/approve\""
        }, {
          "lang": "node.js",
          "source": "sdk.approval.submitApproval({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      }
    },
    "/favorites": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["favorites"],
        "operationId": "favorites-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "entities": {
                    "type": "string"
                  },
                  "type": {
                    "enum": ["repo", "pipeline-branch", "step-type"],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "favorites.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"entities\\\":\\\"${ENTITIES_STR}\\\",\\\"type\\\":\\\"${TYPE_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/favorites\""
        }, {
          "lang": "node.js",
          "source": "sdk.favorites.create({\n    entities: `${ENTITIES_STR}`,\n    type: `${TYPE_STR}`\n})"
        }]
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["favorites"],
        "operationId": "favorites-delete",
        "summary": "Delete favorite entities",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "entities": {
                    "type": "string"
                  },
                  "type": {
                    "enum": ["repo", "pipeline-branch", "step-type"],
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "x-sdk-interface": "favorites.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"entities\\\":\\\"${ENTITIES_STR}\\\",\\\"type\\\":\\\"${TYPE_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/favorites\""
        }, {
          "lang": "node.js",
          "source": "sdk.favorites.delete({\n    entities: `${ENTITIES_STR}`,\n    type: `${TYPE_STR}`\n})"
        }]
      }
    },
    "/favorites/{type}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "type": {
                        "enum": ["repo", "pipeline-branch", "step-type"],
                        "type": "string"
                      },
                      "data": {
                        "type": "object"
                      },
                      "entities": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Favorites objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["favorites"],
        "operationId": "favorites-list",
        "summary": "List",
        "parameters": [{
          "description": "Entity type",
          "in": "path",
          "name": "type",
          "required": true,
          "schema": {
            "enum": ["repo", "pipeline-branch", "step-type"],
            "type": "string"
          }
        }],
        "x-sdk-interface": "favorites.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/favorites/${TYPE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.favorites.list({ type })"
        }]
      }
    },
    "/favorites/type/{type}/entity/{entityId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "userId": {
                        "type": "string"
                      },
                      "type": {
                        "enum": ["repo", "pipeline-branch", "step-type"],
                        "type": "string"
                      },
                      "data": {
                        "type": "object"
                      },
                      "entities": {
                        "items": {
                          "type": "string"
                        },
                        "type": "array"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Favorites objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["favorites"],
        "operationId": "favorites-getById",
        "summary": "getById",
        "parameters": [{
          "description": "Entity type",
          "in": "path",
          "name": "type",
          "required": true,
          "schema": {
            "enum": ["repo", "pipeline-branch", "step-type"],
            "type": "string"
          }
        }, {
          "description": "Entity id",
          "in": "path",
          "name": "entityId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "x-sdk-interface": "favorites.getById",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/favorites/type/${TYPE}/entity/${ENTITY_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.favorites.getById({ type, entityId })"
        }]
      }
    },
    "/annotations": {
      "post": {
        "x-action": "createAnnotations",
        "x-entityId": {
          "pathId": "body.entityId",
          "handlerName": "getAnnotationKey",
          "pathName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "entityId": {
                      "type": "string"
                    },
                    "entityType": {
                      "type": "string"
                    },
                    "key": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Annotation object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Annotations"],
        "operationId": "annotations-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "entityId": {
                    "type": "string"
                  },
                  "entityType": {
                    "type": "string"
                  },
                  "key": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "annotations.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"entityId\\\":\\\"${ENTITY_ID_STR}\\\",\\\"entityType\\\":\\\"${ENTITY_TYPE_STR}\\\",\\\"key\\\":\\\"${KEY_STR}\\\",\\\"value\\\":\\\"${VALUE_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/annotations\""
        }, {
          "lang": "node.js",
          "source": "sdk.annotations.create({\n    entityId: `${ENTITY_ID_STR}`,\n    entityType: `${ENTITY_TYPE_STR}`,\n    key: `${KEY_STR}`,\n    value: `${VALUE_STR}`\n})"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "entityId": {
                        "type": "string"
                      },
                      "entityType": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Annotations objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Annotations"],
        "operationId": "annotations-list",
        "summary": "List",
        "parameters": [{
          "description": "id of annotation",
          "in": "query",
          "name": "id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "Entity id",
          "in": "query",
          "name": "entityId",
          "required": false,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "Entity type",
          "in": "query",
          "name": "entityType",
          "required": false,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "key of annotation",
          "in": "query",
          "name": "key",
          "required": false,
          "schema": {
            "type": "string"
          }
        }],
        "x-sdk-interface": "annotations.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/annotations?id=${ID}&entityId=${ENTITY_ID}&entityType=${ENTITY_TYPE}&key=${KEY}\""
        }, {
          "lang": "node.js",
          "source": "sdk.annotations.list({\n    id,\n    entityId,\n    entityType,\n    key\n})"
        }]
      },
      "delete": {
        "x-action": "deleteAnnotations",
        "x-entityId": {
          "pathId": "query.entityId",
          "handlerName": "getAnnotationKey",
          "pathName": "query"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Annotations"],
        "operationId": "annotations-delete",
        "summary": "Delete annotations",
        "parameters": [{
          "description": "id of annotation",
          "in": "query",
          "name": "id",
          "required": false,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "Entity id",
          "in": "query",
          "name": "entityId",
          "required": false,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "Entity type",
          "in": "query",
          "name": "entityType",
          "required": false,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "key of annotation",
          "in": "query",
          "name": "key",
          "required": false,
          "schema": {
            "type": "string"
          }
        }],
        "x-sdk-interface": "annotations.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/annotations?id=${ID}&entityId=${ENTITY_ID}&entityType=${ENTITY_TYPE}&key=${KEY}\""
        }, {
          "lang": "node.js",
          "source": "sdk.annotations.delete({\n    id,\n    entityId,\n    entityType,\n    key\n})"
        }]
      }
    },
    "/annotations/metadata": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "set": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "unset": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Annotation object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Annotations"],
        "operationId": "annotations-create-metadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "annotations": {
                    "type": "object",
                    "properties": {
                      "set": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "entityId": {
                              "type": "string"
                            },
                            "entityType": {
                              "type": "string"
                            },
                            "annotations": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      },
                      "unset": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "entityId": {
                              "type": "string"
                            },
                            "entityType": {
                              "type": "string"
                            },
                            "annotations": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create many",
        "parameters": [],
        "x-sdk-interface": "annotations.createMany",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"annotations\\\":{\\\"set\\\":[{\\\"entityId\\\":\\\"${ENTITY_ID_STR}\\\",\\\"entityType\\\":\\\"${ENTITY_TYPE_STR}\\\",\\\"annotations\\\":[${ANNOTATIONS_ARR_OBJ}]}],\\\"unset\\\":[{\\\"entityId\\\":\\\"${ENTITY_ID_STR}\\\",\\\"entityType\\\":\\\"${ENTITY_TYPE_STR}\\\",\\\"annotations\\\":[${ANNOTATIONS_ARR_OBJ}]}]}}\" \\\n    \"https://g.codefresh.io/api/annotations/metadata\""
        }, {
          "lang": "node.js",
          "source": "sdk.annotations.createMany({\n    annotations: {\n        set: [\n            {\n                entityId: `${ENTITY_ID_STR}`,\n                entityType: `${ENTITY_TYPE_STR}`,\n                annotations: [\n                    { ...ANNOTATIONS_ARR_OBJ }\n                ]\n            }\n        ],\n        unset: [\n            {\n                entityId: `${ENTITY_ID_STR}`,\n                entityType: `${ENTITY_TYPE_STR}`,\n                annotations: [\n                    { ...ANNOTATIONS_ARR_OBJ }\n                ]\n            }\n        ]\n    }\n})"
        }]
      }
    },
    "/auth/key": {
      "post": {
        "x-action": "createApiKey",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Tokens"],
        "operationId": "tokens-generate",
        "parameters": [{
          "in": "query",
          "name": "subjectType",
          "schema": {
            "type": "string"
          },
          "description": "Subject type"
        }, {
          "in": "query",
          "name": "subjectReference",
          "schema": {
            "type": "string"
          },
          "description": "Subject reference"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Generate",
        "x-sdk-interface": "tokens.generate",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/auth/key?subjectType=${SUBJECT_TYPE}&subjectReference=${SUBJECT_REFERENCE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.tokens.generate({ subjectType, subjectReference }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/auth/key/{id}": {
      "patch": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": ["Tokens"],
        "operationId": "tokens-patch",
        "parameters": [{
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "description": "build id",
          "required": true
        }],
        "summary": "Patch",
        "x-sdk-interface": "tokens.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/auth/key/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.tokens.patch({ id }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "delete": {
        "x-action": "deleteApiKey",
        "x-entityId": "params.id",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Tokens"],
        "operationId": "tokens-delete",
        "parameters": [{
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Id"
        }],
        "summary": "Delete",
        "x-sdk-interface": "tokens.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/auth/key/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.tokens.delete({ id })"
        }]
      }
    },
    "/auth/keys": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Tokens"],
        "operationId": "tokens-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "tokens.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/auth/keys\""
        }, {
          "lang": "node.js",
          "source": "sdk.tokens.list()"
        }]
      }
    },
    "/workflow": {
      "get": {
        "operationId": "workflows-list",
        "parameters": [{
          "name": "limit",
          "in": "query",
          "schema": {
            "type": "integer"
          },
          "description": "Limit"
        }, {
          "name": "page",
          "in": "query",
          "schema": {
            "type": "integer"
          },
          "description": "Page"
        }, {
          "name": "status",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "Status"
        }, {
          "name": "trigger",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "Trigger"
        }, {
          "name": "pipeline",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "Pipeline"
        }, {
          "name": "revision",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "revision sha"
        }, {
          "name": "branchName",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "branch name"
        }, {
          "name": "pipelineTriggerId",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "Pipeline trigger id"
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Builds"],
        "summary": "List",
        "x-sdk-interface": "workflows.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "build"
            }
          },
          "handler": "workflow.getAllExistingWorkflowProcesses"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/workflow?limit=${LIMIT}&page=${PAGE}&status=${STATUS}&trigger=${TRIGGER}&pipeline=${PIPELINE}&revision=${REVISION}&branchName=${BRANCH_NAME}&pipelineTriggerId=${PIPELINE_TRIGGER_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.workflows.list({\n    limit,\n    page,\n    status,\n    trigger,\n    pipeline,\n    revision,\n    branchName,\n    pipelineTriggerId\n})"
        }]
      }
    },
    "/workflow/{requestId}/status": {
      "get": {
        "operationId": "workflows-status",
        "parameters": [{
          "name": "requestId",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "description": "build request id",
          "required": true
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Builds"],
        "summary": "Get status",
        "x-sdk-interface": "workflows.status",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "build",
              "scope": "read:status",
              "description": "Read access to build status"
            }
          },
          "handler": "workflow.getWorkflowStatusByRequestId"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/workflow/${REQUEST_ID}/status\""
        }, {
          "lang": "node.js",
          "source": "sdk.workflows.status({ requestId })"
        }]
      }
    },
    "/workflow/{workflowId}/pending-approval/approve": {
      "get": {
        "x-action": "approveBuild",
        "x-entityId": "params.workflowId",
        "x-allowed": {
          "body": ["buildStrategy"]
        },
        "parameters": [{
          "description": "id of a workflowId object",
          "in": "path",
          "name": "workflowId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Builds"],
        "operationId": "workflows-approve",
        "summary": "Approve",
        "x-sdk-interface": "workflows.approve",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["audit.allow", "auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true,
              "abacSource": "workflow",
              "action": "approve",
              "description": "Approve or deny a build that is pending-approval"
            }
          },
          "preMiddleware": ["workflow.approvePendingApprovalWorkflow", "workflow.authorizeWorkflow"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.runPipeline"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/workflow/${WORKFLOW_ID}/pending-approval/approve\""
        }, {
          "lang": "node.js",
          "source": "sdk.workflows.approve({ workflowId })"
        }]
      }
    },
    "/workflow/{workflowId}/pending-approval/deny": {
      "get": {
        "x-action": "denyBuild",
        "x-entityId": "params.workflowId",
        "x-allowed": {
          "body": ["buildStrategy"]
        },
        "parameters": [{
          "description": "id of a workflowId object",
          "in": "path",
          "name": "workflowId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Builds"],
        "operationId": "workflows-deny",
        "summary": "Deny",
        "x-sdk-interface": "workflows.deny",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["audit.allow", "auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true,
              "abacSource": "workflow",
              "action": "approve"
            }
          },
          "preMiddleware": ["workflow.denyPendingApprovalWorkflow", "workflow.authorizeWorkflow"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.runPipeline"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/workflow/${WORKFLOW_ID}/pending-approval/deny\""
        }, {
          "lang": "node.js",
          "source": "sdk.workflows.deny({ workflowId })"
        }]
      }
    },
    "/builds/{buildId}": {
      "get": {
        "parameters": [{
          "name": "buildId",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "description": "buildId",
          "required": true
        }, {
          "name": "noAccount",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "noAccount",
          "required": true
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Builds"],
        "operationId": "workflows-get-build",
        "summary": "Get",
        "x-sdk-interface": "workflows.getBuild",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticatedOrAnonymous"],
            "acl": {
              "resource": "build"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "build.getBuildById"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/builds/${BUILD_ID}?noAccount=${NO_ACCOUNT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.workflows.getBuild({ buildId, noAccount })"
        }]
      }
    },
    "/builds/rebuild/{buildId}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Builds"],
        "operationId": "workflows-restart",
        "parameters": [{
          "in": "path",
          "name": "buildId",
          "schema": {
            "type": "string"
          },
          "description": "build id",
          "required": true
        }],
        "summary": "Restart",
        "x-sdk-interface": "workflows.restart",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "build"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "build.rebuild"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/builds/rebuild/${BUILD_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.workflows.restart({ buildId })"
        }]
      }
    },
    "/clusters": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "clusters.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.list()"
        }]
      }
    },
    "/clusters/local/cluster": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-save-local-cluster",
        "parameters": [],
        "summary": "Save local cluster",
        "x-sdk-interface": "clusters.saveLocal",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "preMiddleware": ["clusters.testClusterCredentials"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.proxyPostLocalCluster"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters/local/cluster\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.saveLocal()"
        }]
      }
    },
    "/clusters/revoke/{provider}": {
      "post": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-revoke",
        "parameters": [{
          "description": "id of provider",
          "in": "path",
          "name": "provider",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "summary": "Revoke account access to cluster",
        "x-sdk-interface": "clusters.revoke",
        "x-action": "deleteCloudIntegration",
        "x-entityId": "params.provider",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.revokeAccountAccess"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters/revoke/${PROVIDER}\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.revoke({ provider })"
        }]
      }
    },
    "/clusters/tags": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": ["Clusters"],
        "parameters": [],
        "summary": "Get all cluster tags",
        "x-sdk-interface": "clusters.tags.getAll",
        "operationId": "clusters-tags-get-all",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.getAllTags"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters/tags\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.tags.getAll()"
        }]
      }
    },
    "/clusters/{clusterId}/tags": {
      "get": {
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": ["Clusters"],
        "parameters": [{
          "name": "clusterId",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "cluster id"
        }],
        "summary": "List cluster tags",
        "x-sdk-interface": "clusters.tags.list",
        "operationId": "clusters-tags-list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.getTags"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters/${CLUSTER_ID}/tags\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.tags.list({ clusterId })"
        }]
      },
      "put": {
        "x-action": "updateTags",
        "x-entityId": "params.clusterId",
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": ["Clusters"],
        "parameters": [{
          "name": "clusterId",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "cluster id"
        }],
        "summary": "Put",
        "x-sdk-interface": "clusters.tags.update",
        "operationId": "clusters-tags-update",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.setTags"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters/${CLUSTER_ID}/tags\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.tags.update({ clusterId })"
        }]
      }
    },
    "/clusters/{provider}/cluster/{clusterId}": {
      "delete": {
        "x-action": "deleteCluster",
        "x-entityId": {
          "pathName": "params.provider"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-delete",
        "parameters": [{
          "name": "provider",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Provider"
        }, {
          "name": "clusterId",
          "in": "path",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Id"
        }],
        "summary": "Delete",
        "x-sdk-interface": "clusters.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.deleteCluster"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters/${PROVIDER}/cluster/${CLUSTER_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.delete({ provider, clusterId })"
        }]
      }
    },
    "/clusters*": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-proxy-post",
        "parameters": [],
        "summary": "Proxy post",
        "x-sdk-interface": "clusters.proxyPost",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.proxyToClusterProviders"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters*\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.proxyPost()"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-proxy-get",
        "parameters": [],
        "summary": "Proxy get",
        "x-sdk-interface": "clusters.proxyGet",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.proxyToClusterProviders"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters*\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.proxyGet()"
        }]
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-proxy-put",
        "parameters": [],
        "summary": "Proxy put",
        "x-sdk-interface": "clusters.proxyPut",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.proxyToClusterProviders"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters*\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.proxyPut()"
        }]
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-proxy-patch",
        "parameters": [],
        "summary": "Proxy patch",
        "x-sdk-interface": "clusters.proxyPatch",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.proxyToClusterProviders"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters*\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.proxyPatch()"
        }]
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-proxy-delete",
        "parameters": [],
        "summary": "Proxy delete",
        "x-sdk-interface": "clusters.proxyDelete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.proxyToClusterProviders"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters*\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.proxyDelete()"
        }]
      },
      "head": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-proxy-head",
        "parameters": [],
        "summary": "Proxy head",
        "x-sdk-interface": "clusters.proxyHead",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.proxyToClusterProviders"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X HEAD \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters*\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.proxyHead()"
        }]
      },
      "options": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "clusters-proxy-options",
        "parameters": [],
        "summary": "Proxy options",
        "x-sdk-interface": "clusters.proxyOptions",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "clusters.proxyToClusterProviders"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X OPTIONS \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/clusters*\""
        }, {
          "lang": "node.js",
          "source": "sdk.clusters.proxyOptions()"
        }]
      }
    },
    "/compositions": {
      "post": {
        "x-action": "createComposition",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Compositions"],
        "operationId": "compositions-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": ["name"]
                },
                "properties": {
                  "isAdvanced": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "vars": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "yamlJson": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "compositions.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"isAdvanced\\\":${IS_ADVANCED_BOOL},\\\"name\\\":\\\"${NAME_STR}\\\",\\\"vars\\\":[\\\"${VARS_ARR_STR}\\\"],\\\"yamlJson\\\":\\\"${YAML_JSON_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/compositions\""
        }, {
          "lang": "node.js",
          "source": "sdk.compositions.create({\n    isAdvanced: IS_ADVANCED_BOOL,\n    name: `${NAME_STR}`,\n    vars: [\n        `${VARS_ARR_STR}`\n    ],\n    yamlJson: `${YAML_JSON_STR}`\n})"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Compositions"],
        "operationId": "compositions-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "compositions.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/compositions\""
        }, {
          "lang": "node.js",
          "source": "sdk.compositions.list()"
        }]
      }
    },
    "/compositions/{identifier}/run": {
      "post": {
        "x-action": "runComposition",
        "x-entityId": "params.identifier",
        "parameters": [{
          "description": "id or name of a composition",
          "in": "path",
          "name": "identifier",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Compositions"],
        "operationId": "compositions-launch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": []
                },
                "properties": {
                  "vars": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Launch",
        "x-sdk-interface": "compositions.launch",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"vars\\\":[\\\"${VARS_ARR_STR}\\\"]}\" \\\n    \"https://g.codefresh.io/api/compositions/${IDENTIFIER}/run\""
        }, {
          "lang": "node.js",
          "source": "sdk.compositions.launch({ identifier }, {\n    vars: [\n        `${VARS_ARR_STR}`\n    ]\n})"
        }]
      }
    },
    "/compositions/{id}": {
      "get": {
        "parameters": [{
          "description": "id or name of a composition",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Compositions"],
        "operationId": "compositions-get",
        "summary": "Get",
        "x-sdk-interface": "compositions.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/compositions/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.compositions.get({ id })"
        }]
      },
      "put": {
        "x-action": "updateComposition",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "bony.name"
        },
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Compositions"],
        "operationId": "compositions-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": ["account", "created", "createdBy", "name", "_id"]
                },
                "properties": {
                  "isAdvanced": {
                    "type": "boolean"
                  },
                  "name": {
                    "type": "string"
                  },
                  "vars": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "yamlJson": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Update the name/variables/body of the composition with the id inserted",
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "compositions.update",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"isAdvanced\\\":${IS_ADVANCED_BOOL},\\\"name\\\":\\\"${NAME_STR}\\\",\\\"vars\\\":[\\\"${VARS_ARR_STR}\\\"],\\\"yamlJson\\\":\\\"${YAML_JSON_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/compositions/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.compositions.update({ id }, {\n    isAdvanced: IS_ADVANCED_BOOL,\n    name: `${NAME_STR}`,\n    vars: [\n        `${VARS_ARR_STR}`\n    ],\n    yamlJson: `${YAML_JSON_STR}`\n})"
        }]
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Compositions"],
        "operationId": "compositions-patch",
        "parameters": [{
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Id"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Patch",
        "x-sdk-interface": "compositions.patch",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/compositions/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.compositions.patch({ id }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "delete": {
        "x-action": "deleteComposition",
        "x-entityId": "params.id",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Compositions"],
        "operationId": "compositions-delete",
        "summary": "Delete",
        "x-sdk-interface": "compositions.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/compositions/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.compositions.delete({ id })"
        }]
      }
    },
    "/compositions/{id}/duplicate": {
      "post": {
        "x-action": "duplicateComposition",
        "x-entityId": "params.id",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Compositions"],
        "operationId": "compositions-duplicate",
        "summary": "Duplicate",
        "x-sdk-interface": "compositions.duplicate",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/compositions/${ID}/duplicate\""
        }, {
          "lang": "node.js",
          "source": "sdk.compositions.duplicate({ id })"
        }]
      }
    },
    "/contexts": {
      "post": {
        "x-action": "createContext",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.metadata.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Contexts"],
        "operationId": "contexts-create",
        "parameters": [{
          "in": "query",
          "name": "skipValidation",
          "schema": {
            "type": "string"
          },
          "description": "Skip validation"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "contexts.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"spec\\\":{\\\"data\\\":${DATA_OBJ}}}\" \\\n    \"https://g.codefresh.io/api/contexts?skipValidation=${SKIP_VALIDATION}\""
        }, {
          "lang": "node.js",
          "source": "sdk.contexts.create({ skipValidation }, {\n    spec: {\n        data: { ...DATA_OBJ }\n    }\n})"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Contexts"],
        "operationId": "contexts-list",
        "parameters": [{
          "in": "query",
          "name": "type",
          "schema": {
            "type": "string"
          },
          "description": "Type"
        }, {
          "in": "query",
          "name": "decrypt",
          "schema": {
            "type": "string"
          },
          "description": "Decrypt"
        }],
        "summary": "List",
        "x-sdk-interface": "contexts.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/contexts?type=${TYPE}&decrypt=${DECRYPT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.contexts.list({ type, decrypt })"
        }]
      }
    },
    "/contexts/{name}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Contexts"],
        "operationId": "contexts-get",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }, {
          "in": "query",
          "name": "decrypt",
          "schema": {
            "type": "string"
          },
          "description": "Decrypt"
        }],
        "summary": "Get",
        "x-sdk-interface": "contexts.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/contexts/${NAME}?decrypt=${DECRYPT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.contexts.get({ name, decrypt })"
        }]
      },
      "put": {
        "x-action": "updateContext",
        "x-entityIdPath": "params.name",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Contexts"],
        "operationId": "contexts-replace",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Replace",
        "x-sdk-interface": "contexts.replace",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"spec\\\":{\\\"data\\\":${DATA_OBJ}}}\" \\\n    \"https://g.codefresh.io/api/contexts/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.contexts.replace({ name }, {\n    spec: {\n        data: { ...DATA_OBJ }\n    }\n})"
        }]
      },
      "patch": {
        "x-action": "updateContext",
        "x-entityId": {
          "pathId": "params.name",
          "handlerId": "decodeContextName",
          "pathName": "params.name",
          "handlerName": "decodeContextName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Contexts"],
        "operationId": "contexts-patch",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Patch",
        "x-sdk-interface": "contexts.patch",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"spec\\\":{\\\"data\\\":${DATA_OBJ}}}\" \\\n    \"https://g.codefresh.io/api/contexts/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.contexts.patch({ name }, {\n    spec: {\n        data: { ...DATA_OBJ }\n    }\n})"
        }]
      },
      "delete": {
        "x-action": "deleteContext",
        "x-entityIdPath": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Contexts"],
        "operationId": "contexts-delete",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }],
        "summary": "Delete",
        "x-sdk-interface": "contexts.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/contexts/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.contexts.delete({ name })"
        }]
      }
    },
    "/contexts/{name}/default": {
      "patch": {
        "x-action": "updateContext",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Contexts"],
        "operationId": "contexts-default-patch",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spec": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "x-secure": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Patch",
        "x-sdk-interface": "contexts.default.patch",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"spec\\\":{\\\"data\\\":${DATA_OBJ}}}\" \\\n    \"https://g.codefresh.io/api/contexts/${NAME}/default\""
        }, {
          "lang": "node.js",
          "source": "sdk.contexts.default.patch({ name }, {\n    spec: {\n        data: { ...DATA_OBJ }\n    }\n})"
        }]
      }
    },
    "/customers/{customerId}/createAccount": {
      "post": {
        "x-action": "addNewAccount",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customers"],
        "operationId": "customers-add-new-account",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Add new account",
        "x-sdk-interface": "customers.addNewAccount",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/customers/${CUSTOMER_ID}/createAccount\""
        }, {
          "lang": "node.js",
          "source": "sdk.customers.addNewAccount({ customerId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/customers/{customerId}/{accountId}/updateAccountLimits": {
      "post": {
        "x-action": "updateAccountLimits",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customers"],
        "operationId": "customers-update-accounts-limits",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }, {
          "in": "path",
          "name": "accountId",
          "schema": {
            "type": "string"
          },
          "description": "Account ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update account limits",
        "x-sdk-interface": "customers.updateAccountLimits",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/customers/${CUSTOMER_ID}/${ACCOUNT_ID}/updateAccountLimits\""
        }, {
          "lang": "node.js",
          "source": "sdk.customers.updateAccountLimits({ customerId, accountId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/customers/{customerId}/{userId}/addCustomerAdmin": {
      "post": {
        "x-action": "addCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customers"],
        "operationId": "customers-add-customer-admin",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }, {
          "in": "path",
          "name": "userId",
          "schema": {
            "type": "string"
          },
          "description": "User ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Add customer admin",
        "x-sdk-interface": "customers.addCustomerAdmin",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/customers/${CUSTOMER_ID}/${USER_ID}/addCustomerAdmin\""
        }, {
          "lang": "node.js",
          "source": "sdk.customers.addCustomerAdmin({ customerId, userId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/customers/{customerId}/{userId}/removeCustomerAdmin": {
      "post": {
        "x-action": "removeCustomerAdmin",
        "x-entityId": "params.customerId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customers"],
        "operationId": "customers-remove-customer-admin",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer id",
          "required": true
        }, {
          "in": "path",
          "name": "userId",
          "schema": {
            "type": "string"
          },
          "description": "User id",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Remove customer admin",
        "x-sdk-interface": "customers.removeCustomerAdmin",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/customers/${CUSTOMER_ID}/${USER_ID}/removeCustomerAdmin\""
        }, {
          "lang": "node.js",
          "source": "sdk.customers.removeCustomerAdmin({ customerId, userId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/environments": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "envs-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "envs.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/environments\""
        }, {
          "lang": "node.js",
          "source": "sdk.envs.list()"
        }]
      }
    },
    "/environments/all/terminate": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "envs-terminate-all",
        "summary": "Terminate all",
        "parameters": [],
        "x-sdk-interface": "envs.terminateAll",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/environments/all/terminate\""
        }, {
          "lang": "node.js",
          "source": "sdk.envs.terminateAll()"
        }]
      }
    },
    "/environments/{id}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "envs-get",
        "parameters": [{
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Id"
        }],
        "summary": "Get",
        "x-sdk-interface": "envs.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/environments/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.envs.get({ id })"
        }]
      }
    },
    "/environments/{id}/pause": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "envs-pause",
        "summary": "Pause",
        "x-sdk-interface": "envs.pause",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/environments/${ID}/pause\""
        }, {
          "lang": "node.js",
          "source": "sdk.envs.pause({ id })"
        }]
      }
    },
    "/environments/{envId}/rename/{newName}": {
      "post": {
        "x-action": "renameRuntimeEnv",
        "x-entityId": {
          "pathId": "params.envId",
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "environments-rename-runtime-env",
        "parameters": [{
          "description": "The new name to assign to the environment",
          "in": "path",
          "name": "newName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "in": "path",
          "name": "envId",
          "schema": {
            "type": "string"
          },
          "description": "Runtime environment ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Rename runtime environment",
        "x-sdk-interface": "environments.renameRuntimeEnv",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/environments/${ENV_ID}/rename/${NEW_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.environments.renameRuntimeEnv({ newName, envId }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "get": {
        "parameters": [{
          "description": "The new name to assign to the environment",
          "in": "path",
          "name": "newName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "in": "path",
          "name": "envId",
          "schema": {
            "type": "object"
          },
          "description": "envId",
          "required": true
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "envs-rename",
        "summary": "Rename",
        "x-sdk-interface": "envs.rename",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/environments/${ENV_ID}/rename/${NEW_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.envs.rename({ newName, envId })"
        }]
      }
    },
    "/environments/{id}/start": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "envs-start",
        "summary": "Start",
        "x-sdk-interface": "envs.start",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/environments/${ID}/start\""
        }, {
          "lang": "node.js",
          "source": "sdk.envs.start({ id })"
        }]
      }
    },
    "/environments/{id}/status": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "envs-status",
        "summary": "Status",
        "x-sdk-interface": "envs.status",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/environments/${ID}/status\""
        }, {
          "lang": "node.js",
          "source": "sdk.envs.status({ id })"
        }]
      }
    },
    "/environments/{id}/stop": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "envs-stop",
        "summary": "Stop",
        "x-sdk-interface": "envs.stop",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/environments/${ID}/stop\""
        }, {
          "lang": "node.js",
          "source": "sdk.envs.stop({ id })"
        }]
      }
    },
    "/environments/{id}/terminate": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "envs-terminate",
        "summary": "Terminate",
        "x-sdk-interface": "envs.terminate",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/environments/${ID}/terminate\""
        }, {
          "lang": "node.js",
          "source": "sdk.envs.terminate({ id })"
        }]
      }
    },
    "/environments/{id}/unpause": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Environments"],
        "operationId": "envs-unpause",
        "summary": "Unpause",
        "x-sdk-interface": "envs.unpause",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/environments/${ID}/unpause\""
        }, {
          "lang": "node.js",
          "source": "sdk.envs.unpause({ id })"
        }]
      }
    },
    "/features/{accountId}": {
      "post": {
        "x-action": "addFeature",
        "x-entityId": {
          "pathName": "body.feature"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Features"],
        "operationId": "features-add",
        "parameters": [{
          "in": "path",
          "name": "accountId",
          "schema": {
            "type": "string"
          },
          "description": "Account ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Add feature",
        "x-sdk-interface": "features.add",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/features/${ACCOUNT_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.features.add({ accountId }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "get": {
        "parameters": [{
          "description": "The ID of the account to query for feature availability",
          "in": "path",
          "name": "accountId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Features"],
        "operationId": "features-account",
        "summary": "Account",
        "x-sdk-interface": "features.account",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/features/${ACCOUNT_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.features.account({ accountId })"
        }]
      }
    },
    "/form-metadata/create": {
      "post": {
        "x-action": "createFormMetadata",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["form-metadata"],
        "operationId": "form-metadata-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create form metadata",
        "x-sdk-interface": "formMetadata.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/form-metadata/create\""
        }, {
          "lang": "node.js",
          "source": "sdk.formMetadata.create({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      }
    },
    "/form-metadata/{name}/update": {
      "put": {
        "x-action": "updateFormMetadata",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["form-metadata"],
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "metadata name"
        }],
        "operationId": "form-metadata-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update form metadata",
        "x-sdk-interface": "formMetadata.update",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/form-metadata/${NAME}/update\""
        }, {
          "lang": "node.js",
          "source": "sdk.formMetadata.update({ name }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/form-metadata/{name}": {
      "delete": {
        "x-action": "deleteFormMetadata",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["form-metadata"],
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "metadata name"
        }],
        "operationId": "form-metadata-delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Delete form metadata",
        "x-sdk-interface": "formMetadata.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/form-metadata/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.formMetadata.delete({ name }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/form-metadata/activate/{groupId}/{name}": {
      "patch": {
        "x-action": "setActiveFormMetadata",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["form-metadata"],
        "parameters": [{
          "in": "path",
          "name": "groupId",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "metadata group name"
        }, {
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "metadata name"
        }],
        "operationId": "form-metadata-set-active",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Set active form metadata",
        "x-sdk-interface": "formMetadata.setActive",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/form-metadata/activate/${GROUP_ID}/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.formMetadata.setActive({ groupId, name }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/helm/boards": {
      "post": {
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-action": "createHelmBoard",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Boards"],
        "operationId": "helm-boards-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "helm.boards.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"filter\\\":\\\"${FILTER_STR}\\\",\\\"name\\\":\\\"${NAME_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/helm/boards\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.boards.create({\n    filter: `${FILTER_STR}`,\n    name: `${NAME_STR}`\n})"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "properties": {
                      "__v": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "accountId": {
                        "type": "string"
                      },
                      "filter": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Array of Board objects"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Boards"],
        "operationId": "helm-boards-list",
        "summary": "List",
        "parameters": [],
        "x-sdk-interface": "helm.boards.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/boards\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.boards.list()"
        }]
      },
      "delete": {
        "x-action": "deleteAllBoards",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Boards"],
        "operationId": "helm-boards-delete-all",
        "summary": "Delete all",
        "parameters": [],
        "x-sdk-interface": "helm.boards.deleteAll",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/boards\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.boards.deleteAll()"
        }]
      }
    },
    "/helm/boards/name/{name}": {
      "get": {
        "parameters": [{
          "description": "name of a board",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "include sections in response",
          "in": "query",
          "name": "columns",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Boards"],
        "operationId": "helm-boards-get-by-name",
        "summary": "Get by name",
        "x-sdk-interface": "helm.boards.getByName",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/boards/name/${NAME}?columns=${COLUMNS}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.boards.getByName({ name, columns })"
        }]
      }
    },
    "/helm/boards/sections": {
      "post": {
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "x-action": "createHelmSection",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Section object"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Sections"],
        "operationId": "helm-sections-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "boardId": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "index": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "section": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "helm.sections.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"boardId\\\":\\\"${BOARD_ID_STR}\\\",\\\"color\\\":\\\"${COLOR_STR}\\\",\\\"index\\\":${INDEX_NUM},\\\"name\\\":\\\"${NAME_STR}\\\",\\\"section\\\":\\\"${SECTION_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/helm/boards/sections\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.sections.create({\n    boardId: `${BOARD_ID_STR}`,\n    color: `${COLOR_STR}`,\n    index: INDEX_NUM,\n    name: `${NAME_STR}`,\n    section: `${SECTION_STR}`\n})"
        }]
      }
    },
    "/helm/boards/sections/reorder": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Sections"],
        "operationId": "helm-sections-reorder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "[sectionId]": {
                    "example": "<section index>",
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Reorder",
        "parameters": [],
        "x-sdk-interface": "helm.sections.reorder",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"[sectionId]\\\":${SECTION_ID_NUM}}\" \\\n    \"https://g.codefresh.io/api/helm/boards/sections/reorder\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.sections.reorder({\n    [sectionId]: SECTION_ID_NUM\n})"
        }]
      }
    },
    "/helm/boards/sections/{id}": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Sections"],
        "operationId": "helm-sections-get",
        "summary": "Get",
        "x-sdk-interface": "helm.sections.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/boards/sections/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.sections.get({ id })"
        }]
      },
      "put": {
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-action": "updateHelmSection",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Sections"],
        "operationId": "helm-sections-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "boardId": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "index": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "section": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "helm.sections.update",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"boardId\\\":\\\"${BOARD_ID_STR}\\\",\\\"color\\\":\\\"${COLOR_STR}\\\",\\\"index\\\":${INDEX_NUM},\\\"name\\\":\\\"${NAME_STR}\\\",\\\"section\\\":\\\"${SECTION_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/helm/boards/sections/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.sections.update({ id }, {\n    boardId: `${BOARD_ID_STR}`,\n    color: `${COLOR_STR}`,\n    index: INDEX_NUM,\n    name: `${NAME_STR}`,\n    section: `${SECTION_STR}`\n})"
        }]
      },
      "patch": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Sections"],
        "operationId": "helm-sections-patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "boardId": {
                    "type": "string"
                  },
                  "color": {
                    "type": "string"
                  },
                  "index": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "section": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Patch",
        "x-sdk-interface": "helm.sections.patch",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"boardId\\\":\\\"${BOARD_ID_STR}\\\",\\\"color\\\":\\\"${COLOR_STR}\\\",\\\"index\\\":${INDEX_NUM},\\\"name\\\":\\\"${NAME_STR}\\\",\\\"section\\\":\\\"${SECTION_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/helm/boards/sections/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.sections.patch({ id }, {\n    boardId: `${BOARD_ID_STR}`,\n    color: `${COLOR_STR}`,\n    index: INDEX_NUM,\n    name: `${NAME_STR}`,\n    section: `${SECTION_STR}`\n})"
        }]
      },
      "delete": {
        "x-entityId": "body.id",
        "x-action": "deleteHelmSection",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Sections"],
        "operationId": "helm-sections-delete",
        "summary": "Delete",
        "x-sdk-interface": "helm.sections.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/boards/sections/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.sections.delete({ id })"
        }]
      }
    },
    "/helm/boards/{boardId}/sections": {
      "get": {
        "parameters": [{
          "description": "id of a board",
          "in": "path",
          "name": "boardId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "boardId": {
                      "type": "string"
                    },
                    "color": {
                      "type": "string"
                    },
                    "index": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "section": {
                      "type": "string"
                    },
                    "type": {
                      "example": "Helm",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Section object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Sections"],
        "operationId": "helm-sections-list",
        "summary": "List",
        "x-sdk-interface": "helm.sections.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/boards/${BOARD_ID}/sections\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.sections.list({ boardId })"
        }]
      },
      "delete": {
        "parameters": [{
          "description": "id of a board",
          "in": "path",
          "name": "boardId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "n": {
                      "example": 2,
                      "type": "integer"
                    },
                    "ok": {
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Result of deleting"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Sections"],
        "operationId": "helm-sections-delete-all",
        "summary": "Delete all",
        "x-sdk-interface": "helm.sections.deleteAll",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/boards/${BOARD_ID}/sections\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.sections.deleteAll({ boardId })"
        }]
      }
    },
    "/helm/boards/{boardId}/sections/name/{name}": {
      "get": {
        "parameters": [{
          "description": "id of a board",
          "in": "path",
          "name": "boardId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "name of a section",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Sections"],
        "operationId": "helm-sections-get-by-name",
        "summary": "Get by name",
        "x-sdk-interface": "helm.sections.getByName",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/boards/${BOARD_ID}/sections/name/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.sections.getByName({ boardId, name })"
        }]
      }
    },
    "/helm/boards/{id}": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Boards"],
        "operationId": "helm-boards-get",
        "summary": "Get",
        "x-sdk-interface": "helm.boards.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/boards/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.boards.get({ id })"
        }]
      },
      "put": {
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-action": "editHelmBoard",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Boards"],
        "operationId": "helm-boards-update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Update",
        "x-sdk-interface": "helm.boards.update",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"filter\\\":\\\"${FILTER_STR}\\\",\\\"name\\\":\\\"${NAME_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/helm/boards/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.boards.update({ id }, {\n    filter: `${FILTER_STR}`,\n    name: `${NAME_STR}`\n})"
        }]
      },
      "patch": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Boards"],
        "operationId": "helm-boards-patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "filter": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "summary": "Patch",
        "x-sdk-interface": "helm.boards.patch",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"filter\\\":\\\"${FILTER_STR}\\\",\\\"name\\\":\\\"${NAME_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/helm/boards/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.boards.patch({ id }, {\n    filter: `${FILTER_STR}`,\n    name: `${NAME_STR}`\n})"
        }]
      },
      "delete": {
        "x-entityId": "params.id",
        "x-action": "deleteHelmBoard",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "__v": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "accountId": {
                      "type": "string"
                    },
                    "filter": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Board object"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "status": {
                      "example": "Error",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Error"
          }
        },
        "tags": ["Helm Boards"],
        "operationId": "helm-boards-delete",
        "summary": "Delete",
        "x-sdk-interface": "helm.boards.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/boards/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.boards.delete({ id })"
        }]
      }
    },
    "/helm/repos": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Helm Repos"],
        "operationId": "helm-repos-create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "helm.repos.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/helm/repos\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.repos.create({ ...REQUEST_BODY_OBJ })"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Helm Repos"],
        "operationId": "helm-repos-list",
        "parameters": [{
          "in": "query",
          "name": "query",
          "schema": {
            "type": "string"
          },
          "description": "Query"
        }],
        "summary": "List",
        "x-sdk-interface": "helm.repos.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/repos?query=${QUERY}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.repos.list({ query })"
        }]
      }
    },
    "/helm/repos/{name}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Helm Repos"],
        "operationId": "helm-repos-get",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }],
        "summary": "Get",
        "x-sdk-interface": "helm.repos.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/repos/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.repos.get({ name })"
        }]
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Helm Repos"],
        "operationId": "helm-repos-update",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update",
        "x-sdk-interface": "helm.repos.update",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/helm/repos/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.repos.update({ name }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Helm Repos"],
        "operationId": "helm-repos-delete",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }],
        "summary": "Delete",
        "x-sdk-interface": "helm.repos.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/helm/repos/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.repos.delete({ name })"
        }]
      }
    },
    "/hermes/events": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers Events"],
        "operationId": "triggers-events-create",
        "parameters": [{
          "in": "query",
          "name": "public",
          "schema": {
            "type": "string"
          },
          "description": "Public"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "triggers.events.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/hermes/events?public=${PUBLIC}\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.events.create({ public }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers Events"],
        "operationId": "triggers-events-list",
        "parameters": [{
          "in": "query",
          "name": "type",
          "schema": {
            "type": "string"
          },
          "description": "Type"
        }, {
          "in": "query",
          "name": "kind",
          "schema": {
            "type": "string"
          },
          "description": "Kind"
        }, {
          "in": "query",
          "name": "filter",
          "schema": {
            "type": "string"
          },
          "description": "Filter"
        }, {
          "in": "query",
          "name": "public",
          "schema": {
            "type": "string"
          },
          "description": "Public"
        }],
        "summary": "List",
        "x-sdk-interface": "triggers.events.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/hermes/events?type=${TYPE}&kind=${KIND}&filter=${FILTER}&public=${PUBLIC}\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.events.list({\n    type,\n    kind,\n    filter,\n    public\n})"
        }]
      }
    },
    "/hermes/events/{event}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers Events"],
        "operationId": "triggers-events-get",
        "parameters": [{
          "in": "path",
          "name": "event",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Event"
        }],
        "summary": "Get",
        "x-sdk-interface": "triggers.events.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/hermes/events/${EVENT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.events.get({ event })"
        }]
      }
    },
    "/hermes/events/{event}/{context}": {
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers Events"],
        "operationId": "triggers-events-delete",
        "parameters": [{
          "in": "path",
          "name": "event",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Event"
        }, {
          "in": "path",
          "name": "context",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Context"
        }],
        "summary": "Delete",
        "x-sdk-interface": "triggers.events.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/hermes/events/${EVENT}/${CONTEXT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.events.delete({ event, context })"
        }]
      }
    },
    "/hermes/triggers": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers"],
        "operationId": "triggers-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "triggers.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/hermes/triggers\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.list()"
        }]
      }
    },
    "/hermes/triggers/event/{event}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers"],
        "operationId": "triggers-get-event-triggers",
        "parameters": [{
          "in": "path",
          "name": "event",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Event"
        }],
        "summary": "Get event triggers",
        "x-sdk-interface": "triggers.getEventTriggers",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/hermes/triggers/event/${EVENT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.getEventTriggers({ event })"
        }]
      }
    },
    "/hermes/triggers/pipeline/{pipeline}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers"],
        "operationId": "triggers-get-pipeline-triggers",
        "parameters": [{
          "in": "path",
          "name": "pipeline",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Pipeline"
        }],
        "summary": "Get pipeline triggers",
        "x-sdk-interface": "triggers.getPipelineTriggers",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/hermes/triggers/pipeline/${PIPELINE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.getPipelineTriggers({ pipeline })"
        }]
      }
    },
    "/hermes/triggers/{event}/{pipeline}": {
      "post": {
        "x-action": "createTrigger",
        "x-entityId": "params.pipeline",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers"],
        "operationId": "triggers-create",
        "parameters": [{
          "in": "path",
          "name": "event",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Event"
        }, {
          "in": "path",
          "name": "pipeline",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Pipeline"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "triggers.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/hermes/triggers/${EVENT}/${PIPELINE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.create({ event, pipeline }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "delete": {
        "x-action": "deleteTrigger",
        "x-entityId": "params.pipeline",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers"],
        "operationId": "triggers-delete",
        "parameters": [{
          "in": "path",
          "name": "event",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Event"
        }, {
          "in": "path",
          "name": "pipeline",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Pipeline"
        }],
        "summary": "Delete",
        "x-sdk-interface": "triggers.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/hermes/triggers/${EVENT}/${PIPELINE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.delete({ event, pipeline })"
        }]
      }
    },
    "/hermes/types": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers Types"],
        "operationId": "triggers-types-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "triggers.types.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/hermes/types\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.types.list()"
        }]
      }
    },
    "/hermes/types/{type}/{kind}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Triggers Types"],
        "operationId": "triggers-types-get",
        "parameters": [{
          "in": "path",
          "name": "type",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Type"
        }, {
          "in": "path",
          "name": "kind",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Kind"
        }],
        "summary": "Get",
        "x-sdk-interface": "triggers.types.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/hermes/types/${TYPE}/${KIND}\""
        }, {
          "lang": "node.js",
          "source": "sdk.triggers.types.get({ type, kind })"
        }]
      }
    },
    "/images": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Images"],
        "operationId": "images-list",
        "parameters": [{
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "string"
          },
          "description": "Limit"
        }, {
          "in": "query",
          "name": "offset",
          "schema": {
            "type": "string"
          },
          "description": "Offset"
        }, {
          "in": "query",
          "name": "metadata",
          "schema": {
            "type": "string"
          },
          "description": "Metadata"
        }, {
          "in": "query",
          "name": "tag",
          "schema": {
            "type": "string"
          },
          "description": "Tag"
        }, {
          "in": "query",
          "name": "type",
          "schema": {
            "type": "string"
          },
          "description": "Type"
        }, {
          "in": "query",
          "name": "branch",
          "schema": {
            "type": "string"
          },
          "description": "Branch"
        }, {
          "in": "query",
          "name": "imageDisplayNameRegex",
          "schema": {
            "type": "string"
          },
          "description": "Image display name regex"
        }, {
          "in": "query",
          "name": "select",
          "schema": {
            "type": "string"
          },
          "description": "Select"
        }, {
          "in": "query",
          "name": "sha",
          "schema": {
            "type": "string"
          },
          "description": "Sha"
        }],
        "summary": "List",
        "x-sdk-interface": "images.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/images?limit=${LIMIT}&offset=${OFFSET}&metadata=${METADATA}&tag=${TAG}&type=${TYPE}&branch=${BRANCH}&imageDisplayNameRegex=${IMAGE_DISPLAY_NAME_REGEX}&select=${SELECT}&sha=${SHA}\""
        }, {
          "lang": "node.js",
          "source": "sdk.images.list({\n    limit,\n    offset,\n    metadata,\n    tag,\n    type,\n    branch,\n    imageDisplayNameRegex,\n    select,\n    sha\n})"
        }]
      }
    },
    "/images/external": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Images"],
        "operationId": "images-add-from-external-source",
        "summary": "Add from external source",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "Id": {
                    "type": "string"
                  },
                  "Digest": {
                    "type": "string"
                  },
                  "Image": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "x-sdk-interface": "images.addFromExternalSource",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"Id\\\":\\\"${ID_STR}\\\",\\\"Digest\\\":\\\"${DIGEST_STR}\\\",\\\"Image\\\":\\\"${IMAGE_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/images/external\""
        }, {
          "lang": "node.js",
          "source": "sdk.images.addFromExternalSource({\n    Id: `${ID_STR}`,\n    Digest: `${DIGEST_STR}`,\n    Image: `${IMAGE_STR}`\n})"
        }]
      },
      "parameters": []
    },
    "/images/{imageId}/promote": {
      "post": {
        "x-entityId": {
          "pathId": "params.imageId",
          "pathName": "body.imageName"
        },
        "x-action": "promoteImage",
        "x-sdk-interface": "images.promote",
        "operationId": "images-promote",
        "summary": "Promote an image",
        "parameters": [{
          "description": "id of the Image",
          "in": "path",
          "name": "imageId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": ["Images"],
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/images/${IMAGE_ID}/promote\""
        }, {
          "lang": "node.js",
          "source": "sdk.images.promote({ imageId })"
        }]
      }
    },
    "/images/{id}": {
      "get": {
        "parameters": [{
          "description": "id of the Image",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Images"],
        "operationId": "images-get",
        "summary": "Get",
        "x-sdk-interface": "images.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/images/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.images.get({ id })"
        }]
      }
    },
    "/images/{id}/tags": {
      "get": {
        "parameters": [{
          "description": "name of the image",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Images"],
        "operationId": "images-get-tags",
        "summary": "Get tags",
        "x-sdk-interface": "images.getTags",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/images/${ID}/tags\""
        }, {
          "lang": "node.js",
          "source": "sdk.images.getTags({ id })"
        }]
      }
    },
    "/images/{imageId}/tag/{tagName}": {
      "post": {
        "x-action": "addTagToImage",
        "x-entityId": "params.imageId",
        "parameters": [{
          "description": "image ObjectId",
          "in": "path",
          "name": "imageId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "tag",
          "in": "path",
          "name": "tagName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Images"],
        "operationId": "images-tag",
        "summary": "Tag",
        "x-sdk-interface": "images.tag",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/images/${IMAGE_ID}/tag/${TAG_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.images.tag({ imageId, tagName })"
        }]
      },
      "delete": {
        "x-action": "imageTagDeleted",
        "x-entityId": "params.imageId",
        "parameters": [{
          "description": "tag ObjectId",
          "in": "path",
          "name": "tagName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "in": "path",
          "name": "imageId",
          "schema": {
            "type": "object"
          },
          "description": "imageId",
          "required": true
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Images"],
        "operationId": "images-untag",
        "summary": "Untag",
        "x-sdk-interface": "images.untag",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/images/${IMAGE_ID}/tag/${TAG_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.images.untag({ tagName, imageId })"
        }]
      }
    },
    "/images/{dockerImageId}/metadata": {
      "post": {
        "parameters": [{
          "description": "id of the Image (from docker inspect)",
          "in": "path",
          "name": "dockerImageId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Images"],
        "operationId": "images-upsert-metadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "CF_QUALITY": {
                    "default": true,
                    "type": "boolean"
                  },
                  "comment": {
                    "default": "image for qa",
                    "type": "string"
                  },
                  "coverage": {
                    "default": "60%",
                    "type": "string"
                  },
                  "failed_tests": {
                    "default": 7,
                    "type": "integer"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Upsert metadata",
        "x-sdk-interface": "images.upsertMetadata",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"CF_QUALITY\\\":${CF_QUALITY_BOOL},\\\"comment\\\":\\\"${COMMENT_STR}\\\",\\\"coverage\\\":\\\"${COVERAGE_STR}\\\",\\\"failed_tests\\\":${FAILED_TESTS_NUM}}\" \\\n    \"https://g.codefresh.io/api/images/${DOCKER_IMAGE_ID}/metadata\""
        }, {
          "lang": "node.js",
          "source": "sdk.images.upsertMetadata({ dockerImageId }, {\n    CF_QUALITY: CF_QUALITY_BOOL,\n    comment: `${COMMENT_STR}`,\n    coverage: `${COVERAGE_STR}`,\n    failed_tests: FAILED_TESTS_NUM\n})"
        }]
      },
      "get": {
        "parameters": [{
          "description": "id of the Image (from docker inspect)",
          "in": "path",
          "name": "dockerImageId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Images"],
        "operationId": "images-get-metadata",
        "summary": "Get metadata",
        "x-sdk-interface": "images.getMetadata",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/images/${DOCKER_IMAGE_ID}/metadata\""
        }, {
          "lang": "node.js",
          "source": "sdk.images.getMetadata({ dockerImageId })"
        }]
      }
    },
    "/images/{dockerImageId}/metadata/{keyName}": {
      "delete": {
        "parameters": [{
          "description": "id of the Image from docker inspect",
          "in": "path",
          "name": "dockerImageId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "name of the metadata key",
          "in": "path",
          "name": "keyName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Images"],
        "operationId": "images-delete-metadata",
        "summary": "Delete metadata",
        "x-sdk-interface": "images.deleteMetadata",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/images/${DOCKER_IMAGE_ID}/metadata/${KEY_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.images.deleteMetadata({ dockerImageId, keyName })"
        }]
      }
    },
    "/idp/account": {
      "post": {
        "x-action": "createAccountIdp",
        "x-audit": {
          "name": {
            "path": "body.displayName",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["account"],
        "operationId": "account-create-idp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": ["clientName", "clientType", "displayName", "accounts", "customerId"]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create account IDP",
        "x-sdk-interface": "account.createIdp",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/idp/account\""
        }, {
          "lang": "node.js",
          "source": "sdk.account.createIdp({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      },
      "put": {
        "x-action": "updateAccountIdp",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.displayName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["account"],
        "operationId": "account-update-idp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": ["_id", "clientName", "clientType", "displayName", "accounts", "customerId"]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update IDP",
        "x-sdk-interface": "account.updateIdp",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/idp/account\""
        }, {
          "lang": "node.js",
          "source": "sdk.account.updateIdp({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      },
      "delete": {
        "x-action": "deleteAccountIdp",
        "x-entityId": {
          "pathId": "body.id",
          "pathName": "body.displayName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["account"],
        "operationId": "account-delete-idp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": ["_id", "clientName", "clientType", "displayName", "accounts", "customerId"]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Delete IDP",
        "x-sdk-interface": "account.deleteIdp",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/idp/account\""
        }, {
          "lang": "node.js",
          "source": "sdk.account.deleteIdp({ ...REQUEST_BODY_OBJ })"
        }],
        "parameters": []
      }
    },
    "/idp/customer/{customerId}": {
      "post": {
        "x-action": "createCustomerIdp",
        "x-audit": {
          "name": {
            "path": "body.displayName",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customer"],
        "operationId": "customer-create-idp",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": ["clientName", "clientType", "displayName", "accounts", "customerId"]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create IDP",
        "x-sdk-interface": "customer.createIdp",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/idp/customer/${CUSTOMER_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.customer.createIdp({ customerId }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "put": {
        "x-action": "updateCustomerIdp",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "body.displayName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customer"],
        "operationId": "customer-update-idp",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "x-allowed": {
                  "body": ["_id", "clientName", "clientType", "displayName", "accounts", "customerId"]
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Update IDP",
        "x-sdk-interface": "customer.updateIdp",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/idp/customer/${CUSTOMER_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.customer.updateIdp({ customerId }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "delete": {
        "x-action": "deleteCustomerIdp",
        "x-entityId": "body.id",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customer"],
        "operationId": "customer-delete-idp",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }],
        "summary": "Delete IDP",
        "x-sdk-interface": "customer.deleteIdp",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/idp/customer/${CUSTOMER_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.customer.deleteIdp({ customerId })"
        }]
      }
    },
    "/idp/customer/{customerId}/addAccounts": {
      "post": {
        "x-action": "addAccountToCustomerIdp",
        "x-entityId": "body.ssoConfigId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customer"],
        "operationId": "customer-add-account-to-idp",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Add account to IDP",
        "x-sdk-interface": "customer.AddAccountToIdp",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/idp/customer/${CUSTOMER_ID}/addAccounts\""
        }, {
          "lang": "node.js",
          "source": "sdk.customer.AddAccountToIdp({ customerId }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/idp/customer/{customerId}/deleteAccounts": {
      "delete": {
        "x-action": "removeAccountFromCustomerIdp",
        "x-entityId": "body.ssoConfigId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["customer"],
        "operationId": "customer-remove-account-from-idp",
        "parameters": [{
          "in": "path",
          "name": "customerId",
          "schema": {
            "type": "string"
          },
          "description": "Customer ID",
          "required": true
        }],
        "summary": "Remove account from customer idp",
        "x-sdk-interface": "customer.removeAccountFromIdp",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/idp/customer/${CUSTOMER_ID}/deleteAccounts\""
        }, {
          "lang": "node.js",
          "source": "sdk.customer.removeAccountFromIdp({ customerId })"
        }]
      }
    },
    "/kubernetes/test": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-test-credentials",
        "parameters": [],
        "summary": "Test Cluster Credentials",
        "x-sdk-interface": "kubernetes.testClusterCredentials",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.testClusterCredentials"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes/test\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.testClusterCredentials()"
        }]
      }
    },
    "/kubernetes/test/{selector}": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-test-existed-credentials",
        "parameters": [{
          "in": "path",
          "name": "selector",
          "schema": {
            "type": "string"
          },
          "description": "cluster selector",
          "required": true
        }],
        "summary": "Test Existed Cluster Credentials",
        "x-sdk-interface": "kubernetes.testExistedClusterCredentials",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.testExistedClusterCredentials"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes/test/${SELECTOR}\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.testExistedClusterCredentials({ selector })"
        }]
      }
    },
    "/kubernetes/services": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-list-services",
        "parameters": [],
        "summary": "List services",
        "x-sdk-interface": "kubernetes.services.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.bf-supported.getServices"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes/services\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.services.list()"
        }]
      }
    },
    "/kubernetes/namespaces": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-list-namespaces",
        "parameters": [],
        "summary": "List namespaces",
        "x-sdk-interface": "kubernetes.namespaces.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.bf-supported.getNamespaces"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes/namespaces\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.namespaces.list()"
        }]
      }
    },
    "/kubernetes/podGroups": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-list-pod-groups",
        "parameters": [],
        "summary": "List pod groups",
        "x-sdk-interface": "kubernetes.podGroups.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.bf-supported.getPodGroups"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes/podGroups\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.podGroups.list()"
        }]
      }
    },
    "/kubernetes/deployments/{name}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-describe-deployment",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "description": "deployment name",
          "required": true
        }],
        "summary": "Describe deployment",
        "x-sdk-interface": "kubernetes.deployments.describe",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.bf-supported.describeDeployment"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes/deployments/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.deployments.describe({ name })"
        }]
      }
    },
    "/kubernetes/releases": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-list-releases",
        "parameters": [],
        "summary": "List helm releases",
        "x-sdk-interface": "kubernetes.releases.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.bf-supported.getHelmReleases"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes/releases\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.releases.list()"
        }]
      }
    },
    "/kubernetes/releases/{releaseName}/delete": {
      "post": {
        "x-entityId": {
          "pathName": "params.releaseName"
        },
        "x-action": "helmReleaseDeleted",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Helm Releases", "Kubernetes"],
        "operationId": "helm-releases-delete",
        "parameters": [{
          "in": "path",
          "name": "releaseName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Release name"
        }, {
          "in": "query",
          "name": "selector",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Selector"
        }, {
          "in": "query",
          "name": "tillerNamespace",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Tiller namespace"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Delete",
        "x-sdk-interface": "helm.releases.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": ["kubernetes.extendRequestWithKubeManager", "kubernetes.extendRequestWithTillerVersion"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.deleteRelease"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/kubernetes/releases/${RELEASE_NAME}/delete?selector=${SELECTOR}&tillerNamespace=${TILLER_NAMESPACE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.releases.delete({ releaseName, selector, tillerNamespace }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/kubernetes/releases/{releaseName}/test": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Helm Releases", "Kubernetes"],
        "operationId": "helm-releases-test",
        "parameters": [{
          "in": "path",
          "name": "releaseName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Release name"
        }, {
          "in": "query",
          "name": "selector",
          "schema": {
            "type": "string"
          },
          "description": "Selector"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Test",
        "x-sdk-interface": "helm.releases.test",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster"
            }
          },
          "preMiddleware": ["kubernetes.resolveClustersFromQuery", "kubernetes.extendRequestWithKubeManager", "kubernetes.extendRequestWithTillerVersion"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.testRelease"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/kubernetes/releases/${RELEASE_NAME}/test?selector=${SELECTOR}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.releases.test({ releaseName, selector }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/kubernetes/secrets/imagePullSecret": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-generate-image-pull-secret",
        "parameters": [{
          "in": "query",
          "name": "namespace",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Namespace"
        }, {
          "in": "query",
          "name": "selector",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Selector"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Generate image pull secret",
        "x-sdk-interface": "kubernetes.generateImagePullSecret",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": ["kubernetes.resolveClustersFromQuery", "kubernetes.extendBodyWithAccountRegistries"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.callService"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/kubernetes/secrets/imagePullSecret?namespace=${NAMESPACE}&selector=${SELECTOR}\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.generateImagePullSecret({ namespace, selector }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/kubernetes/chart/install": {
      "post": {
        "x-entityId": {
          "pathName": "body.releaseName"
        },
        "x-action": "installHelmRelease",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Helm Charts", "Kubernetes"],
        "operationId": "helm-charts-install",
        "parameters": [{
          "in": "query",
          "name": "selector",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Selector"
        }, {
          "in": "query",
          "name": "tillerNamespace",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Tiller namespace"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Install",
        "x-sdk-interface": "helm.charts.install",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": ["kubernetes.extendRequestWithKubeManager", "kubernetes.extendRequestWithTillerVersion"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.installChart"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/kubernetes/chart/install?selector=${SELECTOR}&tillerNamespace=${TILLER_NAMESPACE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.charts.install({ selector, tillerNamespace }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/kubernetes/chart/promote": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Helm Charts"],
        "operationId": "helm-charts-promote",
        "parameters": [{
          "in": "query",
          "name": "selector",
          "schema": {
            "type": "string"
          },
          "description": "Selector"
        }, {
          "in": "query",
          "name": "tillerNamespace",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Tiller namespace"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Promote",
        "x-sdk-interface": "helm.charts.promote",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromBoards", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": ["kubernetes.extendRequestWithKubeManager", "kubernetes.extendRequestWithTillerVersion"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.promoteChart"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/kubernetes/chart/promote?selector=${SELECTOR}&tillerNamespace=${TILLER_NAMESPACE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.helm.charts.promote({ selector, tillerNamespace }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/kubernetes/rollback/{release}/{revision}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-rollback-release",
        "parameters": [{
          "in": "path",
          "name": "release",
          "schema": {
            "type": "string"
          },
          "description": "release",
          "required": true
        }, {
          "in": "path",
          "name": "revision",
          "schema": {
            "type": "string"
          },
          "description": "revision",
          "required": true
        }, {
          "in": "query",
          "name": "selector",
          "schema": {
            "type": "string"
          },
          "description": "Selector"
        }, {
          "in": "query",
          "name": "tillerNamespace",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Tiller namespace"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Promote",
        "x-sdk-interface": "kubernetes.rollback",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes",
              "action": "update"
            }
          },
          "preMiddleware": ["kubernetes.extendRequestWithKubeManager", "kubernetes.extendRequestWithTillerVersion"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.rollback"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/kubernetes/rollback/${RELEASE}/${REVISION}?selector=${SELECTOR}&tillerNamespace=${TILLER_NAMESPACE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.rollback({\n    release,\n    revision,\n    selector,\n    tillerNamespace\n}, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/kubernetes*": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-proxy-post",
        "parameters": [],
        "summary": "Proxy post",
        "x-sdk-interface": "kubernetes.proxyPost",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.callService"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes*\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.proxyPost()"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-proxy-get",
        "parameters": [],
        "summary": "Proxy get",
        "x-sdk-interface": "kubernetes.proxyGet",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.callService"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes*\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.proxyGet()"
        }]
      },
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Clusters"],
        "operationId": "kubernetes-proxy-put",
        "parameters": [],
        "summary": "Proxy put",
        "x-sdk-interface": "kubernetes.proxyPut",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.callService"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes*\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.proxyPut()"
        }]
      },
      "patch": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-proxy-patch",
        "parameters": [],
        "summary": "Proxy patch",
        "x-sdk-interface": "kubernetes.proxyPatch",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.callService"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes*\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.proxyPatch()"
        }]
      },
      "delete": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-proxy-delete",
        "parameters": [],
        "summary": "Proxy delete",
        "x-sdk-interface": "kubernetes.proxyDelete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.callService"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes*\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.proxyDelete()"
        }]
      },
      "head": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-proxy-head",
        "parameters": [],
        "summary": "Proxy head",
        "x-sdk-interface": "kubernetes.proxyHead",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.callService"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X HEAD \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes*\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.proxyHead()"
        }]
      },
      "options": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Kubernetes"],
        "operationId": "kubernetes-proxy-options",
        "parameters": [],
        "summary": "Proxy options",
        "x-sdk-interface": "kubernetes.proxyOptions",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated", "kubernetes.resolveClustersFromQuery"],
            "acl": {
              "resource": "cluster",
              "abac": true,
              "abacSource": "kubernetes"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "kubernetes.callService"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X OPTIONS \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/kubernetes*\""
        }, {
          "lang": "node.js",
          "source": "sdk.kubernetes.proxyOptions()"
        }]
      }
    },
    "/charts/{repo}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["charts"],
        "operationId": "charts-list",
        "parameters": [{
          "in": "path",
          "name": "repo",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "Repo"
        }],
        "summary": "Get charts by repo",
        "x-sdk-interface": "charts.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/charts/${REPO}\""
        }, {
          "lang": "node.js",
          "source": "sdk.charts.list({ repo })"
        }]
      }
    },
    "/pipelines": {
      "post": {
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "metadata.id",
            "source": "res"
          }
        },
        "x-action": "createPipeline",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "pipelines.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "pipelines.createPipeline"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/pipelines\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.create({ ...REQUEST_BODY_OBJ })"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "parameters": [{
          "name": "offset",
          "in": "query",
          "schema": {
            "type": "integer"
          },
          "description": "Offset"
        }, {
          "name": "id",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "Id"
        }, {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "string"
          },
          "description": "Limit"
        }, {
          "in": "query",
          "name": "labels",
          "schema": {
            "type": "string"
          },
          "description": "Labels"
        }, {
          "in": "query",
          "name": "projectId",
          "schema": {
            "type": "string"
          },
          "description": "project id"
        }],
        "operationId": "pipelines-list",
        "summary": "List",
        "x-sdk-interface": "pipelines.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "cache": {
            "entity": "pipelines",
            "type": "list",
            "evict": [{
              "event": "pipeline.updated",
              "identifiers": ["aggregateId", "props.metadata.name"],
              "identity": "accountId"
            }, {
              "event": "pipeline.created",
              "identifiers": ["aggregateId", "props.metadata.name"],
              "identity": "accountId"
            }, {
              "event": "pipeline.deleted",
              "identifiers": ["aggregateId", "props.metadata.name"],
              "identity": "accountId"
            }]
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.getAllAccountPipelines"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines?offset=${OFFSET}&id=${ID}&limit=${LIMIT}&labels=${LABELS}&projectId=${PROJECT_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.list({\n    offset,\n    id,\n    limit,\n    labels,\n    projectId\n})"
        }]
      }
    },
    "/pipelines/templates": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-get-templates",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Get templates",
        "x-sdk-interface": "pipelines.getTemplates",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.getTemplates"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/pipelines/templates\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.getTemplates({ ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/pipelines/exist": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-exist",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Pipeline exist",
        "x-sdk-interface": "pipelines.pipelinesExist",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "disableAbac": true,
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.isPipelinesExist"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/pipelines/exist\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.pipelinesExist({ ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/pipelines/analyze": {
      "post": {
        "x-audit": {
          "name": {
            "path": "body.repo.repoName",
            "source": "req"
          },
          "id": {
            "path": "body.repo.repoName",
            "source": "res"
          }
        },
        "x-action": "analyzeRepo",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-analyze",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Analyze pipeline",
        "x-sdk-interface": "analyze",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.analyze"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/pipelines/analyze\""
        }, {
          "lang": "node.js",
          "source": "sdk.analyze({ ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/pipelines/labels": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-get-labels",
        "parameters": [],
        "summary": "Test yaml from url",
        "x-sdk-interface": "pipelines.getLabels",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.getLabels"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/labels\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.getLabels()"
        }]
      }
    },
    "/pipelines/labels/{label}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-get-label-values",
        "parameters": [{
          "in": "path",
          "name": "label",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "label"
        }],
        "summary": "Get label values",
        "x-sdk-interface": "pipelines.getLabelValues",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.getLabelValues"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/labels/${LABEL}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.getLabelValues({ label })"
        }]
      }
    },
    "/pipelines/names": {
      "get": {
        "parameters": [{
          "name": "offset",
          "in": "query",
          "schema": {
            "type": "integer"
          },
          "description": "Offset"
        }, {
          "name": "id",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "Id"
        }, {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "string"
          },
          "description": "Limit"
        }, {
          "in": "query",
          "name": "labels",
          "schema": {
            "type": "string"
          },
          "description": "Labels"
        }, {
          "in": "query",
          "name": "projectId",
          "schema": {
            "type": "string"
          },
          "description": "project id"
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-get-names",
        "summary": "Get",
        "x-sdk-interface": "pipelines.getNames",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.getAllAccountPipelinesNames"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/names?offset=${OFFSET}&id=${ID}&limit=${LIMIT}&labels=${LABELS}&projectId=${PROJECT_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.getNames({\n    offset,\n    id,\n    limit,\n    labels,\n    projectId\n})"
        }]
      }
    },
    "/pipelines/utils/extractVariables": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-extract-variables-from-yaml",
        "parameters": [{
          "in": "query",
          "name": "yamlURL",
          "description": "url to retrieve yaml from",
          "schema": {
            "type": "string"
          }
        }],
        "summary": "Extract variables from yaml",
        "x-sdk-interface": "pipelines.extractVariablesFromYaml",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.extractVariables"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/utils/extractVariables?yamlURL=${YAML_URL}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.extractVariablesFromYaml({ yamlURL })"
        }]
      }
    },
    "/pipelines/{name}": {
      "get": {
        "parameters": [{
          "description": "Name of pipeline",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "in": "query",
          "name": "decryptVariables",
          "schema": {
            "type": "string"
          },
          "description": "Decrypt variables"
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-get",
        "summary": "Get",
        "x-sdk-interface": "pipelines.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "cache": {
            "entity": "pipelines",
            "type": "single",
            "identifier": "params.name",
            "evict": [{
              "event": "pipeline.updated",
              "identifiers": ["aggregateId", "props.metadata.name"],
              "identity": "accountId"
            }, {
              "event": "pipeline.deleted",
              "identifiers": ["aggregateId", "props.metadata.name"],
              "identity": "accountId"
            }]
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.getPipelineByNameOrId"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/${NAME}?decryptVariables=${DECRYPT_VARIABLES}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.get({ name, decryptVariables })"
        }]
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "updatePipeline",
        "parameters": [{
          "description": "Name of pipeline",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "should skip trigger validation",
          "in": "query",
          "name": "skipTriggerValidation",
          "schema": {
            "type": "string"
          }
        }, {
          "description": "allows to omit revision validation - will use revision of existing pipeline",
          "in": "query",
          "name": "disableRevisionCheck",
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {
                      "variables": {
                        "type": "array",
                        "x-secure": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "triggers": {
                        "type": "array",
                        "x-secure": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {
                        "variables": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "key": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-replace",
        "summary": "Replace",
        "x-sdk-interface": "pipelines.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "handler": "pipelines.replacePipelineByName"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"kind\\\":\\\"${KIND_STR}\\\",\\\"metadata\\\":{\\\"name\\\":\\\"${NAME_STR}\\\"},\\\"spec\\\":{\\\"variables\\\":[{\\\"key\\\":\\\"${KEY_STR}\\\",\\\"value\\\":\\\"${VALUE_STR}\\\"}],\\\"triggers\\\":[{\\\"type\\\":\\\"${TYPE_STR}\\\"}]}}\" \\\n    \"https://g.codefresh.io/api/pipelines/${NAME}?skipTriggerValidation=${SKIP_TRIGGER_VALIDATION}&disableRevisionCheck=${DISABLE_REVISION_CHECK}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.replace({ name, skipTriggerValidation, disableRevisionCheck }, {\n    kind: `${KIND_STR}`,\n    metadata: {\n        name: `${NAME_STR}`\n    },\n    spec: {\n        variables: [\n            {\n                key: `${KEY_STR}`,\n                value: `${VALUE_STR}`\n            }\n        ],\n        triggers: [\n            {\n                type: `${TYPE_STR}`\n            }\n        ]\n    }\n})"
        }]
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "deletePipeline",
        "parameters": [{
          "description": "Name of pipeline",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-delete",
        "summary": "Delete",
        "x-sdk-interface": "pipelines.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.deletePipelineByName"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.delete({ name })"
        }]
      }
    },
    "/pipelines/{name}/extractVariables": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-extract-variables",
        "parameters": [{
          "in": "query",
          "name": "yamlURL",
          "description": "url to retrieve yaml from",
          "schema": {
            "type": "string"
          }
        }, {
          "in": "path",
          "name": "name",
          "description": "pipeline name",
          "schema": {
            "type": "string"
          },
          "required": true
        }],
        "summary": "Extract variables",
        "x-sdk-interface": "pipelines.extractVariables",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.extractVariables"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/${NAME}/extractVariables?yamlURL=${YAML_URL}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.extractVariables({ yamlURL, name })"
        }]
      }
    },
    "/pipelines/{name}/volume-image": {
      "get": {
        "parameters": [{
          "description": "Name of pipeline",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-get-volume-image",
        "summary": "Get volume image",
        "x-sdk-interface": "pipelines.getVolumeImage",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.getPipelineVolumeImage"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/${NAME}/volume-image\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.getVolumeImage({ name })"
        }]
      }
    },
    "/pipelines/run/{name}": {
      "post": {
        "x-action": "runPipeline",
        "x-entityId": {
          "pathName": "params.name"
        },
        "x-allowed": {
          "body": ["branch", "serviceName", "type", "serviceId"]
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-run",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Run",
        "x-sdk-interface": "pipelines.run",
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "action": "run",
              "description": "Run a pipeline",
              "abac": true
            }
          },
          "preMiddleware": ["workflow.authorizeWorkflow"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.runPipeline"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/pipelines/run/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.run({ name }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/pipelines/{name}/preview-run-input": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-preview-run-input",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }, {
          "in": "query",
          "name": "trigger",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Trigger name/id"
        }],
        "summary": "Get a preview of input (variables and options) for a pipeline execution",
        "x-sdk-interface": "pipelines.preview-run-input",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "action": "run",
              "abac": true
            }
          },
          "preMiddleware": ["workflow.authorizeWorkflow"],
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.previewRunInput"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/${NAME}/preview-run-input?trigger=${TRIGGER}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.preview-run-input({ name, trigger })"
        }]
      }
    },
    "/pipelines/yaml/validator": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-validate-yaml",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Validate yaml",
        "x-sdk-interface": "pipelines.validateYaml",
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.yamlValidator"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/pipelines/yaml/validator\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.validateYaml({ ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/pipelines/yaml/test-url": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-test-yaml-from-url",
        "parameters": [],
        "summary": "Test yaml from url",
        "x-sdk-interface": "pipelines.testYamlFromUrl",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.testYamlFromUrl"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/yaml/test-url\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.testYamlFromUrl()"
        }]
      }
    },
    "/pipelines/templates/deploy-images": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-get-deploy-images",
        "parameters": [],
        "summary": "Get deploy images",
        "x-sdk-interface": "pipelines.getDeployImages",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.getDeployImages"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/templates/deploy-images\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.getDeployImages()"
        }]
      }
    },
    "/pipelines/clone/variables/{name}/{originPipelineName}": {
      "put": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-clone-variables",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }, {
          "in": "path",
          "name": "originPipelineName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name of the pipeline from which to clone"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Clone variables",
        "x-sdk-interface": "pipelines.cloneVariables",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true,
              "abacOptions": [{
                "identifiersLocation": "params.originPipelineName",
                "action": "read"
              }, {
                "action": "update"
              }],
              "description": "Clone pipeline variables"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.clonePipelineVariables"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/pipelines/clone/variables/${NAME}/${ORIGIN_PIPELINE_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.cloneVariables({ name, originPipelineName }, { ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/pipelines/{name}/triggers/{triggerId}/verify": {
      "post": {
        "summary": "Verify pipeline trigger",
        "operationId": "pipelines-verify-trigger",
        "x-sdk-interface": "pipelines.verifyTrigger",
        "tags": ["Pipelines"],
        "parameters": [{
          "description": "Name of pipeline",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "Trigger id",
          "in": "path",
          "name": "triggerId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "x-endpoint": {
          "isEndpoint": false,
          "utility": {
            "bodyParser": {
              "limit": "5mb"
            }
          },
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.verifyPipelineTrigger"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/pipelines/${NAME}/triggers/${TRIGGER_ID}/verify\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.verifyTrigger({ name, triggerId })"
        }]
      }
    },
    "/pipelines/projects/all": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "pipelines-get-project-names",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Test yaml from url",
        "x-sdk-interface": "pipelines.getProjects",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "pipeline",
              "abac": true
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "pipelines.getProjects"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/pipelines/projects/all\""
        }, {
          "lang": "node.js",
          "source": "sdk.pipelines.getProjects({ ...REQUEST_BODY_OBJ })"
        }]
      }
    },
    "/views/": {
      "post": {
        "x-action": "createView",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Views"],
        "operationId": "views-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "views.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "views.createView"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/views/\""
        }, {
          "lang": "node.js",
          "source": "sdk.views.create({ ...REQUEST_BODY_OBJ })"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Views"],
        "parameters": [{
          "name": "offset",
          "in": "query",
          "schema": {
            "type": "integer"
          },
          "description": "Offset"
        }, {
          "name": "id",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "Id"
        }, {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "string"
          },
          "description": "Limit"
        }, {
          "in": "query",
          "name": "labels",
          "schema": {
            "type": "string"
          },
          "description": "Labels"
        }],
        "operationId": "views-list",
        "summary": "List",
        "x-sdk-interface": "views.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "views.getAllAccountViews"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/views/?offset=${OFFSET}&id=${ID}&limit=${LIMIT}&labels=${LABELS}\""
        }, {
          "lang": "node.js",
          "source": "sdk.views.list({\n    offset,\n    id,\n    limit,\n    labels\n})"
        }]
      }
    },
    "/views/{name}": {
      "get": {
        "parameters": [{
          "description": "Name of view",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Views"],
        "operationId": "views-get",
        "summary": "Get",
        "x-sdk-interface": "views.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "views.getViewByNameOrId"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/views/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.views.get({ name })"
        }]
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "updateView",
        "parameters": [{
          "description": "Name of view",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "tags": ["Views"],
        "operationId": "views-replace",
        "summary": "Replace",
        "x-sdk-interface": "views.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "views.replaceViewByName"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/views/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.views.replace({ name }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "deleteView",
        "parameters": [{
          "description": "Name of view",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Views"],
        "operationId": "views-delete",
        "summary": "Delete",
        "x-sdk-interface": "views.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "views.deleteViewByName"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/views/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.views.delete({ name })"
        }]
      }
    },
    "/views/types/metadata": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Views"],
        "parameters": [],
        "operationId": "views-type-list",
        "summary": "List types",
        "x-sdk-interface": "views.type.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "views.getAllTypes"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/views/types/metadata\""
        }, {
          "lang": "node.js",
          "source": "sdk.views.type.list()"
        }]
      }
    },
    "/views/types/names": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Views"],
        "parameters": [],
        "operationId": "views-typeNames-list",
        "summary": "List types names",
        "x-sdk-interface": "views.typesNames.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "views.getAllTypesNames"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/views/types/names\""
        }, {
          "lang": "node.js",
          "source": "sdk.views.typesNames.list()"
        }]
      }
    },
    "/views/types/{type}/fields": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Views"],
        "parameters": [{
          "description": "Type",
          "in": "path",
          "name": "type",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "operationId": "views-typeFields-list",
        "summary": "List type fields",
        "x-sdk-interface": "views.typeFields.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": [],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "views.getAllTypeFields"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/views/types/${TYPE}/fields\""
        }, {
          "lang": "node.js",
          "source": "sdk.views.typeFields.list({ type })"
        }]
      }
    },
    "/views/types/{type}/fields/{field}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Views"],
        "parameters": [{
          "description": "Type",
          "in": "path",
          "name": "type",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "Field",
          "in": "path",
          "name": "field",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "operationId": "views-TypeFieldValues-list",
        "summary": "List type field values",
        "x-sdk-interface": "views.typeFieldValues.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "view"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "views.getAllAccountTypeFieldValues"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/views/types/${TYPE}/fields/${FIELD}\""
        }, {
          "lang": "node.js",
          "source": "sdk.views.typeFieldValues.list({ type, field })"
        }]
      }
    },
    "/step-types": {
      "post": {
        "x-action": "createStep",
        "x-audit": {
          "name": {
            "path": "body.metadata.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Step-types"],
        "operationId": "steps-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "steps.create",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "steps.createStep"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/step-types\""
        }, {
          "lang": "node.js",
          "source": "sdk.steps.create({ ...REQUEST_BODY_OBJ })"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Step-types"],
        "parameters": [{
          "name": "id",
          "in": "query",
          "schema": {
            "type": "string"
          },
          "description": "Id or name"
        }, {
          "in": "query",
          "name": "official",
          "schema": {
            "type": "string"
          },
          "description": "Filter only official step-types"
        }, {
          "in": "query",
          "name": "category",
          "schema": {
            "type": "string"
          },
          "description": "Filter by a specific category"
        }, {
          "in": "query",
          "name": "tag",
          "schema": {
            "type": "string"
          },
          "description": "Filter by a specific tag"
        }, {
          "in": "query",
          "name": "public",
          "schema": {
            "type": "string"
          },
          "description": "Filter only public step-types"
        }, {
          "in": "query",
          "name": "private",
          "schema": {
            "type": "string"
          },
          "description": "Filter only private step-types"
        }, {
          "in": "query",
          "name": "stage",
          "schema": {
            "type": "string",
            "enum": ["graduated", "incubating"]
          },
          "description": "Filter by stage"
        }, {
          "name": "offset",
          "in": "query",
          "schema": {
            "type": "integer"
          },
          "description": "Offset"
        }, {
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "string"
          },
          "description": "Limit"
        }],
        "operationId": "steps-list",
        "summary": "List",
        "x-sdk-interface": "steps.list",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticatedOrAnonymous"],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "steps.getSteps"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/step-types?id=${ID}&official=${OFFICIAL}&category=${CATEGORY}&tag=${TAG}&public=${PUBLIC}&private=${PRIVATE}&stage=${STAGE}&offset=${OFFSET}&limit=${LIMIT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.steps.list({\n    id,\n    official,\n    category,\n    tag,\n    public,\n    private,\n    stage,\n    offset,\n    limit\n})"
        }]
      }
    },
    "/step-types/{name}": {
      "get": {
        "parameters": [{
          "description": "Name of step",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Step-types"],
        "operationId": "steps-get",
        "summary": "Get",
        "x-sdk-interface": "steps.get",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticatedOrAnonymous"],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "steps.getStepByNameOrId"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/step-types/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.steps.get({ name })"
        }]
      },
      "put": {
        "x-entityId": {
          "pathId": "params.name",
          "pathName": "body.metadata.name"
        },
        "x-action": "updateStep",
        "parameters": [{
          "description": "Name of step",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "kind": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "spec": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string"
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        }
                      }
                    },
                    "spec": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        },
        "tags": ["Step-types"],
        "operationId": "steps-replace",
        "summary": "Replace",
        "x-sdk-interface": "steps.replace",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "steps.replaceStepByName"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"kind\\\":\\\"${KIND_STR}\\\",\\\"metadata\\\":{\\\"name\\\":\\\"${NAME_STR}\\\"},\\\"spec\\\":${SPEC_OBJ}}\" \\\n    \"https://g.codefresh.io/api/step-types/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.steps.replace({ name }, {\n    kind: `${KIND_STR}`,\n    metadata: {\n        name: `${NAME_STR}`\n    },\n    spec: { ...SPEC_OBJ }\n})"
        }]
      },
      "delete": {
        "x-entityId": {
          "pathId": "params.name"
        },
        "x-action": "deleteStep",
        "parameters": [{
          "description": "Name of step",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Step-types"],
        "operationId": "steps-delete",
        "summary": "Delete",
        "x-sdk-interface": "steps.delete",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticated"],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "steps.deleteStepByName"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/step-types/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.steps.delete({ name })"
        }]
      }
    },
    "/step-types/{name}/versions": {
      "get": {
        "parameters": [{
          "description": "Name of step",
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Step-types"],
        "operationId": "steps-get-version",
        "summary": "Get Versions",
        "x-sdk-interface": "steps.getStepVersions",
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "middleware": ["auth.isAuthenticatedOrAnonymous"],
            "acl": {
              "resource": "step-type"
            }
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "steps.getStepVersions"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/step-types/${NAME}/versions\""
        }, {
          "lang": "node.js",
          "source": "sdk.steps.getStepVersions({ name })"
        }]
      }
    },
    "/projects": {
      "post": {
        "x-action": "createProject",
        "x-audit": {
          "name": {
            "path": "body.projectName",
            "source": "req"
          },
          "id": {
            "path": "id",
            "source": "res"
          }
        },
        "x-sdk-interface": "projects.create",
        "operationId": "projects-create",
        "summary": "Create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projectName": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["projects"],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": ["auth.isAuthenticated"]
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "projects.createProject"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"projectName\\\":\\\"${PROJECT_NAME_STR}\\\",\\\"tags\\\":[\\\"${TAGS_ARR_STR}\\\"],\\\"variables\\\":[\\\"${VARIABLES_ARR_STR}\\\"]}\" \\\n    \"https://g.codefresh.io/api/projects\""
        }, {
          "lang": "node.js",
          "source": "sdk.projects.create({\n    projectName: `${PROJECT_NAME_STR}`,\n    tags: [\n        `${TAGS_ARR_STR}`\n    ],\n    variables: [\n        `${VARIABLES_ARR_STR}`\n    ]\n})"
        }]
      },
      "get": {
        "x-sdk-interface": "projects.list",
        "operationId": "projects-list",
        "summary": "List",
        "parameters": [{
          "in": "query",
          "name": "limit",
          "description": "limit",
          "schema": {
            "type": "string"
          }
        }, {
          "in": "query",
          "name": "offset",
          "description": "offset",
          "schema": {
            "type": "string"
          }
        }, {
          "in": "query",
          "name": "name",
          "description": "name",
          "schema": {
            "type": "string"
          }
        }, {
          "in": "query",
          "name": "tags",
          "description": "tags",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["projects"],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": ["auth.isAuthenticated"]
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "projects.getProjects"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/projects?limit=${LIMIT}&offset=${OFFSET}&name=${NAME}&tags=${TAGS}\""
        }, {
          "lang": "node.js",
          "source": "sdk.projects.list({\n    limit,\n    offset,\n    name,\n    tags\n})"
        }]
      }
    },
    "/projects/tags": {
      "get": {
        "x-sdk-interface": "projects.getProjectsTags",
        "operationId": "projects-get-projects-tags",
        "summary": "Get projects tags",
        "parameters": [{
          "in": "query",
          "name": "tagsNameRegex",
          "description": "regex to filter",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["projects"],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": ["auth.isAuthenticated"]
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "projects.getProjectsTags"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/projects/tags?tagsNameRegex=${TAGS_NAME_REGEX}\""
        }, {
          "lang": "node.js",
          "source": "sdk.projects.getProjectsTags({ tagsNameRegex })"
        }]
      }
    },
    "/projects/name/{name}": {
      "get": {
        "x-sdk-interface": "projects.getByName",
        "operationId": "projects-get-by-name",
        "summary": "Get by name",
        "parameters": [{
          "in": "path",
          "name": "name",
          "description": "project name",
          "schema": {
            "type": "string"
          },
          "required": true
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["projects"],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": ["auth.isAuthenticated"]
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "projects.getProjectByName"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/projects/name/${NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.projects.getByName({ name })"
        }]
      }
    },
    "/projects/{id}": {
      "get": {
        "x-sdk-interface": "projects.get",
        "operationId": "projects-get",
        "summary": "Get",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["projects"],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": ["auth.isAuthenticated"]
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "projects.getProjectById"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/projects/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.projects.get({ id })"
        }]
      },
      "patch": {
        "x-action": "updateProject",
        "x-entityId": {
          "pathId": "params.id",
          "pathName": "body.name"
        },
        "x-sdk-interface": "projects.patch",
        "operationId": "projects-patch",
        "summary": "Patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "x-allowed": {
                  "body": ["projectName", "tags"]
                }
              }
            }
          }
        },
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["projects"],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": ["auth.isAuthenticated"]
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "projects.updateProject"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/projects/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.projects.patch({ id }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "delete": {
        "x-action": "deleteProject",
        "x-entityId": {
          "pathId": "params.id"
        },
        "x-sdk-interface": "projects.delete",
        "operationId": "projects-delete",
        "summary": "Delete",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["projects"],
        "x-endpoint": {
          "isEndpoint": false,
          "auth": {
            "acl": {
              "resource": "project"
            },
            "middleware": ["auth.isAuthenticated"]
          },
          "postMiddleware": ["global.iseMiddleware"],
          "handler": "projects.deleteProject"
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/projects/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.projects.delete({ id })"
        }]
      }
    },
    "/progress/download/{id}": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Progress"],
        "operationId": "progress-download",
        "summary": "Download",
        "x-sdk-interface": "progress.download",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/progress/download/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.progress.download({ id })"
        }]
      }
    },
    "/progress/{id}": {
      "get": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Progress"],
        "operationId": "progress-get",
        "summary": "Get",
        "x-sdk-interface": "progress.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/progress/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.progress.get({ id })"
        }]
      },
      "delete": {
        "x-action": "terminateBuild",
        "x-entityId": "params.id",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Progress"],
        "operationId": "progress-terminate",
        "summary": "Terminate",
        "x-sdk-interface": "progress.terminate",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/progress/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.progress.terminate({ id })"
        }]
      }
    },
    "/providers/github/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": ["enrichHeaders", "githubCommiter"],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.githubName"
        },
        "x-allowed": {
          "headers": ["x-github-event", "x-github-delivery"]
        },
        "x-sdk-interface": "providers.sendGithubWebhook",
        "operationId": "providers-send-github-webhook",
        "summary": "Send github webhook",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Providers"],
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/providers/github/hook/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.providers.sendGithubWebhook({ id })"
        }]
      }
    },
    "/providers/gitlab/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": ["enrichHeaders", "gitlabCommiter"],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.gitlabName"
        },
        "x-allowed": {
          "headers": ["x-gitlab-event", "x-gitlab-token"]
        },
        "x-sdk-interface": "providers.sendGitlabWebhook",
        "operationId": "providers-send-gitlab-webhook",
        "summary": "Send gitlab webhook",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Providers"],
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/providers/gitlab/hook/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.providers.sendGitlabWebhook({ id })"
        }]
      }
    },
    "/providers/bitbucket/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": ["enrichHeaders", "bitbucketCommiter"],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.bitbucketName"
        },
        "x-allowed": {
          "headers": ["x-hook-uuid", "x-event-key", "x-event-time", "x-request-uuid", "x-attempt-number"]
        },
        "x-sdk-interface": "providers.sendBitbucketbWebhook",
        "operationId": "providers-send-bitbucket-webhook",
        "summary": "Send bitbucket webhook",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Providers"],
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/providers/bitbucket/hook/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.providers.sendBitbucketbWebhook({ id })"
        }]
      }
    },
    "/providers/bitbucket_server/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": ["enrichHeaders", "bitbucketServerCommiter"],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.bitbucketServerName"
        },
        "x-allowed": {
          "headers": ["x-event-key", "x-request-id"]
        },
        "x-sdk-interface": "providers.sendBitbucketServerbWebhook",
        "operationId": "providers-send-bitbucket-server-webhook",
        "summary": "Send bitbucket server webhook",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Providers"],
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/providers/bitbucket_server/hook/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.providers.sendBitbucketServerbWebhook({ id })"
        }]
      }
    },
    "/providers/azure-devops/hook/{id}": {
      "post": {
        "x-action": "receiveWebhook",
        "x-overrides": ["enrichHeaders", "azureDevopsCommiter"],
        "x-entityId": {
          "pathId": "params.id",
          "handlerName": "webhooks.azureDevopsName"
        },
        "x-allowed": {
          "headers": ["request-id", "x-vss-subscriptionid", "x-vss-activityid"]
        },
        "x-sdk-interface": "providers.sendAzureDevopsbWebhook",
        "operationId": "providers-send-azure-devops-webhook",
        "summary": "Send azure devops webhook",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Providers"],
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/providers/azure-devops/hook/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.providers.sendAzureDevopsbWebhook({ id })"
        }]
      }
    },
    "/registry/auth/token": {
      "post": {
        "x-action": "createCFCRToken",
        "x-entityId": {
          "pathName": "body.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Registries"],
        "operationId": "registries-generate-cfcr-token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "summary": "Generate cfcr token",
        "parameters": [],
        "x-sdk-interface": "registries.generateCfcrToken",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"description\\\":\\\"${DESCRIPTION_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/registry/auth/token\""
        }, {
          "lang": "node.js",
          "source": "sdk.registries.generateCfcrToken({\n    description: `${DESCRIPTION_STR}`\n})"
        }]
      }
    },
    "/registry/auth/token/{id}": {
      "delete": {
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "x-action": "deleteCRCRToken",
        "x-entityId": "params.id",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Registries"],
        "summary": "Generate cfcr token",
        "x-sdk-interface": "registries.deleteCfcrToken",
        "operationId": "registries-delete-cfcr-token",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/registry/auth/token/${ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.registries.deleteCfcrToken({ id })"
        }]
      }
    },
    "/repos": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Repos"],
        "operationId": "repos-git-list",
        "parameters": [{
          "in": "query",
          "name": "context",
          "schema": {
            "type": "string"
          },
          "description": "Context"
        }],
        "summary": "List git repos (github, bitbucket, etc)",
        "x-sdk-interface": "repos.git.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/repos?context=${CONTEXT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.repos.git.list({ context })"
        }]
      }
    },
    "/registries": {
      "post": {
        "x-action": "createRegistry",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Registries"],
        "operationId": "registries-create",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string",
                    "x-secure": true
                  },
                  "domain": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "behindFirewall": {
                    "type": "string"
                  },
                  "secretAccessKey": {
                    "type": "string",
                    "x-secure": true
                  }
                },
                "required": ["username", "password", "domain", "name"],
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "summary": "Create",
        "x-sdk-interface": "registries.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"username\\\":\\\"${USERNAME_STR}\\\",\\\"password\\\":\\\"${PASSWORD_STR}\\\",\\\"domain\\\":\\\"${DOMAIN_STR}\\\",\\\"name\\\":\\\"${NAME_STR}\\\",\\\"behindFirewall\\\":\\\"${BEHIND_FIREWALL_STR}\\\",\\\"secretAccessKey\\\":\\\"${SECRET_ACCESS_KEY_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/registries\""
        }, {
          "lang": "node.js",
          "source": "sdk.registries.create({\n    username: `${USERNAME_STR}`,\n    password: `${PASSWORD_STR}`,\n    domain: `${DOMAIN_STR}`,\n    name: `${NAME_STR}`,\n    behindFirewall: `${BEHIND_FIREWALL_STR}`,\n    secretAccessKey: `${SECRET_ACCESS_KEY_STR}`\n})"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Registries"],
        "operationId": "registries-list",
        "parameters": [],
        "summary": "List registries",
        "x-sdk-interface": "registries.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/registries\""
        }, {
          "lang": "node.js",
          "source": "sdk.registries.list()"
        }]
      }
    },
    "/registries/{registryId}": {
      "patch": {
        "x-action": "updateRegistry",
        "x-entityId": {
          "pathId": "params.registryId",
          "pathName": "body.name"
        },
        "operationId": "registries-patch",
        "tags": ["Registries"],
        "summary": "Patch",
        "x-sdk-interface": "registries.patch",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "registryId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "password": {
                    "type": "string",
                    "x-secure": true
                  },
                  "secretAccessKey": {
                    "type": "string",
                    "x-secure": true
                  }
                },
                "required": ["username", "password", "domain", "name"],
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"password\\\":\\\"${PASSWORD_STR}\\\",\\\"secretAccessKey\\\":\\\"${SECRET_ACCESS_KEY_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/registries/${REGISTRY_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.registries.patch({ registryId }, {\n    password: `${PASSWORD_STR}`,\n    secretAccessKey: `${SECRET_ACCESS_KEY_STR}`\n})"
        }]
      },
      "delete": {
        "x-action": "deleteRegistry",
        "x-entityId": "params.registryId",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Registries"],
        "operationId": "registries-delete",
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "registryId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "summary": "Delete",
        "x-sdk-interface": "registries.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/registries/${REGISTRY_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.registries.delete({ registryId })"
        }]
      }
    },
    "/registries/{registryId}/default": {
      "patch": {
        "x-action": "setDefaultRegistry",
        "x-entityId": "params.registryId",
        "operationId": "registries-default-patch",
        "summary": "Patch default",
        "x-sdk-interface": "registries.setDefault",
        "tags": ["Registries"],
        "parameters": [{
          "description": "id of an object",
          "in": "path",
          "name": "registryId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PATCH \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/registries/${REGISTRY_ID}/default\""
        }, {
          "lang": "node.js",
          "source": "sdk.registries.setDefault({ registryId })"
        }]
      }
    },
    "/registries/test": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Registries"],
        "operationId": "registries-test",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "behindFirewall": {
                    "type": "string"
                  }
                },
                "required": ["username", "password", "domain", "name"],
                "type": "object"
              }
            }
          },
          "description": "Description of the token",
          "required": true
        },
        "summary": "Test",
        "x-sdk-interface": "registries.test",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"username\\\":\\\"${USERNAME_STR}\\\",\\\"password\\\":\\\"${PASSWORD_STR}\\\",\\\"domain\\\":\\\"${DOMAIN_STR}\\\",\\\"name\\\":\\\"${NAME_STR}\\\",\\\"behindFirewall\\\":\\\"${BEHIND_FIREWALL_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/registries/test\""
        }, {
          "lang": "node.js",
          "source": "sdk.registries.test({\n    username: `${USERNAME_STR}`,\n    password: `${PASSWORD_STR}`,\n    domain: `${DOMAIN_STR}`,\n    name: `${NAME_STR}`,\n    behindFirewall: `${BEHIND_FIREWALL_STR}`\n})"
        }]
      }
    },
    "/repos/existing": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Repos"],
        "operationId": "repos-list",
        "parameters": [{
          "in": "query",
          "name": "context",
          "schema": {
            "type": "string"
          },
          "description": "Context"
        }, {
          "in": "query",
          "name": "thin",
          "schema": {
            "type": "string"
          },
          "allowEmptyValue": true,
          "description": "Thin"
        }],
        "summary": "List",
        "x-sdk-interface": "repos.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/repos/existing?context=${CONTEXT}&thin=${THIN}\""
        }, {
          "lang": "node.js",
          "source": "sdk.repos.list({ context, thin })"
        }]
      }
    },
    "/repos/settings/{repoOwner}/{repoName}": {
      "get": {
        "parameters": [{
          "description": "name of owner of repository",
          "in": "path",
          "name": "repoOwner",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "repository name",
          "in": "path",
          "name": "repoName",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Repos"],
        "operationId": "repos-get-settings",
        "summary": "Get settings",
        "x-sdk-interface": "repos.getSettings",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/repos/settings/${REPO_OWNER}/${REPO_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.repos.getSettings({ repoOwner, repoName })"
        }]
      }
    },
    "/repos/{owner}/{repo}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Repos"],
        "operationId": "repos-git-get-repo",
        "parameters": [{
          "in": "path",
          "name": "owner",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Owner"
        }, {
          "in": "path",
          "name": "repo",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Repo"
        }, {
          "in": "query",
          "name": "context",
          "schema": {
            "type": "string"
          },
          "description": "Context"
        }],
        "summary": "Get git repo",
        "x-sdk-interface": "repos.git.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/repos/${OWNER}/${REPO}?context=${CONTEXT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.repos.git.get({ owner, repo, context })"
        }]
      }
    },
    "/runtime-environments": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments"],
        "operationId": "runtime-envs-list",
        "parameters": [{
          "in": "query",
          "name": "limit",
          "schema": {
            "type": "string"
          },
          "description": "Limit"
        }, {
          "in": "query",
          "name": "offset",
          "schema": {
            "type": "string"
          },
          "description": "Offset"
        }],
        "summary": "List",
        "x-sdk-interface": "runtimeEnvs.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/runtime-environments?limit=${LIMIT}&offset=${OFFSET}\""
        }, {
          "lang": "node.js",
          "source": "sdk.runtimeEnvs.list({ limit, offset })"
        }]
      }
    },
    "/runtime-environments/default/{runtimeEnvironmentName}": {
      "put": {
        "x-action": "upsertRuntimeEnv",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments"],
        "operationId": "runtime-envs-set-default",
        "parameters": [{
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }],
        "summary": "Set default",
        "x-sdk-interface": "runtimeEnvs.setDefault",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/runtime-environments/default/${RUNTIME_ENVIRONMENT_NAME}\""
        }, {
          "lang": "node.js",
          "source": "sdk.runtimeEnvs.setDefault({ runtimeEnvironmentName })"
        }]
      }
    },
    "/runtime-environments/{runtimeEnvironmentName}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments"],
        "operationId": "runtime-envs-get",
        "parameters": [{
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }, {
          "in": "query",
          "name": "version",
          "schema": {
            "type": "string"
          },
          "description": "Version"
        }, {
          "in": "query",
          "name": "extend",
          "schema": {
            "type": "string"
          },
          "description": "Extend"
        }, {
          "in": "query",
          "name": "history",
          "schema": {
            "type": "string"
          },
          "description": "History"
        }],
        "summary": "Get",
        "x-sdk-interface": "runtimeEnvs.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/runtime-environments/${RUNTIME_ENVIRONMENT_NAME}?version=${VERSION}&extend=${EXTEND}&history=${HISTORY}\""
        }, {
          "lang": "node.js",
          "source": "sdk.runtimeEnvs.get({\n    runtimeEnvironmentName,\n    version,\n    extend,\n    history\n})"
        }]
      },
      "put": {
        "x-action": "upsertRuntimeEnv",
        "x-entityId": {
          "pathId": "body._id",
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments"],
        "operationId": "runtime-envs-update",
        "parameters": [{
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }, {
          "in": "query",
          "name": "extend",
          "schema": {
            "type": "string"
          },
          "description": "Extend"
        }, {
          "in": "query",
          "name": "description",
          "schema": {
            "type": "string"
          },
          "description": "Description"
        }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Update",
        "x-sdk-interface": "runtimeEnvs.update",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"${REQUEST_BODY_OBJ}\" \\\n    \"https://g.codefresh.io/api/runtime-environments/${RUNTIME_ENVIRONMENT_NAME}?extend=${EXTEND}&description=${DESCRIPTION}\""
        }, {
          "lang": "node.js",
          "source": "sdk.runtimeEnvs.update({ runtimeEnvironmentName, extend, description }, { ...REQUEST_BODY_OBJ })"
        }]
      },
      "delete": {
        "x-action": "deleteRuntimeEnv",
        "x-entityId": {
          "pathName": "params.runtimeEnvironmentName"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Runtime Environments"],
        "operationId": "runtime-envs-delete",
        "parameters": [{
          "in": "path",
          "name": "runtimeEnvironmentName",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Runtime environment name"
        }, {
          "in": "query",
          "name": "force",
          "schema": {
            "type": "string"
          },
          "description": "Force"
        }],
        "summary": "Delete",
        "x-sdk-interface": "runtimeEnvs.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/runtime-environments/${RUNTIME_ENVIRONMENT_NAME}?force=${FORCE}\""
        }, {
          "lang": "node.js",
          "source": "sdk.runtimeEnvs.delete({ runtimeEnvironmentName, force })"
        }]
      }
    },
    "/runtime/testit": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Pipelines"],
        "operationId": "runtime-launch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "branch": {
                    "type": "string"
                  },
                  "repoData": {
                    "properties": {
                      "url": {
                        "properties": {
                          "https": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  },
                  "repoName": {
                    "type": "string"
                  },
                  "repoOwner": {
                    "type": "string"
                  },
                  "serviceId": {
                    "type": "string"
                  },
                  "sha": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Launch",
        "parameters": [],
        "x-sdk-interface": "runtime.launch",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"branch\\\":\\\"${BRANCH_STR}\\\",\\\"repoData\\\":{\\\"url\\\":{\\\"https\\\":\\\"${HTTPS_STR}\\\"}},\\\"repoName\\\":\\\"${REPO_NAME_STR}\\\",\\\"repoOwner\\\":\\\"${REPO_OWNER_STR}\\\",\\\"serviceId\\\":\\\"${SERVICE_ID_STR}\\\",\\\"sha\\\":\\\"${SHA_STR}\\\"}\" \\\n    \"https://g.codefresh.io/api/runtime/testit\""
        }, {
          "lang": "node.js",
          "source": "sdk.runtime.launch({\n    branch: `${BRANCH_STR}`,\n    repoData: {\n        url: {\n            https: `${HTTPS_STR}`\n        }\n    },\n    repoName: `${REPO_NAME_STR}`,\n    repoOwner: `${REPO_OWNER_STR}`,\n    serviceId: `${SERVICE_ID_STR}`,\n    sha: `${SHA_STR}`\n})"
        }]
      }
    },
    "/services": {
      "post": {
        "parameters": [{
          "description": "The git context name",
          "in": "query",
          "name": "context",
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Repos"],
        "operationId": "repos-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "serviceDetails": {
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "scm": {
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "owner": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "summary": "Create",
        "x-sdk-interface": "repos.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"serviceDetails\\\":{\\\"name\\\":\\\"${NAME_STR}\\\",\\\"scm\\\":{\\\"name\\\":\\\"${NAME_STR}\\\",\\\"owner\\\":{\\\"name\\\":\\\"${NAME_STR}\\\"}}}}\" \\\n    \"https://g.codefresh.io/api/services?context=${CONTEXT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.repos.create({ context }, {\n    serviceDetails: {\n        name: `${NAME_STR}`,\n        scm: {\n            name: `${NAME_STR}`,\n            owner: {\n                name: `${NAME_STR}`\n            }\n        }\n    }\n})"
        }]
      }
    },
    "/services/{name}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Repos"],
        "operationId": "repos-get",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }, {
          "in": "query",
          "name": "context",
          "schema": {
            "type": "string"
          },
          "description": "Context"
        }],
        "summary": "Get",
        "x-sdk-interface": "repos.get",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/services/${NAME}?context=${CONTEXT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.repos.get({ name, context })"
        }]
      },
      "delete": {
        "x-action": "serviceDeleted",
        "x-entityId": {
          "pathName": "params.name"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Repos"],
        "operationId": "repos-delete",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }, {
          "in": "query",
          "name": "context",
          "schema": {
            "type": "string"
          },
          "description": "Context"
        }],
        "summary": "Delete",
        "x-sdk-interface": "repos.delete",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/services/${NAME}?context=${CONTEXT}\""
        }, {
          "lang": "node.js",
          "source": "sdk.repos.delete({ name, context })"
        }]
      }
    },
    "/team": {
      "post": {
        "x-action": "createTeam",
        "x-audit": {
          "name": {
            "path": "body.name",
            "source": "req"
          },
          "id": {
            "path": "_id",
            "source": "res"
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Teams"],
        "operationId": "teams-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "name": {
                    "type": "string"
                  },
                  "users": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Team data",
          "required": true
        },
        "summary": "Create",
        "parameters": [],
        "x-sdk-interface": "teams.create",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X POST \\\n    -H \"Authorization: ${API_KEY}\" \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    -d \"{\\\"tags\\\":[\\\"${TAGS_ARR_STR}\\\"],\\\"name\\\":\\\"${NAME_STR}\\\",\\\"users\\\":[\\\"${USERS_ARR_STR}\\\"]}\" \\\n    \"https://g.codefresh.io/api/team\""
        }, {
          "lang": "node.js",
          "source": "sdk.teams.create({\n    tags: [\n        `${TAGS_ARR_STR}`\n    ],\n    name: `${NAME_STR}`,\n    users: [\n        `${USERS_ARR_STR}`\n    ]\n})"
        }]
      },
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Teams"],
        "operationId": "teams-list",
        "parameters": [],
        "summary": "List",
        "x-sdk-interface": "teams.list",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/team\""
        }, {
          "lang": "node.js",
          "source": "sdk.teams.list()"
        }]
      }
    },
    "/team/{teamId}": {
      "delete": {
        "x-action": "deleteTeam",
        "x-entityId": "params.teamId",
        "x-sdk-interface": "teams.delete",
        "operationId": "teams-delete",
        "summary": "Delete",
        "parameters": [{
          "in": "path",
          "name": "teamId",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "team id"
        }],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": ["Teams"],
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X DELETE \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/team/${TEAM_ID}\""
        }, {
          "lang": "node.js",
          "source": "sdk.teams.delete({ teamId })"
        }]
      }
    },
    "/team/group/synchronize/name/{name}/type/{type}": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Teams"],
        "operationId": "teams-synchronize-client-with-group",
        "parameters": [{
          "in": "path",
          "name": "name",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Name"
        }, {
          "in": "path",
          "name": "type",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Type"
        }, {
          "in": "query",
          "name": "access_token",
          "schema": {
            "type": "string"
          },
          "description": "Access token"
        }, {
          "in": "query",
          "name": "disableNotifications",
          "schema": {
            "type": "boolean"
          },
          "required": false,
          "description": "Disable send notifications"
        }],
        "summary": "Synchronize client with group",
        "x-sdk-interface": "teams.synchronizeClientWithGroup",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/team/group/synchronize/name/${NAME}/type/${TYPE}?access_token=${ACCESS_TOKEN}&disableNotifications=${DISABLE_NOTIFICATIONS}\""
        }, {
          "lang": "node.js",
          "source": "sdk.teams.synchronizeClientWithGroup({\n    name,\n    type,\n    access_token,\n    disableNotifications\n})"
        }]
      }
    },
    "/team/{teamId}/{userId}/assignUserToTeam": {
      "put": {
        "x-action": "assignUserToTeam",
        "x-entityId": "params.teamId",
        "parameters": [{
          "description": "The id of the team",
          "in": "path",
          "name": "teamId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "The user id for assign",
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Teams"],
        "operationId": "teams-add-user",
        "summary": "Add user",
        "x-sdk-interface": "teams.addUser",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/team/${TEAM_ID}/${USER_ID}/assignUserToTeam\""
        }, {
          "lang": "node.js",
          "source": "sdk.teams.addUser({ teamId, userId })"
        }]
      }
    },
    "/team/{teamId}/renameTeam": {
      "put": {
        "x-action": "renameTeam",
        "x-entityId": {
          "pathId": "params.teamId",
          "pathName": "body.name"
        },
        "parameters": [{
          "description": "The id of the team",
          "in": "path",
          "name": "teamId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "description": "ok"
          }
        },
        "tags": ["Teams"],
        "operationId": "teams-rename",
        "summary": "Rename team",
        "x-sdk-interface": "teams.rename",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/team/${TEAM_ID}/renameTeam\""
        }, {
          "lang": "node.js",
          "source": "sdk.teams.rename({ teamId })"
        }]
      }
    },
    "/team/{teamId}/{userId}/deleteUserFromTeam": {
      "put": {
        "x-action": "deleteUserFromTeam",
        "x-entityId": "params.teamId",
        "parameters": [{
          "description": "The id of the team",
          "in": "path",
          "name": "teamId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }, {
          "description": "The user id for assign",
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          }
        }],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Teams"],
        "operationId": "teams-remove-user",
        "summary": "Remove user",
        "x-sdk-interface": "teams.removeUser",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X PUT \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/team/${TEAM_ID}/${USER_ID}/deleteUserFromTeam\""
        }, {
          "lang": "node.js",
          "source": "sdk.teams.removeUser({ teamId, userId })"
        }]
      }
    },
    "/team/{userId}/findTeamsByUser": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "json"
          }
        },
        "tags": ["Teams"],
        "operationId": "teams-list-by-user",
        "parameters": [{
          "in": "path",
          "name": "userId",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "User id"
        }],
        "summary": "List by user",
        "x-sdk-interface": "teams.listByUser",
        "x-code-samples": [{
          "lang": "curl",
          "source": "curl  \\\n    -X GET \\\n    -H \"Authorization: ${API_KEY}\" \\\n    \"https://g.codefresh.io/api/team/${USER_ID}/findTeamsByUser\""
        }, {
          "lang": "node.js",
          "source": "sdk.teams.listByUser({ userId })"
        }]
      }
    }
  },
  "components": {
    "parameters": {
      "accountName": {
        "in": "path",
        "name": "accountName",
        "description": "Account name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardId": {
        "in": "query",
        "name": "boardId",
        "description": "Board id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardIdpath": {
        "description": "id of a board",
        "in": "path",
        "name": "boardId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "boardName": {
        "description": "name of a board",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "buildId": {
        "description": "id of a build object",
        "in": "path",
        "name": "buildId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "workflowId": {
        "description": "id of a workflowId object",
        "in": "path",
        "name": "workflowId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "id": {
        "description": "id of an object",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "accountId": {
        "description": "accountId of an object",
        "in": "path",
        "name": "accountId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repoName": {
        "description": "repository name",
        "in": "path",
        "name": "repoName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "repoOwner": {
        "description": "name of owner of repository",
        "in": "path",
        "name": "repoOwner",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "sectionName": {
        "description": "name of a section",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "serviceId": {
        "description": "id of a service object",
        "in": "path",
        "name": "serviceId",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "requestBody": {
        "type": "object"
      },
      "Json": {
        "type": "object"
      },
      "abac": {
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resource": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "requestBodies": {
      "Json": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        }
      },
      "create_boardOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "filter": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_sectionOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "boardId": {
                  "type": "string"
                },
                "color": {
                  "type": "string"
                },
                "index": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "section": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "updateAccountAccountdetails": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "settings": {
                  "type": "object"
                }
              },
              "type": "object"
            }
          }
        }
      },
      "create_favoriteOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "entities": {
                  "type": "string"
                },
                "type": {
                  "enum": ["repo", "pipeline-branch", "step-type"],
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_annotationOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "entityId": {
                  "type": "string"
                },
                "entityType": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "create_annotation_manyOptions": {
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "annotations": {
                  "type": "object",
                  "properties": {
                    "set": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entityId": {
                            "type": "string"
                          },
                          "entityType": {
                            "type": "string"
                          },
                          "annotations": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    },
                    "unset": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "entityId": {
                            "type": "string"
                          },
                          "entityType": {
                            "type": "string"
                          },
                          "annotations": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "type": "object"
            }
          }
        },
        "required": true
      },
      "abac": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "teams": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "actions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "resource": {
                  "type": "string"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "Json": {
        "content": {
          "application/json": {
            "schema": {
              "type": "object"
            }
          }
        },
        "description": "json"
      }
    },
    "securitySchemes": {
      "apiKey": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  }
}