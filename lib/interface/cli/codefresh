#!/usr/bin/env node

const path = require('path');
const _ = require('lodash');
const yargs = require('yargs');
const recursive = require('recursive-readdir');
const CFError = require('cf-errors');
const DEFAULTS = require('./defaults');
const authManager = require('../../logic').auth.manager;
const { printError } = require('./helpers/general');
const nock = require('nock');

if (!process.env.MOCK_REQUEST) {
    const httpMock = nock('https://g.codefresh.io')
        .get('/api/pipelines?limit=25&page=0')
        .reply(200, {
            _id: '123ABC',
            _rev: '946B7D1C',
            username: 'pgte',
            email: 'pedro.teixeira@gmail.com',
        });
}


process.on('uncaughtException', function (err) {
    printError(err);
    process.exit(1);
});

process.on('unhandledRejection', error => {
    printError(error);
    process.exit(1);
});


recursive(path.resolve(__dirname, 'commands'), (err, files) => {
    const rootCommands = [];
    const x = require("/Users/codefresh/Documents/cli/lib/interface/cli/commands/auth/create-context.cmd.js");
    const y =5;
    yargs
        .env('')
        .options('cfconfig', {
            default: DEFAULTS.CFCONFIG,
            global: false,
        })
        .config('cfconfig', 'Custom path for authentication contexts config file', (configFilePath) => {
            try {
                authManager.loadContexts(process.env.CF_API_KEY, process.env.CF_URL || DEFAULTS.URL , configFilePath);
                _.forEach(files, (file) => {
                    if (file.endsWith('.cmd.js')) {
                        const command = require(file);
                        if (command.isRoot()) {
                            if (command.isBetaCommand()) {
                                const currentContext = authManager.getCurrentContext();
                                if (currentContext && currentContext.isBetaFeatEnabled()) {
                                    rootCommands.push(command);
                                }
                            } else {
                                rootCommands.push(command);
                            }
                        }
                    }
                });
                _.forEach(rootCommands, (command) => {
                    yargs.command(command.toCommand());
                });
            } catch (err) {
                printError(err);
                process.exit(1);
            }
        });


    yargs // eslint-disable-line
        .completion()
        .demandCommand(1, 'You need at least one command before moving on')
        .wrap(null)
        .version(false)
        .help('help')
        .epilogue('For more information, find our official documentation at http://cli.codefresh.io')
        // .option('help', {
        //     global: false,
        // })
        .argv;
});
