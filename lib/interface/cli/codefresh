#!/usr/bin/env node

const path = require('path');
const _ = require('lodash');
const yargs = require('yargs');
const recursive = require('recursive-readdir');
const CFError = require('cf-errors');
const DEFAULTS = require('./defaults');
const authManager = require('../../logic').auth.manager;
const { printError } = require('./helpers/general');
const nock = require('nock');
const stdMocks = require('std-mocks');

const x = {
    command: 'get pip --repo-owner codefresh-io --repo-name demochat --name demochat',
    params: {
        name: 'demochat',
        limit: 251,
        page: 0,
        'repo-owner': 'codefresh-io',
        'repo-name': 'demochat',
    },
    apiCalls: [
        {
            url: '/api/pipelines',
            qs: {
                name: 'demochat',
                limit: 25,
                page: 0,
                repoOwner: 'codefresh-io',
                repoName: 'demochat',
            },
            method: 'GET',
        },
        {
            url: '/api/pipelines',
            qs: {
                name: 'demochat',
                limit: 25,
                page: 0,
                repoOwner: 'codefresh-io',
                repoName: 'demochat',
            },
            method: 'GET',
        },
    ],
    apiResponse: [{
        responseData: [
            {
                '_id': '59d62fc65e09a90001aefed2',
                'service': '59d62fc65e09a90001aefed0',
                'dockerFilePath': 'Dockerfile',
                'applicationPort': '3000',
                'run': {
                    'node': '',
                    'nodeParams': '',
                    'workDir': '',
                    'jsFile': '',
                    'params': '',
                },
                'template': {
                    'label': 'Node.js',
                },
                'name': 'demochat',
                'imageName': 'codefreshio/demochat',
                'provider': 'github',
                'repoOwner': 'codefresh-io',
                'repoName': 'demochat',
                'account': '59d37837920f8900018a6183',
                'creator': '59d37837920f8900018a6182',
                '__v': 1,
                'registry': null,
                'contexts': [],
                'clusterProvider': {
                    'active': false,
                },
                'notifications': [],
                'tests': [],
                'ymlfileLocation': 'codefresh.yml',
                'ymlFileFrom': 'repo',
                'webhookBuildStrategy': 'regular',
                'webhook': false,
                'integ_sh': '',
                'deployment': {
                    'deploymentYamlFrom': 'kubeService',
                    'deploy_image': '',
                    'deploy_type': 'default',
                },
                'deploy_sh': 'if [[ $CF_BRANCH == master ]]; then\n     #install cf command line\n     npm install -g @codefresh-io/cf-cli\n     #authenticate as user TOKEN and USER. User is configured in the environment variables\n     cf-cli login --token $TOKEN -u $USER\n     # cf-cli builds build -a $ACCOUNT -o $REPO_OWNER -r $REPO_NAME\n     cf-cli run codefresh/demochat:master\n     fi',
                'test_sh': '',
                'dockerFileContents': 'FROM node:8.0-alpine AS builder\n\nWORKDIR /app\n\nCOPY package.json /app\n\n# Creating tar of productions dependencies\nRUN npm install --production && cp -rp ./node_modules /tmp/node_modules\n\n# Installing all dependencies\nRUN npm install\n\n# Copying application code\nCOPY . /app\n\n# Running tests\nRUN npm test\n\nFROM node AS runner\n\nEXPOSE 3000\nWORKDIR /app\n\n# Adding production dependencies to image\nCOPY --from=builder /tmp/node_modules /app/node_modules\n\n# Copying application code\nCOPY . /app\n\nCMD npm start',
                'env': [
                    {
                        'value': '3000',
                        'key': 'PORT',
                        '_id': '59d62fc652c3760001ee4d25',
                    },
                    {
                        'key': 'ziv-codefresh',
                        'value': '*****',
                        'encrypted': true,
                        '_id': '59d79e6ffa01f300019b03a2',
                    },
                ],
                'workingDirectory': './',
                'useDockerfileFromRepo': true,
                'create': '2017-10-05T13:12:38.163Z',
                'webhookFilter': [
                    {
                        '_id': '59d62fc652c3760001ee4d24',
                        'events': {
                            'push': true,
                        },
                        'regex': '/.*/gi',
                        'type': 'default',
                    },
                ],
            },
        ],
        statusCode: 200,
    },
        {
            responseData: [
                {
                    '_id': '59d62fc65e09a90001aefed2',
                    'service': '59d62fc65e09a90001aefed0',
                    'dockerFilePath': 'Dockerfile',
                    'applicationPort': '3000',
                    'run': {
                        'node': '',
                        'nodeParams': '',
                        'workDir': '',
                        'jsFile': '',
                        'params': '',
                    },
                    'template': {
                        'label': 'Node.js',
                    },
                    'name': 'demochat',
                    'imageName': 'codefreshio/demochat',
                    'provider': 'github',
                    'repoOwner': 'codefresh-io',
                    'repoName': 'demochat',
                    'account': '59d37837920f8900018a6183',
                    'creator': '59d37837920f8900018a6182',
                    '__v': 1,
                    'registry': null,
                    'contexts': [],
                    'clusterProvider': {
                        'active': false,
                    },
                    'notifications': [],
                    'tests': [],
                    'ymlfileLocation': 'codefresh.yml',
                    'ymlFileFrom': 'repo',
                    'webhookBuildStrategy': 'regular',
                    'webhook': false,
                    'integ_sh': '',
                    'deployment': {
                        'deploymentYamlFrom': 'kubeService',
                        'deploy_image': '',
                        'deploy_type': 'default',
                    },
                    'deploy_sh': 'if [[ $CF_BRANCH == master ]]; then\n     #install cf command line\n     npm install -g @codefresh-io/cf-cli\n     #authenticate as user TOKEN and USER. User is configured in the environment variables\n     cf-cli login --token $TOKEN -u $USER\n     # cf-cli builds build -a $ACCOUNT -o $REPO_OWNER -r $REPO_NAME\n     cf-cli run codefresh/demochat:master\n     fi',
                    'test_sh': '',
                    'dockerFileContents': 'FROM node:8.0-alpine AS builder\n\nWORKDIR /app\n\nCOPY package.json /app\n\n# Creating tar of productions dependencies\nRUN npm install --production && cp -rp ./node_modules /tmp/node_modules\n\n# Installing all dependencies\nRUN npm install\n\n# Copying application code\nCOPY . /app\n\n# Running tests\nRUN npm test\n\nFROM node AS runner\n\nEXPOSE 3000\nWORKDIR /app\n\n# Adding production dependencies to image\nCOPY --from=builder /tmp/node_modules /app/node_modules\n\n# Copying application code\nCOPY . /app\n\nCMD npm start',
                    'env': [
                        {
                            'value': '3000',
                            'key': 'PORT',
                            '_id': '59d62fc652c3760001ee4d25',
                        },
                        {
                            'key': 'ziv-codefresh',
                            'value': '*****',
                            'encrypted': true,
                            '_id': '59d79e6ffa01f300019b03a2',
                        },
                    ],
                    'workingDirectory': './',
                    'useDockerfileFromRepo': true,
                    'create': '2017-10-05T13:12:38.163Z',
                    'webhookFilter': [
                        {
                            '_id': '59d62fc652c3760001ee4d24',
                            'events': {
                                'push': true,
                            },
                            'regex': '/.*/gi',
                            'type': 'default',
                        },
                    ],
                },
            ],
            statusCode: 200,
        }],
    outputEntity: [
        {
            'entityType': 'pipeline',
            'info': {
                'id': '59d62fc65e09a90001aefed2',
                'name': 'demochat',
                'imageName': 'codefreshio/demochat',
                'repoOwner': 'codefresh-io',
                'repoName': 'demochat',
            },
            'defaultColumns': [
                'id',
                'name',
                'repoOwner',
                'repoName',
            ],
            'wideColumns': [
                'id',
                'name',
                'repoOwner',
                'repoName',
            ],
        },
    ],
};

const buildMockHttp = (httpReq) =>{
    const apiCalls = httpReq.apiCalls;
    const apiResponse = httpReq.apiResponse;
    const details = {
        method: apiCalls.method,
        url : apiCalls.url,
        qs : apiCalls.qs,
        responseStatus : apiResponse.statusCode,
        responseData : apiResponse.responseData,
    };
    return details;
};

const createMock = (httpReqArray, mockCount, numOfMocks) => {
    nock('https://g.codefresh.io')
        .get(httpReqArray[mockCount].url)
        .query(httpReqArray[mockCount].qs)
        .reply(httpReqArray[mockCount].responseStatus, function (uri, requestBody) {
            if (mockCount < numOfMocks-1) {
                createMock(httpReqArray,mockCount++,numOfMocks);
            }
            return [httpReqArray[mockCount].responseStatus, httpReqArray[mockCount].responseData];
        });

};

if (process.env.MOCK_REQUEST) {
    stdMocks.use();
    const httpReqArray = [];
    //const mockReq = x;
    const mockReq = JSON.parse(process.env.MOCK_REQUEST);
    for (let i = 0; i < mockReq.apiCalls.length; i++) {
        let httpReq = {
            apiCalls: mockReq.apiCalls[i],
            apiResponse: mockReq.apiResponse[i],
        };
        httpReqArray.push(buildMockHttp(httpReq));
    }
    createMock(httpReqArray,0 ,httpReqArray.length);
}


process.on('uncaughtException', function (err) {
    printError(err);
    process.exit(1);
});

process.on('unhandledRejection', error => {
    printError(error);
    process.exit(1);
});


recursive(path.resolve(__dirname, 'commands'), (err, files) => {
    const rootCommands = [];
    const x = require("/Users/codefresh/Documents/cli/lib/interface/cli/commands/auth/create-context.cmd.js");
    const y =5;
    yargs
        .env('')
        .options('cfconfig', {
            default: DEFAULTS.CFCONFIG,
            global: false,
        })
        .config('cfconfig', 'Custom path for authentication contexts config file', (configFilePath) => {
            try {
                authManager.loadContexts(process.env.CF_API_KEY, process.env.CF_URL || DEFAULTS.URL , configFilePath);
                _.forEach(files, (file) => {
                    if (file.endsWith('.cmd.js')) {
                        const command = require(file);
                        if (command.isRoot()) {
                            if (command.isBetaCommand()) {
                                const currentContext = authManager.getCurrentContext();
                                if (currentContext && currentContext.isBetaFeatEnabled()) {
                                    rootCommands.push(command);
                                }
                            } else {
                                rootCommands.push(command);
                            }
                        }
                    }
                });
                _.forEach(rootCommands, (command) => {
                    yargs.command(command.toCommand());
                });
            } catch (err) {
                printError(err);
                process.exit(1);
            }
        });


    yargs // eslint-disable-line
        .completion()
        .demandCommand(1, 'You need at least one command before moving on')
        .wrap(null)
        .version(false)
        .help('help')
        .epilogue('For more information, find our official documentation at http://cli.codefresh.io')
        // .option('help', {
        //     global: false,
        // })
        .argv;
});
